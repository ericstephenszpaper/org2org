<apex:page showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
<!--
    MIT License

    Copyright (c) 2021 zPaper, Inc.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
-->
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- You may update this version of jQuery if you so desire, but be sure that you test this page afterward. -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/redmond/jquery-ui.min.css"></link>
    <script src="https://static.zpaper.com/js/help2021.js" why="ERS210824 #85275"></script>

    <!-- Custom styling -->
    <style>
        /* menu-button css start */
        .display-inline-block {
            display: inline-block;
        }
        .menu-button {
          cursor: pointer;
        }
        
        .bar1, .bar2 {
          width: 18px;
          height: 4px;
          background-color: rgb(243 243 243);;
          margin: 0px 6px;
          transition: 0.4s; 
        }
        
        .bar1 {
            transform: translate(0, 4px);
        }
        .bar2 {
          transform: rotate(90deg);
        }
        .accordian-header {
            font-size: 20px;
        }
        /* menu-button css end */        
        .infoIcon {
            display: inline-block;
            margin: 2px 5px;
        }
        .input-fld-match-alignment-container {
            position: relative  !important;
        }
        .input-fld-match-alignment {
            position: absolute          !important;
            bottom: 0                   !important;
            right: 12px                 !important;
        }
        /* Fix the vertical alignment problem that occurs when a button is placed next to the text input field */
        .grid-fix-slds-wrap-vertical-alignment {
            align-items: flex-end       !important;     /* overcome slds-wrap style */
        }
        .grid-fix-slds-text-field {
            margin-top: -22px           !important;
            margin-left: -70px          !important;
        }
        .all-on-one-line {
            white-space: nowrap         !important;
        }
        .extra-vertical-spacing-small {
            margin-top: 8px             !important;
        }
        .extra-vertical-spacing-medium {
            margin-top: 16px            !important;
        }
        .extra-vertical-spacing-large {
            margin-top: 24px            !important;
        }
        .extra-vertical-spacing-tweak-large {
            margin-top: 22px            !important;
        }
        .element-hidden {
            display: none               !important;
        }
        /* menu-button css end */        
        .infoIcon {
            display: inline-block;
            margin: 2px 5px;
        }
        .input-fld-match-alignment-container {
            position: relative  !important;
        }
        .input-fld-match-alignment {
            position: absolute          !important;
            bottom: 0                   !important;
            right: 12px                 !important;
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            padding-top: 100px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }

        /* The Close Button */
        .close {
            color: #aaaaaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
    /*.slds-button{
    float:right;
    }*/
    .remove-hdr{
        position: relative;
        left: 50px;
    }
    .plus-nw{
        background: #2e2e2e9c;
        width: 32px;
        border-radius: 8px;
        /*position: relative;
        text-align: -webkit-center;
        padding: 10px 3px 14px 3px !important;
        top: 2px;*/
    }
    
    /*.bar1, .bar2 {
        width: 15px !important;
        height: 5px !important;
        background-color: #2e2e2e;
        margin: 0px 0;
        transition: 0.4s;
    }*/
    .h-nw{
        height: 24px;    
        position: relative;
        left: -45px;
        top: -16px;
    }
    .rm-btn{
        position: relative;
        /*left: 52px;
        top: -4px;*/
    }
    .send-btn{
        position: absolute !important;
        left: 16px;
        top: 18px;
    }
     .first-one{
        position: relative;
        top: 22px;
        left: -6px;
     }
    .thirth-last{
        position: relative;
        top: 34px;
    }
  

    .browse-frm-ele {
     
        top: -0px;
    }
    .pg-frm-ele{
     
        position: relative;
    
    }
    .pg-frm-ele-1{
       width: 159px;
        position: relative;
        left: -10px;
    }
    .v-btn{
          position: absolute !important;
            top: 0px;
            right: -1px;
            border: 1px solid rgb(77 77 78) !important;
            padding: 0px 9px !important;
            text-decoration: none !important;
            color: #000 !important;
    }
    .r0{
        padding-right: 0 !important;
    }
    
    .v-el{
        position: relative;
        left: -54px;
    }
    
    .a-el{
        position: relative;
        left: -18px;
    }
    .v-el-2{
        position: relative;
        left: -53px;
        z-index: 9999;
        cursor: pointer;
    }
    </style>
    <!-- Custom styling -- END -->

    <!-- Javascript to show/hide accordion sections -->
    <!-- Do not edit this section unless you know what you are doing; you could break the accordion functionality. -->
    <script type="text/javascript">
        function expandContractAccordionSection(sectionName) {
            let $button = $('#btn-' + sectionName);
            let $section = $('#section-' + sectionName);
            $section.toggleClass('slds-is-open');
            $button.attr('aria-expanded',  "true" === $button.attr('aria-expanded') ? "false" : "true");
            console.log('Opening/Closing Accordion Seciont');
        }
    </script>
    <!-- Javascript to show/hide accordion sections -- END -->

    <!-- Utility Javascript to add elements, etc. -->
    <script type="text/javascript">
        // Do not edit this html content unless you know what you are doing. It defines click handlers and DOM
        // manipulators that control the user experience.
        function previewFile(idx, idRoot, iszPaperTemplate) {
            debugger;
            let sfFile = $('#' + idRoot + idx).val();
            if (!sfFile) {
                alert("First select a Salesforce file to view.");
                return;
            }
            if (iszPaperTemplate) {
                let sfId = "{!$CurrentPage.parameters.id}";
                let sessionId = "{!GETSESSIONID()}";
                let parts = sfFile.split(':');
                let templateId = parts[0];
                let bates = parts[1];
                //ERS220614 HACK TODO CRN220614 custom setting let w = window.open("https://dev-gw.zpaper.com/zippi/forms/PDF/" + templateId + "?SFsession=" + sessionId + "&recordId=" + sfId, '_blank', 'width=800, height=900');
                //ERS220704 if (!zHost || zHost.indexOf("/gw.z")>-1) {zHost="https://dev-gw.zpaper.com"; alert("Has CMA updated gw?"); } //ERS220616
                if (!zHost || zHost.indexOf("zpaper.com")==-1) {zHost="https://gw.zpaper.com"; } //ERS220704
                var aURL=zHost+"/zippi/forms/PDF/" + templateId + "?SFsession=" + sessionId + "&recordId=" + sfId; //ERS220704 #92327
                var zm=$("input[name=zmode]:checked").val();
                if (zm == "native") { aURL+="&zmode="+zm; } //ERS220826 #93262
                if (zm == "proxy") { //ERS220705 #92327
                    var sfOrg=sessionId.substring(0,sessionId.indexOf("!"));
                    var BATES=sfId+"@"+sfOrg+"-"+ bates + ".pdf";
                    aURL=zHost+"/kb/jsp/pdfAddFormPDF.jsp?BATES="+BATES+"&SFsession="+sessionId;
                    aURL += "&SFuser={!$User.Username}";
                }
                if (zm == "classic") { //ERS220825 #93262
                    //if (ele.id=="PreviewZT") fURL="../jsp/SF_pull.jsp?BATES="+ppId+"@00D4T000000CqSa-"+fid+".pdf"; //.htm does not matter with zPDF2
                    var sfOrg=sessionId.substring(0,sessionId.indexOf("!"));
                    var BATES=sfId+"@"+sfOrg+"-"+ bates + ".htm";
                    aURL=zHost+"/kb/jsp/SF_pull.jsp?BATES="+BATES+"&SFsession="+sessionId;
                    aURL += "&SFuser={!$User.Username}"; 
                }
                //if (!confirm(aURL)) return; //ERS220704 TODO better error handling when /zippi/forms/ fails
                let w = window.open(aURL, '_blank', 'width=800, height=900');
                w.focus();
                return;
            }
            let idxBegin = sfFile.indexOf("//") + 2;
            let idxEnd = sfFile.indexOf('/', idxBegin);
            let sfId = sfFile.substring(idxBegin, idxEnd);
            let w = window.open(curPageHost + '/' + sfId, '_blank', 'width=760, height=900');
            w.focus();
        }
    
        function sldsHelpIcons(compName) {
                let toolTips = helpStrings && helpStrings[compName];
                console.log("ToolTips for: " + compName, toolTips);
                if (!toolTips) {
                    console.warn("Help is not available for this component!");
                    //TODO APS210908 transport training materials needed
                    toolTips = {
                        "helpDoc" : "https://docs.google.com/document/d/1MBIB12IB0uED0LFvyOiVcSbGoKwSV5f5UL2wq6LJiDw/preview",
                        "sendToPdf": "When sending a fax, do not use spaces or special characters within the fax number.\n\nTo send to multiple destinations - seperate by commas with no spaces.\n\nWe will save the PDF file to this record as an Attachment:\n\nIf you would like to ONLY save the document as a PDF file on this record, select the checkbox.",
                        "sendToPdfQ": "https://zpaper.com/contact-us#transport-to-automation",
                        "docTitle": "Select the source location for the document upload Hard Drive file, Salesforce Library file, or a file already attached to this Record.\n\nYou can add additional documents by selecting the PLUS button after each attachment.\n\nUse the side buttons to drag and reorder or delete a specific document in your bundle prior to sending.\n\nYou can also select certain pages within each document to be sent. Default is All.",
                        "coverBarcode": "include barcode on first page",
                        "coverBarCodeVal": "Select Checkbox if you would like a barcode on the right margin of the 1st page in your document or bundle. If a barcode is used and that page is faxed back into one of your fax lines, we will attach that file to this record. \n\nEnter Title used to name the PDF file that is attached to this record. If not filled in, by default, we use the file name of the first attached document.",
                        "fileUpload": "Select the source location for the document upload (Hard Drive file, Salesforce Library file, or a file already attached to this Record).\n\nYou can add additional documents by selecting the PLUS button after each attachment.\n\nUse the side buttons to drag and reorder or delete a specific document in your bundle prior to sending.\n\nYou can also select certain pages within each document to be sent. For example, 2 or 1,3,5 or 2-3 or 2-3,6-8.  Default pages is set to All.",
                        //"coverBarcodeQ": "&search='coversheet'",
                        "fieldsTD": "Find the field you need starting from the record type you are on.",
                        "fieldsTDQ": "window.open('https://docs.google.com/presentation/d/1YtJ_rML8VCmyzM_ed_FbrIKH2u_WdKFyLNS6m-_JQGw/view','zphelp','width=1024,height=800,resizable=1,menubar=1')",
                        "buttonURLQ" : "window.open('!sfServer/p/setup/link/ActionButtonLinkList?pageName=Case&type=Case','sfhelp','resizable=1,menubar=1')",
                    };
                }

                let $infoDivs = $('div.infoIcon');
                console.log("Found " + $infoDivs.length + " help icons for: " + compName);
                for (const div of $infoDivs) {
                    let helpId = div.id && div.id.replace(/Q$/, ''); // the base help id
                    let helpText = toolTips[helpId]; // title text for the base id
                    //let helpLink = toolTips[helpId + 'Q'] || toolTips.helpDoc; // link to help doc
                    var u=toolTips[helpId + 'Q'] || toolTips.helpDoc; //ERS210826 #85275
                    if (u.indexOf("http")==0) { u="var w=window.open('"+u+"','zpHelp','resizable=1,menubar=1');w.focus();"; }
                    let helpLink = u; // link to help doc
                    $(div).html(`
                        <button class="slds-button slds-button_icon" title="${helpText}" onclick="${helpLink}">
                            <svg class="slds-button__icon" aria-hidden="true">
                                <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#info')}"></use>
                            </svg>
                            <span class="slds-assistive-text">${helpText}</span>
                        </button>
                    `);
                }
            }
    
    
        let __recipientCount__ = 1;
        function addRecipientLine() {
            __recipientCount__++;
            let $parentDiv = $('#sendto-parent-div');
            $parentDiv.append(`<div class="slds-col slds-size_3-of-4">
                    <span>
                    <div class="slds-form-element">
                        <label class="slds-form-element__label" for="sendto-input-id-${__recipientCount__}">
                        Destination</label>
                    <div class="slds-form-element__control">
                    <input type="text" id="sendto-input-id-${__recipientCount__}" placeholder="Fax Number(s) Here" required="" class="slds-input" />
                    </div>
                    </div>
                    </span>
                    </div>`
            );
            // Set the height of 'Add Recipient' button's container so that the button stays on the bottom of the row.
            $('#add-recipient-btn-container').css(height, '54px');
        }
    
        function setRecipients() { //ERS210907 #85837
            alert("Enter fax number or PDF. Use commas for multiple destinations.");
            //ERS210907 TODO lookup to related records
        }

        function displayTemplate(templateToggle){
            console.log('inside displayTemplate()');
            let $browseControlDiv = $('#browseControlsContainer-11062022');
            //$browseControlDiv.addClass('element-hidden');
            console.log($browseControlDiv.attr('id'),+'-- css class'+$browseControlDiv.attr("class"));
            
            $browseControlDiv.toggleClass('element-hidden',!templateToggle);
            console.log($browseControlDiv.attr('id'),+'-- css class'+$browseControlDiv.attr("class"));
            console.log($('#browseControlsContainer-11062022 #select-11062022').attr('id'));
            //Reset template content
            //let selectElement = document.getElementById("select-"+11062022); //$('#browseControlsContainer-11062022 #select-11062022');
            $('#browseControlsContainer-11062022 #select-11062022').val("");;
            //$('#browseControlsContainer-11062022 #myModal-11062022');
            var modal = document.getElementById("myModal-"+11062022);
            modal.style.display = "none";
                //popUpClose(this,11062022)

        }
        __gContentLines__ = 1;
        _gContentMap__ = new Map();
        function addContentLine() {
            // debugger;
            __gContentLines__++;
            let randomElementId = Date.now();
            let $browseControlDiv = $('#browseControlsContainer-11062022');
            let newContent = $browseControlDiv[0].outerHTML
                .replace(/-11062022/g, '-'+randomElementId)
                .replace(/this,11062022/g, 'this,'+randomElementId)
                .replace(/previewFile\(11062022,/g, 'previewFile('+randomElementId+',')
                .replace(/attachSource11062022/g, 'attachSource'+randomElementId)
                .replace(/template1/g, 'template'+randomElementId)
                .replace(/templateURL1/g, 'templateURL'+randomElementId)
                .replace(/startPage1/g, 'startPage'+randomElementId);
            $browseControlDiv.parent().append(newContent);
            _gContentMap__.set(randomElementId,newContent);
            displayTemplate(false);
            //TO DO...
            //Reset options and classes in Template

            //let $newEle = $('#browseControlsContainer-' + randomElementId);
            // $newEle.find('.source-select').toggleClass(['slds-size_3-of-4', 'slds-size_1-of-1']);
            //$("#content-src-salesforce-" + randomElementId).toggleClass('element-hidden');
            //$("#content-src-harddrive-" + randomElementId).toggleClass('element-hidden');
            //$('#remove-src-btn-container-' + randomElementId).toggleClass('element-hidden');
            /*if (__gContentLines__ > 1) {        // Make sure that the 'Delete' btn is only displayed on last entry.
                if (__gContentLines__ > 2) {
                    $('#remove-src-btn-container-' + (__gContentLines__ - 1)).toggleClass('element-hidden');
                }
                $('#remove-src-btn-container-' + __gContentLines__).toggleClass('element-hidden');
            }*/
            return randomElementId;
        }

        function removeContentLine(element, count) {
            $('#browseControlsContainer-' + count).remove();
            __gContentLines__--;
            _gContentMap__.delete(count);
            
            if (_gContentMap__.size() === 1) {        // show the 'Delete' button on this row again.
                displayTemplate(true);
                /*var onlyRemoveButtonLeft = getElementsStartsWithId("remove-src-btn-container-");
                
                if (!onlyRemoveButtonLeft.classList.contains('element-hidden')) {
                    onlyRemoveButtonLeft.toggleClass('element-hidden');
                }
                //$('#remove-src-btn-container-' + __gContentLines__).toggleClass('element-hidden');
                */
            }
        }

        function showContentSourceLine(element, count) {
            var displayTemplate  = false;
            var addNewContentLine = true;
            console.log('$elementParentContent:'+element.id+''+$(element).val());
            // First hide any nested element that is currently showing.
            for (let idx=1; idx<element.options.length; idx++) {            // skip the first option (Please select...)
                let optionVal = element.options[idx].value;
                let $div = $('#content-src-' + optionVal + '-' + count);
                if (!$div.hasClass('element-hidden')) {
                    $div.toggleClass('element-hidden');
                }
            }
            // Then show the one that was chosen.
            let $elementVal = $(element).val();
            if ("Please select..." == $elementVal) {
                
            } 
            else if("harddrive" == $elementVal){
                console.log('inside harddrive of showContentSourceLine');
                let $elementParentContent = $(element).parentsUntil('browseControlsContainer-11062022','#browseControlsContainer-11062022');
                console.log('$elementParentContent:'+$elementParentContent.attr('id'));
                if($elementParentContent.attr('id') == $('#browseControlsContainer-11062022').attr('id')){
                    //duplicate the template and display off the template
                    console.log('creating content from template');
                    var newElementCount = addContentLine();
                    console.log('back from content from template');
                } else{
                    var newElementCount = count;
                    //addNewContentLine = false;
                }
                let $divToShow = $('#content-src-' + $elementVal + '-' + newElementCount);
                console.log('$divToShow.hasClass-element-hidden::'+$divToShow.hasClass('element-hidden'));
                if(!$divToShow.hasClass('element-hidden')){
                    addNewContentLine = false;
                }
                $divToShow.toggleClass('element-hidden',false);
                let $removeButton = $('#remove-src-btn-container'+ '-' + newElementCount);
                $removeButton.toggleClass('element-hidden',false);
                var modal = document.getElementById("myModal-"+newElementCount);
                modal.style.display = "none";
                let fileinput = $('#harddrive-upload-input'+ '-' + newElementCount);
                fileinput.click();

                //Creating next line of content
                if(addNewContentLine){
                    var newElementCount = addContentLine();
                    $('#browseControlsContainer-' + newElementCount).toggleClass('element-hidden');    
                }
            }
            else if("salesforce" == $elementVal){
                console.log('inside salesforce of showContentSourceLine');
                let $elementParentContent = $(element).parentsUntil('browseControlsContainer-11062022','#browseControlsContainer-11062022');
                console.log('$elementParentContent:'+$elementParentContent.attr('id'));
                if($elementParentContent.attr('id') == $('#browseControlsContainer-11062022').attr('id')){
                    //duplicate the template and display off the template
                    console.log('creating content from template');
                    var newElementCount = addContentLine();
                    console.log('back from content from template');
                } else{
                    var newElementCount = count;
                }
                let $divToShow = $('#content-src-' + $elementVal + '-' + newElementCount);
                $divToShow.toggleClass('element-hidden',false);
                let $removeButton = $('#remove-src-btn-container'+ '-' + newElementCount);
                $removeButton.toggleClass('element-hidden',false);
                var modal = document.getElementById("myModal-"+newElementCount);
                modal.style.display = "none";
                let fileinput = $('#salesforce-file-browse-input'+ '-' + newElementCount);
                fileinput.click();

                //Creating next line of content
                var newElementCount = addContentLine();
                $('#browseControlsContainer-' + newElementCount).toggleClass('element-hidden');
            } 
            else if("salesforceFile" == $elementVal){
                console.log('inside salesforce of showContentSourceLine');
                let $elementParentContent = $(element).parentsUntil('browseControlsContainer-11062022','#browseControlsContainer-11062022');
                console.log('$elementParentContent:'+$elementParentContent.attr('id'));
                if($elementParentContent.attr('id') == $('#browseControlsContainer-11062022').attr('id')){
                    //duplicate the template and display off the template
                    console.log('creating content from template');
                    var newElementCount = addContentLine();
                    console.log('back from content from template');
                } else{
                    var newElementCount = count;
                }
                let $divToShow = $('#content-src-' + $elementVal + '-' + newElementCount);
                $divToShow.toggleClass('element-hidden',false);
                let $removeButton = $('#remove-src-btn-container'+ '-' + newElementCount);
                $removeButton.toggleClass('element-hidden',false);
                var modal = document.getElementById("myModal-"+newElementCount);
                modal.style.display = "none";
                let fileinput = $('#salesforce-associated-file-browse-input'+ '-' + newElementCount);
                fileinput.click();

                //Creating next line of content
                var newElementCount = addContentLine();
                $('#browseControlsContainer-' + newElementCount).toggleClass('element-hidden');
            } 
            else {
                let $divToShow = $('#content-src-' + $elementVal + '-' + count);
                $divToShow.toggleClass('element-hidden');
                var modal = document.getElementById("myModal-"+count);
                modal.style.display = "none";
                let $removeButton = $('#remove-src-btn-container'+ '-' + count);
                $removeButton.toggleClass('element-hidden');
                addContentLine();
            }
        }
        function handleFileChoice(ele, count) {
            debugger;
            // alert("New file choice: " + $(ele).val());
            let filename = $(ele).val();
            let idx = filename.lastIndexOf('\\') > 0 ? filename.lastIndexOf('\\') : filename.lastIndexOf('/');
            if (goodFile(filename)) { //ERS210728
                $('#upload-file-text-input-' + count).val(filename.substring(idx + 1));
            }
        }
    
        //CRN220423 Support selection of zPaper Templates
        function exploreZPaperTemplates(ele) {
            let $ele = $(ele);
            // set up global variables that will be used inside of dialog to set selected value
            window.__inputField__ = $ele.closest("div.slds-grid").find("input")[0];

            // Build UI to put into zPaperFileDlg
            window.__$contentDlg__ = $('#zPaperFileDlg').dialog({
                autoOpen: true,
                height: '250',
                width: '98%',
                modal: true
                // buttons: {
                //     "Cancel": function() {
                //         $( this ).dialog( "close" );
                //     }
                // }
            });
            // Let's compact the dialog a bit...
            $('.ui-dialog').find('.ui-dialog-buttonpane').css('padding', '0');
            $('.ui-dialog').find('.ui-dialog-buttonpane').css('margin-top', '0');
            $('.ui-dialog').css('font-size', '0.9em');
            let filter = encodeURIComponent('bates.indexOf("@")<0 && bates.indexOf("-at-")<0 && bates.indexOf("#")<0 && ' +
                '(metadata.X_formType && metadata.X_formType.match(/Fax|Coversheet|Form/))');
            let zUrl = zHost+"/zippi/items?bates=*_Form&filter=" + filter; //ERS220614 #92050 
            $.ajax({
                url: zUrl,
                dataType: "json",
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Accept": "application/json",
                    "Authorization": "Bearer {!GETSESSIONID()}"
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("Error retrieving zPaper Templates: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                },
                success: function (data, textStatus, jqXHR) {
                    console.log(data);
                    let $folderTable = $("#zPaperFileTable");
                    $folderTable.empty();
                    //alert("ERS220725 found "+data);
                    //alert(JSON.toString(data));
                    if (data && !data.totalSize) { data.totalSize=data.length; } //ERS220808 did zippi 4.9 change it?
                    if (!data) { //ERS220805 || (data && !data.totalSize) || (data && data.totalSize==0)) { //ERS220725 #92771
                        alert("No templates found.  In Transport zPaper recommends storing DOCX files as asset library files instead.");
                    }
                    if (data && data.totalSize > 0) {
                        getSObjectType("{!$CurrentPage.parameters.id}", (objectName) => {
                            debugger;
                            let count = 1;
                            data.forEach((datum) => {
                                console.log(`Form ${count++} =>  ${datum.metadata.X_folderID} : ${datum.label} : faxStatus : ${datum.metadata.X_faxStatus} : formType : ${datum.metadata.X_formType}`);
                                if (!datum.metadata.X_faxStatus && objectName === datum.metadata.X_prePopType) {
                                    let value = datum.id + ':' + datum.bates;
                                    console.log(`Folder Id: ${datum.metadata.X_folderID}`);
                                    $folderTable.append(`<tr><td>
                                        <div style="float:left;">
                                        <svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">
                                        <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#pdf')}"></use>
                                        </svg></div>
                                        <div style="display:table-cell;margin-left:24px;margin-top:7px;padding-left:6px;">
                                        <a href="#" onclick="return zpaperFileSelected(this)" data-value="${value}" data-type="file">${escapeHTML(datum.label)}</a></div>
                                        </td></tr>`);
                                }
                            });
                        });
                    }
                }
            });
        }
        
        function zpaperFileSelected(ele) {
            let $ele = $(ele);
            let fileType = $ele.attr("data-type");
//            let sObjectId = $ele.attr("data-value");
            let idAndBates = $ele.attr("data-value");
            let sObjectName = $ele.text();

//          window.__inputField__.value = "zt://" + sObjectId + "/" + sObjectName;
            window.__inputField__.value = idAndBates;
            window.__$contentDlg__.dialog("close");
            hasGoodFile = true;
        }
        
        // Allow use to select Salesforce Files associated to current SObject record or in Library.
        function exploreSalesforceFiles(ele, associatedFiles) {
            let sObjectId = "{!$CurrentPage.parameters.id}";

            let $ele = $(ele);
            console.log($ele);
            // set up global variables that will be used inside of dialog to set selected value
            window.__inputField__ = $ele.closest("div.slds-grid").find("input")[0];

            // Build UI to put into salesforceContentDlgDocumentDiv
            window.__$contentDlg__ = $('#salesforceContentDlg').dialog({
                autoOpen: true,
                height: '250',
                width: '98%',
                modal: true
                // buttons: {
                //     "Cancel": function() {
                //         $( this ).dialog( "close" );
                //     }
                // }
            });
            // Let's compact the dialog a bit...
            $('.ui-dialog').find('.ui-dialog-buttonpane').css('padding', '0');
            $('.ui-dialog').find('.ui-dialog-buttonpane').css('margin-top', '0');
            $('.ui-dialog').css('font-size', '0.9em');

            // show the correct input div
            if (associatedFiles) {
                $('#salesforceContentDlgAssociatedFileDiv').show();
                $('#salesforceContentDlgDocumentDiv').hide();
                buildAssociatedFileList();
            }
            else {
                $('#salesforceContentDlgAssociatedFileDiv').hide();
                $('#salesforceContentDlgDocumentDiv').show();
                buildWorkspaceList();
            }
        }
        function buildAssociatedFileList() {
            let sObjectId = "{!$CurrentPage.parameters.id}";
            $('#salesforceContentBreadcrumbDiv').html("Files");
            // reset the list of options
            $('#salesforceAssociatedFileTable').html("");
            // First gather all ContentDocuments associated with the current sObject.
            querySalesforce("SELECT ContentDocument.Id,ContentDocument.Title,ContentDocument.FileExtension from ContentDocumentLink WHERE LinkedEntityId='" + sObjectId + 
                "' ORDER BY ContentDocument.Title",
                function (data, textStatus, jqXHR) {
                    let $folderTable = $("#salesforceAssociatedFileTable");
                    if (data && data.totalSize) {
                        data.records.forEach(datum => {
                            let fileExtension = datum.ContentDocument.FileExtension;
                            if ("pdf" === fileExtension || "docx" === fileExtension) {
                                fileExtension = "docx" === fileExtension ? "word" : fileExtension;
                                let fn = datum.ContentDocument.Title;
                                if (fn.indexOf("."+datum.ContentDocument.FileExtension)==-1) { fn+="."+datum.ContentDocument.FileExtension; } //ERS210927 #84085

                                fn = escapeHTML(fn); //CMA220120 fix XSS
                                $folderTable.append(`<tr><td>
                                    <div style="float:left;">
                                    <svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">
                                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#${fileExtension}')}"></use>
                                    </svg></div>
                                    <div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">
                                    <a href="#" onclick="return libraryFileSelected(this)" data-value="${datum.ContentDocument.Id}" data-type="file">${fn}</a></div>
                                    </td></tr>`);
                            }
                        });
                    }
                    // Next gather any Document Checklist Items.
                    //alert("SELECT IsDeleted,Name,ReceivedDocumentId FROM DocumentChecklistItem WHERE ParentRecordId = '" + sObjectId + "' ORDER BY Name" );
                    querySalesforce("SELECT IsDeleted,Name,ReceivedDocumentId FROM DocumentChecklistItem WHERE ParentRecordId = '" + sObjectId + "' ORDER BY Name",
                        function(dciData, textStatus, jqXHR) {
                            if (dciData && dciData.totalSize) {
                                dciData.records.forEach(dciDatum => {
                                    if (!dciDatum.isDeleted) {
                                        let itemName = dciDatum.Name;
                                        querySalesforce("SELECT ContentDocument.Id,ContentDocument.Title,ContentDocument.FileExtension FROM ContentDocumentLink WHERE LinkedEntityId = '" +
                                            dciDatum.ReceivedDocumentId + "'",
                                            function(docData, textStatus, jqXHR) {
                                                if (docData && docData.totalSize) {
                                                    // We should only get one Document here.
                                                    let docDatum = docData.records[0];
                                                    let docTitle = docDatum.ContentDocument.Title;
                                                    let docFileExtension = docDatum.ContentDocument.FileExtension;
                                                    if (docTitle.indexOf("."+docFileExtension) < 0) { docTitle += "."+docFileExtension; }

                                                    docTitle = escapeHTML(docTitle); //CMA220120 fix XSS
                                                    $folderTable.append(`<tr><td>
                                                        <div style="float:left;">
                                                        <svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#${docFileExtension}')}"></use>
                                                        </svg></div>
                                                        <div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">
                                                        <a href="#" onclick="return libraryFileSelected(this)" data-value="${docDatum.ContentDocument.Id}" data-type="file">${itemName}-${docTitle}</a></div>
                                                        </td></tr>`);
                                                }
                                            },
                                            function(jqXHR, textStatus, errorThrown) {
                                                alert("Error loading Document for Checklist Item " + itemName + ": " + errorThrown);
                                            }
                                        );
                                    }
                                });
                            }
                        },
                        function(jqXHR, textStatus, errorThrown) {
                            console.error("Error loading Document Checklist Items: " + errorThrown);// Added console error to avoid error ReceivedDocumentId is not a field on document checklist item.
                            //alert("Error loading Document Checklist Items: " + errorThrown); 
                        }
                    );
                },
                function(jqXHR, textStatus, errorThrown) {
                    alert("Error loading associated Documents: " + errorThrown);
                }
            );
            return false;
        }
        function buildWorkspaceList() {
            $('#salesforceContentBreadcrumbDiv').html("Files");
            // reset the list of options
            $('#salesforceLibraryFileTable').html("");
            // Reinitialize our breadcrumb trail...
            __gBreadCrumbTrail__ = [];
                querySalesforce("SELECT Id,Name,RootContentFolderId from ContentWorkspace WHERE Name like '%' ORDER BY Name",
                function (data, textStatus, jqXHR) {
                    let $folderTable = $("#salesforceLibraryFileTable");
                        if (data && data.totalSize) {
                            data.records.forEach(datum => {
                            $folderTable.append('<tr><td>' +
                                '<div style="float:left;">' +
                                '<svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">' +
                                '<use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#library_folder')}"></use>' +
                                '</svg></div>' +
                                '<div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">' +
                                (datum.RootContentFolderId ?
                                        '<a href="#" onclick="return libraryFileSelected(this)" data-value="' + datum.RootContentFolderId + '" data-type="workspace">' + escapeHTML(datum.Name) + '</a>'
                                        :
                                        escapeHTML(datum.Name)
                                ) + '</div></td></tr>');
                        });
                    }
                },
                function(jqXHR, textStatus, errorThrown) {
                    alert("Error loading Salesforce Libraries: " + errorThrown);
                }
            );
            return false;
        }
        function querySalesforce(query, successFunction, errorFunction) {
            let url = curPageHost + "services/data/v52.0/query/?q=" + encodeURIComponent(query);
            $.ajax({
                url: url,
                dataType: "json",
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Accept": "application/json",
                    "Authorization": "Bearer {!GETSESSIONID()}"
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // alert("Error retrieving Folders: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                    if (errorFunction) {
                        errorFunction(jqXHR, textStatus, errorThrown);
                    }
                },
                success: function (data, textStatus, jqXHR) {
                    console.log(data);
                    if (successFunction) {
                        successFunction(data, textStatus, jqXHR);
                    }
                }
            });
        }
        function postToZippi(url, form, successFunction, errorFunction) {
            var data = new FormData(form);
            for (var pair of data.entries()) { console.log(`${pair[0]}: ${pair[1]}`); }
            $.ajax({
                type: "POST",
                enctype: 'multipart/form-data',
                url: url,
                data: data,
                processData: false,
                contentType: false,
                cache: false,
                timeout: 600000,
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Accept": "application/json",
                    "Authorization": "Bearer {!GETSESSIONID()}"
                },
                success: function (data, textStatus, jqXHR) {
                    if (successFunction) {
                        successFunction(data, textStatus, jqXHR);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (errorFunction) {
                        errorFunction(jqXHR, textStatus, errorThrown);
                    }
                }
            });
        }
        __gBreadCrumbTrail__ = [];
        function libraryFileSelected(ele, curCrumbCount) {
            console.log('inside libraryFileSelected()');
            let $ele = $(ele);
            let fileType = $ele.attr("data-type");
            let sObjectId = $ele.attr("data-value");
            let sObjectName = $ele.text();
            // reset the list of folders/files
            $('#salesforceLibraryFileTable').html("");
            let zUrl = "";
            if (curCrumbCount) {
                // clean up our list of crumbs
                __gBreadCrumbTrail__ = __gBreadCrumbTrail__.slice(0, curCrumbCount - 1);
            }
            // Build the breadcrumbs UI at the top of the dialog.
            let buffer = "Files > <a href='#' onclick='return buildWorkspaceList();'>Libraries</a>";
            for (let idx=0; idx<__gBreadCrumbTrail__.length; idx++) {
                let crumb = __gBreadCrumbTrail__[idx];
                buffer += " > <a href='#' onclick='return libraryFileSelected(this," + (idx + 1) + ");' " +
                    "data-type='" + crumb.type + "' data-value='" + crumb.id + "'>" + escapeHTML(crumb.label) + "</a>";
            }
            $('#salesforceContentBreadcrumbDiv').html(buffer);
            switch(fileType) {
                case 'workspace':
                    // Reinitialize our breadcrumb trail...
                    __gBreadCrumbTrail__ = [];
                    __gBreadCrumbTrail__.push({id: sObjectId, label: sObjectName, type: fileType});
                    // $('#salesforceContentBreadcrumbDiv').html("Files > <a href='#' onclick='return buildWorkspaceList();'>Libraries</a>");
                    // Pull folders in this workspace/library
                        querySalesforce("SELECT Id,Name from ContentFolder WHERE ParentContentFolderId = '" + sObjectId + "' ORDER BY Name",
                        function(data, textStatus, jqXHR) {
                            let $folderTable = $("#salesforceLibraryFileTable");
                                if (data && data.totalSize) {
                                    data.records.forEach(datum => {
                                    $folderTable.append('<tr><td>' +
                                        '<div style="float:left;">' +
                                        '<svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">' +
                                        '<use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#folder')}"></use>' +
                                        '</svg></div>' +
                                        '<div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">' +
                                        '<a href="#" onclick="return libraryFileSelected(this)" ' +
                                            'data-value="' + datum.Id + '" data-type="folder" ' +
                                        'data-parent-id="' + sObjectId + '" data-parent-label="' + sObjectName + '">' +
                                            escapeHTML(datum.Name) + '</a></div>' +
                                        '</td></tr>');
                                });
                            }
                                querySalesforce("SELECT ChildRecordId,ChildRecord.Title,ChildRecord.FileExtension,ChildRecord.FileType from ContentFolderMember WHERE ParentContentFolderId = '" + sObjectId + "' ORDER BY ChildRecord.Title",
                                function(data, textStatus, jqXHR) {
                                    let $folderTable = $("#salesforceLibraryFileTable");
                                        if (data && data.totalSize) {
                                            data.records.forEach(datum => {
                                                let fileExtension = datum.ChildRecord.FileExtension;
                                            if ("pdf" === fileExtension || "docx" === fileExtension) {
                                                fileExtension = "docx" === fileExtension ? "word" : fileExtension;
                                                let fn=datum.ChildRecord.Title;
                                                if (fn.indexOf("."+datum.ChildRecord.FileExtension)==-1) { fn+="."+datum.ChildRecord.FileExtension; } //ERS210927 #84085
                                                fn = escapeHTML(fn);
                                                $folderTable.append(`<tr><td>
                                                    <div style="float:left;">
                                                    <svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#${fileExtension}')}"></use>
                                                    </svg></div>
                                                    <div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">
                                                    <a href="#" onclick="return libraryFileSelected(this)" data-value="${datum.ChildRecordId}" data-type="file">${fn}</a></div>
                                                    </td></tr>`);
                                            }
                                        });
                                    }
                                },
                                function(jqXHR, textStatus, errorThrown) {
                                    alert("Error retrieving Library files: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                                }
                            );
                        },
                        function(jqXHR, textStatus, errorThrown) {
                            alert("Error retrieving Library folders: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                        }
                    );
                    break;
                case 'folder':
                    __gBreadCrumbTrail__.push({id: sObjectId, label: sObjectName, type: fileType});
                    // Pull subfolders in this folder
                        querySalesforce("SELECT Id,Name from ContentFolder WHERE ParentContentFolderId = '" + sObjectId + "' ORDER BY Name",
                        function(data, textStatus, jqXHR) {
                            let $folderTable = $("#salesforceLibraryFileTable");
                                if (data && data.totalSize) {
                                    data.records.forEach(datum => {
                                    $folderTable.append('<tr><td>' +
                                        '<div style="float:left;">' +
                                        '<svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">' +
                                        '<use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#folder')}"></use>' +
                                        '</svg></div>' +
                                        '<div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">' +
                                            '<a href="#" onclick="return libraryFileSelected(this)" ' +
                                            'data-value="' + datum.Id + '" data-type="folder" ' +
                                            'data-parent-id="' + sObjectId + '" data-parent-label="' + sObjectName + '">' +
                                            escapeHTML(datum.Name) + '</a></div>' +
                                        '</td></tr>');
                                });
                            }
                                querySalesforce("SELECT ChildRecordId,ChildRecord.Title,ChildRecord.FileExtension,ChildRecord.FileType from ContentFolderMember WHERE ParentContentFolderId = '" + sObjectId + "' ORDER BY ChildRecord.Title",
                                function(data, textStatus, jqXHR) {
                                    let $folderTable = $("#salesforceLibraryFileTable");
                                        if (data && data.totalSize) {
                                            data.records.forEach(datum => {
                                                let fileExtension = datum.ChildRecord.FileExtension;
                                            if ("pdf" === fileExtension || "docx" === fileExtension) {
                                                fileExtension = "docx" === fileExtension ? "word" : fileExtension;
                                                let fn=datum.ChildRecord.Title;
                                                if (fn.indexOf("."+datum.ChildRecord.FileExtension)==-1) { fn+="."+datum.ChildRecord.FileExtension; } //ERS210927 #84085
                                                fn = escapeHTML(fn);
                                                $folderTable.append(`<tr><td>
                                                    <div style="float:left;">
                                                    <svg width="26" height="26" viewBox="0 0 26 26" aria-hidden="true" class="slds-icon">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#${fileExtension}')}"></use>
                                                    </svg></div>
                                                    <div style="display:table-cell;float:left;margin-top:7px;padding-left:6px;">
                                                    <a href="#" onclick="return libraryFileSelected(this)" data-value="${datum.ChildRecordId}" data-type="file">${fn}</a></div>
                                                    </td></tr>`);
                                            }
                                        });
                                    }
                                },
                                function(jqXHR, textStatus, errorThrown) {
                                    alert("Error retrieving Library files: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                                }
                            );
                        },
                        function(jqXHR, textStatus, errorThrown) {
                            alert("Error retrieving Library folders: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                        }
                    );
                    break;
                case 'file':
                    if (goodFile(sObjectName)) { //ERS210927 #84085
                        window.__inputField__.value = "sf://" + sObjectId + "/" + sObjectName;
                        window.__$contentDlg__.dialog("close");
                    }
                    break;
                default:
                    break;
            }
            return false;
        }
        function exploreSalesforceFolder(ele) {
            let $ele = $(ele);
            console.log($ele);
            let inputField = $ele.closest("div.slds-grid").find("input")[0];

            // Make AJAX call to zippi to pull Documents from selected Folder.
            let folderId = $ele.val();
            if (!folderId) {
                return;         // the select... option was selected
            }
            let zUrl = zHost+"/zippi/externalItems/salesforce/Folder/" + folderId + "/Document"; //ERSERS220614 zHost  TODO CRN220614 externalItems?
            $.ajax({
                url: zUrl,
                dataType: "json",
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Accept": "application/json",
                    "Authorization": "Bearer {!GETSESSIONID()}"
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("Error retrieving Folders: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                },
                success: function (data, textStatus, jqXHR) {
                    console.log(data);
                    // reset the list of options
                    $('#salesforceDocumentSelect option').remove();
                    let $fileSelect = $("#salesforceDocumentSelect");
                    $fileSelect.append('<option value="">...</option>');
                    if (data && data.length) {
                        data.forEach(datum => {
                            $fileSelect.append("<option value='" + datum.id + "'>" + datum.label + "." + datum.metadata.Type + "</option>");
                        });
                    }
                    // show the Documents select
                    $('#salesforceContentDocumentsDiv').show();
                }
            });
        }
        
        function updateSendto(ele) {
            let savePdfToRecordOnly = ele.checked;
            if(savePdfToRecordOnly) {
                $(".sendto-input-field").val("PDF");
                $(".sendto-input-field").prop("disabled",true);
            } else {
                $(".sendto-input-field").val("");
                $(".sendto-input-field").prop("disabled",false);
            }
        }

        function showSimpleDialog() {       
            var sd = window.open('{!$Page.zSend360}', 'mywindow', 'height=100px,width=100px');      
            sd.focus();  
        }
    
        function openModal(element,count){
            var modal = document.getElementById("myModal-"+count);
            modal.style.display = "block";
        }

        function popUpClose(element,count) {
            var modal = document.getElementById("myModal-"+count);
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        /*window.onclick = function(event) {
            var modal = getElementsStartsWithId("myModal");
            //var modal = document.getElementById("myModal");
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }*/

        function getElementsStartsWithId( id ) {
            var children = document.body.getElementsByTagName('*');
            var elements = [], child;
            for (var i = 0, length = children.length; i < length; i++) {
              child = children[i];
              if (child.id.substr(0, id.length) == id)
                elements.push(child);
            }
            return elements[0];
          }
          $( document ).ready(function() {
            $( "#sortable" ).sortable();
            });
    </script>
    <!-- Utility Javascript to add elements, etc. -- END -->

    <!-- Import the Design System style sheet -->
    <apex:slds />

    <!-- REQUIRED SLDS WRAPPER -->

    <div class="slds-scope">

        <form name="sendThem" id="sendThem" enctype="multipart/form-data" method="post" onsubmit="return preventSubmission();">
            <input type="HIDDEN" NAME="UserFax" value="{!$User.Fax}" />
            <input type="HIDDEN" NAME="UserCompanyName" value="User.Company" />
            <input type="HIDDEN" NAME="Notes" id="Notes" value="" />
            <input type="HIDDEN" NAME="kbUser" value="{!$User.Username}" />
            <input type="HIDDEN" NAME="SForg" id="SForg" value="{!$Organization.Id}" />
            <input type="HIDDEN" NAME="SFuser" id="SFuser" value="{!$User.Username}" />
            <input type="HIDDEN" id="kbMail" NAME="kbMail" value="{!$User.Email}" />
            <input type="HIDDEN" name="ContactFax" id="ContactFax" />
            <input type="hidden" name="SFserver" id="SFserver" value="{!$Api.Partner_Server_URL_310}"/>
            <input type="HIDDEN" name="taskID" id="taskID" value="" />
            <input type="HIDDEN" name="SFids" id="SFids" value="{!$CurrentPage.parameters.id}" />
            <input type="HIDDEN" name="SFtype" id="SFtype" value="{!$CurrentPage.parameters.id}" />
            <!--<input type="HIDDEN" name="coverID" id="coverID" value="none" />-->
            <!-- <input type="HIDDEN" name="mergeDocx" id="mergeDocx" value="true" /> -->
            <input type="HIDDEN" id="SFsession" NAME="SFsession" value="{!GETSESSIONID()}" />

            <!-- Accordion UI Begin -->
        <ul class="slds-accordion">
            <!--Destination-->
            <li class="slds-accordion__list-item">
                <section id="section-destination" class="slds-accordion__section slds-is-open slds-size_1-of-1 slds-large-size_3-of-5">
                    <div class="slds-accordion__summary">
                        <h2 class="slds-accordion__summary-heading">
                            <label id="btn-destination">
                                <span class="slds-accordion__summary-content accordian-header">Destination</span>
                                <div class="infoIcon helpDoc" id="sendToPdfQ"></div>
                            </label>
                        </h2>
                    </div>
                    
                    <div class="slds-accordion__content" id="referenceId-24">
                        <div class="slds-grid slds-wrap grid-fix-slds-wrap-vertical-alignment" id="sendto-parent-div">
                            <div class="slds-col slds-size_1-of-1">
                                <span>
                                <div class="slds-form-element slds-col ">
                                        <div class="slds-form-element display-inline-block">
                                            <div class="slds-form-element">
                                                <div class="slds-form-element__control">
                                                    <div class="slds-checkbox">
                                                        <input type="checkbox"  why="ERS220704" id="Save-PDF-on-Record-only" onchange="updateSendto(this);"/>
                                                        <label class="slds-checkbox__label" for="Save-PDF-on-Record-only">
                                                            <span class="slds-checkbox_faux"></span>
                                                            <span class="slds-form-element__label">Save PDF on Record only</span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                       
                                        <!--<div class="slds-form-element display-inline-block" align="right">
                                            <span align="right">
                                                <div id="add-source-btn-container">-->
                                                    <button class="slds-button slds-float_right slds-button_outline-brand all-on-one-line text-right"
                                                            onclick="window.open('../apex/zPaperFields','mergeDocSFDC','location=0,width=900,height=200,resizable=1').focus(); return false;">
                                                        Merge Assistant...
                                                    </button>
                                                <!--</div>
                                            </span>
                                        </div>-->
                                    </div>
                                    <br/>
                                    <div>
                                    <div class="slds-col">
                                    <div class="slds-form-element__control">
                                        <input type="text" id="sendto-input-id-1" placeholder="Fax Number(s) Here"
                                               required="" class="slds-input sendto-input-field" />
                                    </div>
                                   </div>                                     
                                </div>
                                </span>
                            </div>
                        </div>
                    </div>
                </section>
            </li>
            <!--Blue separator Line-->
            <li class="slds-accordion__section slds-is-open slds-size_1-of-1 slds-large-size_3-of-5" >
                <div style="height:3px; background:#236FBD;"></div>
            </li>
            <!--Content Cover sheet-->
            <li>
                <section id="section-coversheet" class="slds-accordion__section slds-is-open slds-size_1-of-1 slds-large-size_3-of-5">
                    <div class="slds-accordion__summary">
                        <h2 class="slds-accordion__summary-heading">
                            <label id="btn-coversheet">
                                <span class="slds-accordion__summary-content accordian-header">Content</span>
                                <div class="infoIcon helpDoc" id="coverBarCodeVal"></div>
                            </label>
                        </h2>
                    </div>
                 <div class="slds-col">
                    <div class="slds-form-element">
                        <div class="slds-form-element__control">
                            <!-- This is only here for advertising. The real value is submitted in a hidden field above. -->
                            <input type="text" name="docTitle" id="doctitle-input-id-1" placeholder="Generated File Name"
                                   title="Contact sales@zpaper.com to send document via fax or email."
                                   value="" class="slds-input doctitle-input-field" />
                        </div>
                    </div>
                    
                </div>
                <br/>
                    <div hidden="" class="slds-accordion__content" id="referenceId-25">
                        <div class="slds-form-element">
                            <!-- Barcode checkbox - Begin -->
                            <input type="hidden" id="coverID" value="" why="ERS220704 #92327" value0="noCode" name="coverID"/>
                            <div class="slds-col slds-size_1-of-1">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        <div class="slds-checkbox">
                                            <input type="checkbox" why="ERS220704" id="checkbox-include-barcode" />
                                            <label class="slds-checkbox__label" for="checkbox-include-barcode">
                                                <span class="slds-checkbox_faux"></span>
                                                <span class="slds-form-element__label">Include barcode on First Page</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Barcode checkbox - END -->
                        </div>
                    </div>
                    
                </section>
            </li>
            <!--Upload file-->
            <li>
                <section id="section-contents" class="slds-accordion__section slds-is-open">
                    <div hidden="" class="slds-accordion__content" id="content-parent-div">
                        <div>
                            <h2 class="slds-accordion__summary-heading slds-var-m-vertical_small">
                                <label id="">
                                    <span class="slds-accordion__summary-content" for="select-02">Upload File</span>
                                    <div class="infoIcon helpDoc" id="fileUpload"></div>
                                </label> 
                            </h2>
                        </div>
                    <ul id="sortable">
                    <li id="browseControlsContainer-11062022">  
                        <div  class="slds-grid slds-wrap slds-var-m-vertical_xxx-small">
                            <div class="slds-col slds-size_12-of-12 slds-large-size_5-of-12">
                                <div class="slds-grid slds-wrap">
                                    <!--Add file button-->
                                    <div class="slds-col slds-size_1-of-12 slds-clearfix">
                                                <div id="myModal-11062022" class="modal">
                                                    <!-- Modal content -->
                                                    <div class="modal-content">
                                                        <span class="close" onclick="popUpClose(this,11062022)">&times;</span>
                                                            <select class="slds-select" id="select-11062022" onchange="showContentSourceLine(this,11062022);">
                                                                <option value="">Please select...</option>
                                                                <option value="harddrive">Hard drive</option>
                                                                <option value="salesforce">Salesforce Library File</option>
                                                                <option value="salesforceFile">Related File</option>
                                                            </select>
                                                    </div>
                                                </div>
                                                <div id="mybtn" class="menu-button plus-nw slds-var-p-vertical_small slds-float_right" onclick="openModal(this,11062022);">
                                                    <div class="bar1"></div>
                                                    <div class="bar2"></div>
                                                </div>
                                    </div>
                                    <!--Hard Drive-->
                                    <div id="content-src-harddrive-11062022" class="templateParentDiv slds-size_10-of-12 element-hidden" >
                                        <div class="slds-grid slds-wrap">
                                            <!--Broswe Button - hard drive-->
                                            <div class="element-hidden">
                                                <div>
                                                    <!--<span class="slds-form-element__label" id="file-selector-primary-label">Hard drive</span> -->
                                                    <div class="slds-form-element__control">
                                                        <div class="slds-file-selector slds-file-selector_files">
                                                            <div class="slds-file-selector__dropzone">
                                                                <input type="file" class="slds-file-selector__input slds-assistive-text zippiTemplateInput zippiTemplateFile"
                                                                    accept="application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                                                    id="harddrive-upload-input-11062022" name="template11062022"
                                                                    aria-labelledby="file-selector-primary-label file-selector-secondary-label"
                                                                    onchange="handleFileChoice(this,11062022);" />
                                                            <!--- Hard Drive button display <label class="slds-file-selector__body element-hidden" for="harddrive-upload-input-11062022"
                                                                    id="file-selector-secondary-label">
                                                                    <span class="slds-file-selector__button slds-button slds-button_neutral">
                                                                        <svg class="slds-button__icon slds-button__icon_left" aria-hidden="true">
                                                                            <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#upload')}"></use>
                                                                        </svg>
                                                                    </span>
                                                                </label> PV221104-->
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!--File name - hard drive-->
                                            <div class="slds-col slds-size_9-of-12">
                                                <div class="slds-form-element  slds-var-p-left_xx-small">
                                                        <div class="slds-form-element__control">
                                                            <!-- label class="slds-form-element__label" for="upload-file-text-input-11062022">
                                                                Selected File</label -->
                                                            <input type="text" id="upload-file-text-input-11062022"
                                                                disabled="true" class="slds-input" />
                                                        </div>
                                                </div>
                                            </div>
                                            <!--Pages - hard drive-->
                                            <div class="slds-col slds-size_2-of-12">
                                                <div class="slds-form-element   slds-var-p-left_xx-small">
                                                    <div class="slds-form-element__control">
                                                    <!--  label class="slds-form-element__label" for="harddrive-pages-text-input-11062022">Pages</label -->
                                                        <input type="text" id="harddrive-pages-text-input-id-11062022" name="startPage11062022"
                                                            placeholder="All" required="" class="slds-input zippiStartPage zippiTemplateFilePages" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <!--Salesforce Library file-->
                                    <div id="content-src-salesforce-11062022" class="templateParentDiv slds-col slds-size_10-of-12  element-hidden">
                                        <div class="slds-grid slds-wrap ">
                                            <!--Browse Button - Salesforce Library file -->
                                            <div class="element-hidden">
                                                    <div class="slds-form-element browse-frm-ele">
                                                        <div class="slds-form-element__control">
                                                            <button class="slds-button slds-button_brand element-hidden" id="salesforce-file-browse-input-11062022"
                                                                    onclick="return exploreSalesforceFiles(this, false);">Browse...</button>
                                                        </div>
                                                    </div>
                                            </div>
                                            <!--File Name - Salesforce Library file -->
                                            <div class="slds-col slds-size_9-of-12">
                                                <div class="slds-form-element   slds-var-p-left_xx-small">
                                                        <div class="slds-form-element__control">
                                                            <!-- label class="slds-form-element__label" for="salesforce-file-text-input-11062022">
                                                                Selected File</label -->
                                                            <input type="text" id="salesforce-file-text-input-11062022" name="templateURL11062022"
                                                            disabled="true" placeholder="" required="" class="slds-input slds-is-disabled zippiTemplateInput zippiTemplateUrl" />
                                                            <!-- button type="button" class="slds-button" id="previewFile-11062022"
                                                                    style="position:absolute;top:-3px;right:10px;"
                                                                    onclick="previewFile(11062022,'salesforce-file-text-input-')"><u>View</u></button -->
                                                        </div>
                                                </div>
                                            </div>
                                            <!--Pages Input - Salesforce Library file -->
                                            <div class="slds-col slds-size_2-of-12">
                                                <div class="slds-form-element   slds-var-p-left_xx-small">
                                                    <!-- label class="slds-form-element__label" for="salesforce-pages-text-input-11062022">
                                                        Pages</label -->
                                                    <div class="slds-form-element__control">
                                                        <input type="text" id="salesforce-pages-text-input-id-11062022" name="startPage11062022"
                                                            placeholder="All" required="" class="slds-input zippiStartPage zippiTemplateUrlPages" />
                                                    </div>
                                                </div>
                                            </div>
                                            <!--View Button - Salesforce Library file -->
                                            <div class="slds-col slds-size_1-of-12">
                                                    <div class="slds-form-element  slds-var-p-left_xx-small" >
                                                        <div class="slds-form-element__control">
                                                            <button type="button" class="slds-button" id="previewFile-11062022" 
                                                                    onclick="previewFile(11062022,'salesforce-file-text-input-')"><u>View</u></button>      
                                                        </div>
                                                    </div>
                                            </div>
                                        </div>
                                    </div>
                                    <!--Related File-->
                                    <div id="content-src-salesforceFile-11062022" class="templateParentDiv slds-col slds-size_10-of-12  element-hidden">
                                        <div class="slds-grid slds-wrap ">
                                            <!--Browse Button - Related file -->
                                            <div class="element-hidden">
                                                <div class="slds-form-element">
                                                    <div class="slds-form-element browse-frm-ele">
                                                        <div class="slds-form-element__control">
                                                            <button class="slds-button slds-button_brand element-hidden"  id="salesforce-associated-file-browse-input-11062022"
                                                                    onclick="return exploreSalesforceFiles(this, true);">Browse...</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!--File Name - Related file -->
                                            <div class="slds-col slds-size_9-of-12">
                                                <div class="slds-form-element   slds-var-p-left_xx-small">
                                                        <div class="slds-form-element__control">
                                                            <!-- label class="slds-form-element__label" for="salesforce-associated-file-text-input-11062022">
                                                                Selected File</label -->
                                                            <input type="text" id="salesforce-associated-file-text-input-11062022"
                                                                name="templateURL11062022" disabled="true"
                                                                placeholder="" required="" class="slds-input slds-is-disabled zippiTemplateInput zippiTemplateUrl" />
                                                        </div>
                                                </div>
                                            </div>
                                            <!--Pages Input - Related file -->
                                            <div class="slds-col slds-size_2-of-12">
                                                <div class="slds-form-element   slds-var-p-left_xx-small">
                                                    <!-- label class="slds-form-element__label" for="salesforce-associated-pages-text-input-11062022">
                                                        Pages</label -->
                                                    <div class="slds-form-element__control">
                                                        <input type="text" id="salesforce-associated-pages-text-input-id-11062022" name="startPage11062022"
                                                            placeholder="All" required="" class="slds-input zippiStartPage zippiTemplateUrlPages" />
                                                    </div>
                                                </div>
                                            </div>
                                            <!--View Button - Related file -->
                                            <div class="slds-col slds-size_1-of-12">
                                                    <div class="slds-form-element  slds-var-p-left_xx-small" >
                                                        <div class="slds-form-element__control">
                                                            <!-- label class="slds-form-element__label" for="salesforce-associated-file-text-input-11062022">
                                                                Selected File</label -->
                                                            <button type="button" class="slds-button" id="previewFile-11062022"
                                                                    onclick="previewFile(11062022, 'salesforce-associated-file-text-input-')"><u>
                                                                        <span class="slds-icon_container slds-icon-utility-preview" title="View">    
                                                                        <!--<svg aria-hidden="true" class="slds-icon">-->
                                                                        <svg class="slds-icon slds-icon-text-default" aria-hidden="true">   
                                                                        <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#preview')}"></use>
                                                                        </svg>
                                                                    <span class="slds-assistive-text">Icon Assistive Text</span>
                                                                </span></u>
                                                            </button>
                                                        </div>
                                                    </div>
                                            </div>
                                        </div>                                  
                                    </div>
                                    <!--Zpaper Templates-->
                                    <div id="content-src-ZT-11062022" class="templateParentDiv slds-col slds-size_4-of-12  element-hidden">
                                        <div class="slds-col slds-size_2-of-12">
                                            <div class="slds-form-element">
                                                <div class="slds-form-element">
                                                    <div class="slds-form-element__control  v-el-2">
                                                        <!-- label class="slds-form-element__label" for="zpaper-template-file-text-input-11062022">
                                                            Selected File</label -->
                                                        <input type="text" id="zpaper-template-file-text-input-11062022"
                                                            name="templateURL11062022"
                                                            placeholder="" required="" class="slds-input slds-is-disabled zippiTemplateInput zippiTemplateUrl" />
                                                        <button type="button" class="slds-button" id="previewFile-11062022"
                                                                style="position:absolute;top:-3px;right:10px;"
                                                                onclick="previewFile(11062022, 'zpaper-template-file-text-input-', true)"><u>View</u></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-col slds-size_2-of-12">
                                            <div class="slds-form-element">
                                                <div class="slds-form-element browse-frm-ele">
                                                    <div class="slds-form-element__control">
                                                        <button class="slds-button slds-button_brand"
                                                                onclick="return exploreZPaperTemplates(this);">Browse...</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-col slds-size_2-of-12">
                                            <div class="slds-form-element pg-frm-ele">
                                                <!-- label class="slds-form-element__label" for="zpaper-templates-pages-text-input-id-11062022">
                                                    Pages</label -->
                                                <div class="slds-form-element__control">
                                                    <input type="text" id="zpaper-templates-pages-text-input-id-11062022" name="startPage11062022"
                                                        placeholder="All" required="" class="slds-input zippiStartPage zippiTemplateUrlPages" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <!--Remove file Button-->
                               
                                    <div id="remove-src-btn-container-11062022" class="slds-col slds-size_1-of-12 element-hidden">
                                        <span>
                                        <div class="slds-form-element slds-clearfix rm-btn">
                                            <button class="slds-button slds-float_right"
                                                    onclick="return removeContentLine(this,11062022);">
                                                    <!--<span class="slds-icon_container slds-icon-standard-account" title="description of icon when needed">-->
                                                        <span class="slds-icon_container slds-icon-utility-clear" title="Delete">    
                                                            <!--<svg aria-hidden="true" class="slds-icon">-->
                                                            <svg class="slds-icon slds-icon-text-default" aria-hidden="true">   
                                                            <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#clear')}"></use>
                                                            </svg>
                                                        <span class="slds-assistive-text">Icon Assistive Text</span>
                                                    </span></button>   
                                        </div>
                                        </span>
                                    
                                    </div>
                               
                                    </div>
                            </div>
                        </div>
                    </li>
                </ul>
                    </div>
                
                </section>
            </li>

        </ul>
        <!-- Accordion UI -- END -->

            <div class="slds-form-element">
                <div  style="display: none">
                <!--Agents <input type="radio" name="amode" checked="legacy" why="ERS220704 #92327" value="legacy" title="legacy agents"/> legacy or <input type="radio" name="amode" why="ERS220704 #92327" value="federated" title="federated agents"/> federated, -->
                <!--ERS220614 #92050 --> <input type="radio" name="zmode" value="proxy" checked="checked"/> proxy
                                       <input type="radio" name="zmode" value="Native"/> native
                <!--ERS220723 #92771 --> <input type="radio" name="zmode" value="classic"/> classic
                </div>
                <button id="zPaperSendBtn" type="button" class="slds-button slds-button_brand send-btn" onclick="press('send',this.form)">Send</button>
                <span id="zPaperSendPleaseWait" style="color:rgba(1, 118, 211, 1);display:none;">Sending document. Please wait...</span>
         </div>
        </form>

        <div id="salesforceContentDlg" style="display:none;" title="Select File">
            <div id="sfAttachContent" style="overflow:hidden;">
                <div id="salesforceContentDlgDocumentDiv" style="width:100%;display:none;">
                    <div id="salesforceContentBreadcrumbDiv">
                        Files
                    </div>
                    <div id="salesforceContentFolderContentsDiv"
                         style="border-top:2px solid #54698d;padding-top:6px;margin-top:4px;">
                        <table id="salesforceLibraryFileTable" style="width:98%;">
                        </table>
                    </div>
                </div>
                <div id="salesforceContentDlgAssociatedFileDiv" style="width:100%;display:none;">
                    <div id="salesforceAssociatedFileContentsDiv"
                         style="margin-top:4px;">
                        <table id="salesforceAssociatedFileTable" style="width:98%;">
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- CRN220423 zPaper Templates dialog content -->
        <div id="zPaperFileDlg" style="display:none;" title="Select File">
            <div id="zpFileContent" style="overflow:hidden;">
                <div id="zPaperFileDiv" style="width:100%;">
                    <div id="zPaperFileContentsDiv"
                         style="margin-top:4px;">
                        <table id="zPaperFileTable" style="width:98%;">
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <script>
        
            function toggleMenu(menuButton) {
                menuButton.classList.toggle("change");
            }
            
            let curPageHost = "{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}";
            function getSalesforceObjectData(successFunction, errorFunction) {
                let url = curPageHost  + "/services/data/v52.0/sobjects/";
                $.ajax({
                    url: url,
                    dataType: "json",
                    headers: {
                        "Access-Control-Allow-Origin": "*",
                        "Accept": "application/json",
                        "Authorization": "Bearer {!GETSESSIONID()}"
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // alert("Error retrieving Folders: " + errorThrown + ", textStatus = " + textStatus+" from " + zUrl);
                        if (errorFunction) {
                            errorFunction(jqXHR, textStatus, errorThrown);
                        }
                    },
                    success: function (data, textStatus, jqXHR) {
                        console.log(data);
                        if (successFunction) {
                            successFunction(data, textStatus, jqXHR);
                        }
                    }
                });
            }
            function getSObjectType(id, callback) {
                try {
                    getSalesforceObjectData(
                        function (data, textStatus, jqXHR) {
                            let prefix = id.substring(0, 3);
                            let sObjectType = "unknown";
                            for (const sobject of data.sobjects) {
                                if (sobject.keyPrefix === prefix) {
                                    sObjectType = sobject.name;
                                    break;
                                }
                            }
                            callback(sObjectType);
                        },
                        function (jqXHR, textStatus, errorThrown) {
                            alert("Error retrieving SObject type: " + errorThrown);
                            callback(null);
                        }
                    );
                } catch (e) {
                    alert("Error retrieving SObject type: " + errorThrown);
                    callback(null);
                }
            }

            let sfId = "{!$CurrentPage.parameters.id}";
            let sfOrg = "{!$Organization.Id}";
            let destinations = "Case.Account.Fax|Case.Contact.Email"; //ERS210907 TODO need a REST API call to look these up?
        
            var hasGoodFile=false; //ERS210728
            function goodFile(fn) {
                if (fn.toLowerCase().indexOf(".png") > -1 || fn.toLowerCase().indexOf(".jpg") > -1) {
                    alert("Only DOCX, PDF, and zPaper HTM files.");
                    return false;
                } //ERS210210 #81253 TODO better test
                var dt=document.getElementById("doctitle-input-id-1");
                var t=fn.substring(2+fn.lastIndexOf("/")+fn.lastIndexOf("\\"))
                if (dt && (!dt.value || dt.value=="zMergeToPDF" || dt.value=="zDocumentTitle")) dt.value=t; //ERS210709 #83973 //ERS210927 zDoc value
                hasGoodFile=true;
                return true;
            }

            function preventSubmission() {
                return false;
            }
            function press(btn, form) {
                // debugger;
                //CRN210825 Set the coversheet barcode value correctly
                let coverID = $('#checkbox-include-barcode').is(':checked') ? 'none' : 'noCode';
                $('#coverID').val(coverID);
                console.log("Barcode (coverID) value => " + coverID);

                if (!hasGoodFile) { alert("Select at least one document."); return false;} //ERS210728
                if (!form) { form = $("#sendThem").get(0); }
                if (btn === "send") {
                    $('#zPaperSendBtn').toggle();
                    $('#zPaperSendPleaseWait').toggle();
                    getSObjectType(sfId,
                        function(sfType) {
                            if (!sfType) {
                                $('#zPaperSendBtn').toggle();
                                $('#zPaperSendPleaseWait').toggle();
                                return;                // we must have the sfType for the backend
                            }
                            $("#SFtype").val(sfType);
                            $("#SFids").val(sfId);
                            $("#SForg").val(sfOrg);
                            // Build up the list of recipients
                            let sendToBuffer = "";
                            $(".sendto-input-field").each(function(idx) {
                                let value = this.value;
                                //CRN210712 Don't default recipient to PDF since PDF doesn't really work when sending
                                // via zippi (zippi always returns a new Snippet Id and I don't know what we're supposed
                                // to do with that. I guess we can then do a view but the UI doesn't really support it).
                                // For now, the user can send the document to their own email if they want to view the
                                // resulting document.
                                // if (!value && sendToBuffer.toLowerCase().indexOf("pdf") < 0) { value = "PDF"; }
                                if (value && sendToBuffer.indexOf(value) < 0) {     // no duplicate recipients
                                    if (sendToBuffer.length > 0) { sendToBuffer += ','; }
                                    sendToBuffer += value;
                                }
                            });
                            if (!sendToBuffer) {
                                alert("Please enter a recipient.");
                                $('#zPaperSendBtn').toggle();
                                $('#zPaperSendPleaseWait').toggle();
                                return;
                            }
                            $("#ContactFax").val(sendToBuffer);
                            // Make sure we don't send hidden entry elements.                            
                            $('.zippiTemplateFile').each(function() {
                                let $this = $(this);
                                if (0 === this.files.length) {
                                    $this.prop('disabled', true);
                                    let count = this.id.substring(this.id.lastIndexOf('-') + 1);
                                    $('#harddrive-pages-text-input-id-' + count).prop('disabled', true);
                                }else{
                                    $this.prop('disabled', false);
                                    let count = this.id.substring(this.id.lastIndexOf('-') + 1);
                                    $('#harddrive-pages-text-input-id-' + count).prop('disabled', false);                                  
                                }
                            });
                            $('.zippiTemplateUrl').each(function() {
                                let $this = $(this);
                                if (0 === $this.val().length) {
                                    $this.prop('disabled', true);
                                    let count = this.id.substring(this.id.lastIndexOf('-') + 1);
                                    $('#salesforce-pages-text-input-id-' + count).prop('disabled', true);
                                }else{
                                    $this.prop('disabled', false);
                                    let count = this.id.substring(this.id.lastIndexOf('-') + 1);
                                    $('#salesforce-pages-text-input-id-' + count).prop('disabled', false);           
                                }
                            });
                            // Fixup the timestamps in the input names that will be submitted.
                            //ERS221117 This fixes the order and the field names so that the API still valid. Nice!!
                            let inputCount = 0;
                            $('.zippiTemplateInput').each(function() {
                                let $this = $(this);
                                if (!$this.prop('disabled')) {
                                    // Navigate to the corresponding startPage element by backing up to the correct ancestor and then
                                    // finding the element from that ancestor.
                                    let $parent = $this.closest('.templateParentDiv');
                                    let $startPageEle = $parent.find('.zippiStartPage');
                                    inputCount++;
                                    $startPageEle.attr('name', 'startPage' + inputCount);
                                    let eleName = $this.attr('name');
                                    if (eleName.startsWith('templateURL')) {
                                        if ($this.val() != "") {
                                            $this.attr('name', 'templateURL' + inputCount);
                                        } else {
                                            $this.attr('name', 'unusedURL' + inputCount);
                                        }
                                    } else {
                                        if ($this.val() != "") {
                                            $this.attr('name', 'template' + inputCount);
                                        } else {
                                            $this.attr('name', 'unused' + inputCount);
                                        }
                                    }
                                }
                            })                            

                            // submit the form
//                            let postUrl = form.action || "https://gw.zpaper.com/zippi/jobs"; //SHR210723 use the form action, fallback to gw
                            let postUrl = zHost+"/zippi/jobs/"; //CRN210921 form action is pointing to this VF Page, just use gw //ERS220614 zHost
                            //ERS210824 HACK postUrl="https://gw.zpaper.com/kb/jsp/SF_sendFax.jsp";
                            var zm=$("input[name=zmode]:checked").val();
                            if (zm == "classic") { postUrl="https://gw.zpaper.com/kb/jsp/SF_sendFax.jsp"; } //ERS220723 #92771
                            if (zm == "classic") { //ERS220825 CORS on SF_sendFax.jsp is failing preflight
                                form.target="_blank";
                                form.action=postUrl+"?SForg="+sfOrg+"&";
                                $('#zPaperSendBtn').toggle();
                                $('#zPaperSendPleaseWait').toggle();
                                form.submit();
                                return;
                            }
                            
                            debugger;
                            postToZippi(postUrl, form,
                                function(data, textStatus, jqXHR) {
                                    $('#zPaperSendBtn').toggle();
                                    $('#zPaperSendPleaseWait').toggle();
                                    console.log(jqXHR);
                                    console.log('Response =>', data);

                                    $('.zippiTemplateUrl').prop('disabled', false);
                                    $('.zippiTemplateFile').prop('disabled', false);

                                    if (Array.isArray(data)) { //ERS220906 #93262 CRN destinations as multiple
                                       if (data.length > 1) { alert(data.length +" items being generated."); }
                                       data=data[0];
                                    }
                                    let viewPdfUrl = data.metadata && data.metadata.X_reviewPDF;
                                    if (!data.url) { data.url=""; alert("Current zippi?  Current myfileforce? No url in "+data); } //ERS210908 #85832
                                    if (!viewPdfUrl && data.url.indexOf("/069") == -1) {
                                        if (data.url.indexOf("allfiles/")>-1 || confirm("Are we UseTheSFID12345 or is it okay to use "+data.url)) { //ERS220723 #92344
                                            //viewPdfUrl=zHost+"/kb/client/index.html?f="+data.url;
                                            alert("Refresh the docSet component and then click to view the new document."); //TODO send the event
                                            return;
                                        } else {
                                            alert("Request was submitted, but no file was generated!\nPlease contact zPaper support.");
                                            return;
                                        }
                                    } else { //ERS210823
                                        var u=data.url; //../allfiles/0693123123232-123213123123213/
                                        u=u.substring(u.indexOf("/069")+1);
                                        u=u.substring(0,u.indexOf("-"));
                                        viewPdfUrl="/"+u;
                                        //alert(viewPdfUrl+" from "+data.url);
                                    }
                                    if (1==1 || confirm("Successfully submitted request.\nView the generated document?")) {
                                        console.log("Opening "+viewPdfUrl);
                                        let w = window.open(viewPdfUrl, '_blank', 'width=760, height=900');
                                        w.focus();
                                    }
                                },
                                function(jqXHR, textStatus, errorThrown) {
                                    $('#zPaperSendBtn').toggle();
                                    $('#zPaperSendPleaseWait').toggle();
                                    $('.zippiTemplateUrl').prop('disabled', false);
                                    $('.zippiTemplateFile').prop('disabled', false);
                                    alert("Error submitting to zippi: " + (errorThrown ? errorThrown : "Unknown error."));
                                }
                            );
                        }
                    );
                }
                return false; //don't do the normal submit
            }
        
            //SHR210722 apply help icons to this component
            sldsHelpIcons("zSendVfp", this.template);
            
       //ERS220414 adding back Templates
        //var sfId="{sfId}";
      
        function getType(id) { //ERS210210 TODO CRN to find proper way
            if (!id) id=sfId;
            var t="";
            if (!t && id.indexOf("500")==0) t="Case";
            else if (!t && id.indexOf("001")==0) t="Account";
            else if (!t && id.indexOf("003")==0) t="Contact";
            else { t=""; console.log("ERS210210 could not find sfType from "+id); }
            return t;
        }
      
      //var zHost="https://gw.zpaper.com/kb/jsp/";
      //var sfOrg="{!$Organization.Id}";
      var sfType="{!$ObjectType.name}"; //TODO figure it out
      
      var sfSession="{!GETSESSIONID()}";
      var aURL=document.location.href;
      var i=aURL.indexOf("&id="); //ERS180205 #45252 Spring18 update changed the URL
      var j=aURL.indexOf("&",i+1); if (j==-1) j=1000;
      if (i != -1 && j != -1) sfId=aURL.substring(i+3+1,j); //ERS180205 the +1 for the & //ERS210210 TODO get the sfType
        //alert("sfId="+sfId);
      if (!sfType) sfType=getType(sfId);
        var zHost="https://Setup.ZPAPER__zpaper__c.ZPAPER__server__c"; //ERS220614 TODO check /kb/jsp/ //ERS220723 Transport too
        //ERS220614 #92050 use the z360 setting
        zHost="https://gw.zpaper.com"; //ERS220723 "/kb/jsp/"; //ERS210512 ZPAPER6 and ZPAPER //ERS220723
      
          function inFilter(form) { return true; }
        
          function addRow(ele,t) {
            var tele=$("#"+t+"TABLE");
            if (t=="cover") {
                tele=document.getElementById("coverTR");
                if (tele) {
                    s=""; if (tele.style.display != "none") { s="none";}
                    tele.style.display=s;
                }
                return false;
            }
            var rows=tele.find("TR").length-1; //-1 for the hidden lastTR
            var rows0=rows;
              //alert("rows="+rows+" of "+tele.find("TR"));
            rows++;
            if(rows>9) {alert("That's the limit!"); return false;}
            var tr1=document.getElementById(t+"TR1");
            if (tr1) {
                var rowHtml=tr1.innerHTML.replace(/1([,"')])/g,rows+"$1");
                $('#'+t+'LastTR').before("<tr>"+rowHtml+"</tr>");
            }
            return true;
          }
              
          function setTemplateURL(r,sel) { //ERS210210
            var hi=document.getElementById("templateURL"+r);
            if (hi) hi.value=sel.options[sel.selectedIndex].value; else alert("Failed template "+r);
          }
        
      function zFormsCRN220614() {
        $.ajax({
            url: zHost+"/kb/jsp/SF_formList.jsp?formType=&formType0=_Form&limit=80&rtnFormat=jsonp&SFuser={!$User.Username}&SForg={!$Organization.Id}",
          dataType: "jsonp",
          error: function (jqXHR, textStatus, errorThrown) {
            alert("Error retrieving forms: " + errorThrown + ", textStatus = " + textStatus+" from "+url);
          },
          success: function (data, textStatus, jqXHR) {
            var aUL = $('#checkbox-include-barcode').is(':checked') ? 'none' : 'noCode';
            var buffer = "";
            var none="previewAndFaxUL,captureFormUL,coversheetUL,dataFormUL,coverID"; //ERS140308 //ERS160923 dataFormUL
            console.log(data.forms.length+" forms");
            //alert("Replace with zippi items "+ data.forms.length);
            for (var i in data.forms) {
              var form = data.forms[i];
              var item00 = ""; //ERS140324 IE needs var
              var hint=""; if (form.type == "Coversheet") { hint+="CS"; } 
              if (form.URL.toLowerCase().indexOf(".docx") >-1) { hint+=" DOCX"; }
              if (hint != "") {hint=" ("+hint+")"; }
              if (form.type == "Coversheet" || form.type == "Form") {
                  //aUL = document.getElementById("select-01"); //ERS220414 coverID1 //coversheetUL was coverID
                  aUL = $('#checkbox-include-barcode').is(':checked') ? 'none' : 'noCode';
                  if (form.prepopType == sfType || form.prepopType.indexOf("$sfType")>-1) { //TODO filter on sfType
                      item00 = "<option value='"+form.id+":"+form.BATES+"'>"+form.name.replace(".pdf", "").replace(".htm", "") + hint + "</option>";
                  }
              }
              if (1==1 || inFilter(form)) { //ERS160423 simple way to show only some forms based on form.BATES
                if (aUL && item00 != "") {
                  aUL.innerHTML += item00;
                }
              }
            }
            var ids=none.split(",");
            for (var i in ids) { //ERS140308
              aUL=document.getElementById(ids[i]);
              if (aUL) { aUL.innerHTML += "<li>None found.</li>"; }
            }
          }
        });
      }
      //ERS180216 if (confirm("call zForms() with on "+zHost))
      //ERS220704 zForms();
      //ERS220704 console.log("zForms loaded");
      
   function enableSourceControls(sel, idx) {
            // alert("Selected value = " + $(sel).val());
            if (!idx)   idx = "0";
            var selVal = $(sel).val();
            if ("harddrive" == selVal) {
                $("#webBrowseControls" + idx).hide();
                $('#startPageWeb' + idx)[0].disabled = true;
                $("#fileBrowseControls" + idx).show();
                $('#startPageFile' + idx)[0].disabled = false;
                $("#coverID" + idx).hide(); //ERS220414 TOOD select for each possible template row
                $("#preview" + idx).hide();
                $("#previewFile" + idx).hide(); //ERS210215 could not find a smooth way with only 1 button
            } else if ("ZT" == selVal) {
                $("#coverID" + idx).show(); //ERS220414 TOOD select for each possible template row
                //manual control for notes and checkboxes //$("#coverDIV").show();
                $("#webBrowseControls" + idx).hide();
                $('#startPageWeb' + idx)[0].disabled = true;
                $("#fileBrowseControls" + idx).hide();
                $('#startPageFile' + idx)[0].disabled = true;
                $("#preview" + idx).show();
                $("#previewFile" + idx).hide();
            } else {
                $("#coverID" + idx).hide(); //ERS220414 TOOD select for each possible template row
                $("#webBrowseControls" + idx).show();
                $('#startPageWeb' + idx)[0].disabled = false;
                $("#fileBrowseControls" + idx).hide();
                $('#startPageFile' + idx)[0].disabled = true;
                $("#preview" + idx).hide();
                $("#previewFile" + idx).show()
                $('#webBrowseBtn'+idx).off();   // clear the old click handler
                if ("GDR" == selVal) {
                    $('#webBrowseBtn' + idx).on("click", function() {
                        exploreDriveFiles('templateURL' + idx);
                    });
                }
                else {
                    $('#webBrowseBtn' + idx).on("click", function() {
                        exploreFiles('attachSource'+idx,'templateURL' + idx,''); //ERS210210 added idx to Source
                    });
                }
            }
        }
        </script>

    </div>
    </html>
</apex:page>