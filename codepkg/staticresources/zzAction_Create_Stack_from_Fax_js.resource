<!--
// Name: Create Stack from Fax
// Committer: andrew@zpaper.com
// Update: removing drug type
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-11-06 19:47:29","active":true,"button":"","name":"Create Stack from Fax","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_field0\")","value":"","operation":"equals"}]},"consequence":{"doit":""},"ordinal":18}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
/* BEGIN Create Stack from Fax */
var createCase = false; //AN20180712 flag to track if we want to create a Case or not
var stackNumber;// = ""; //AN20190305 moving declaration to top of rule
var attachLabel = "";
var zType = doc.X("X_docType");
var formatNow = getCurDateAndTime(doc);
var channel = "Fax";
var zpArrOfPairs = []; //AN20180713 declaring a separate array for use in setting zPaper doc security
var zp = "ZPAPER__"; //ERS170626 now in the package
var zStack = zp + "zStack__c";
var arrOfPairs = [];

var fromFile = X(doc, "X_fromFile");
//CRN190308 Handle uploaded files via Lightning Component
if (fromFile && fromFile.indexOf("lightningUpload") >= 0) {
    fromFile = fromFile.substring(fromFile.lastIndexOf('/') + 1);
    var parts = fromFile.split("-");
    if (parts.length >= 3) {
        var attachToId = parts[2];
        alert("@@@ UPLOAD: ATTACHING TO SALESFORCE RECORD = " + attachToId);
        var label = "File uploaded by " + parts[0];
        attach(doc, label, attachToId, true);
        var arrOfPairsLocal = [];
        arrOfPairsLocal.push("db-label", label);
        updateDB(doc, arrOfPairsLocal);
        return;
    }
}

//ERS170328 docType by OCR
zData.docTypeOCR = zData.docTyper(doc, {
    "PAPP": "Patient~ Assistance~",
    "PAUTH": "Prior~ Authorization~",
    "ENRL": "Enrollment~",
    "FAX": ""
});

alert("docType was " + doc.docType + " now " + zData.docTypeOCR);
if (doc.docType != zData.docTypeOCR) {
    var arrOfPairs0 = [];
    arrOfPairs0.push("X_docTypeOCR", zData.docTypeOCR);
    arrOfPairs0.push("X_docType", zData.docTypeOCR);
    zType = zData.docTypeOCR; //ERS170330 saved below into SF faxType__c field
    updateDB(doc, arrOfPairs0);
}

if (isNaN(doc.deliveredFrom)) { // Not a Number is true
    channel = "Email";
}

//AN20180711 this ZP businss can probably be removed and replaced with the correct namespace
zpArrOfPairs.push(zp + "faxType__c", zType);
zpArrOfPairs.push(zp + "Priority__c", "Medium");
zpArrOfPairs.push(zp + "Status__c", "New Stack");
zpArrOfPairs.push(zp + "Channel__c", channel);

// MSH171116 using zStack_Received__c instead of latestFax__c because latestFax__c gets updated by save.jsp every time the record is updated
zpArrOfPairs.push("zStack_Received__c", formatNow);
zpArrOfPairs.push(zp + "receivedId__c", doc.dbID);
zpArrOfPairs.push(zp + "newFax__c", "true");
zpArrOfPairs.push(zp + "Pages__c", X(doc, "X_pages"));
zpArrOfPairs.push(zp + "Program_Name__c", zData.classification);
zpArrOfPairs.push(zp + "sentFaxTo__c", doc.deliveredTo); //ERS170628 caller id
zpArrOfPairs.push(zp + "From__c", doc.deliveredFrom);
zpArrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //MSH170817 added
zpArrOfPairs.push(zp + "Stage__c", "Received"); //ERS170731 #40593

alert("@@@ Classification = " + zData.classification);

//AN20180712 for code review: we have multiple IF iterations involving zData.classifcation. Can we combine them?
if (zData.classification == "PAP") { //AN20180604 set PAP queue and record type
    alert("@@@ entering PAP logic");
    zpArrOfPairs.push("ZPAPER__Classification__c", "PAP"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types
    if (zData.papQueueId) zpArrOfPairs.push("OwnerId", zData.papQueueId); //ERS190911 check value
    zpArrOfPairs.push("RecordTypeId", zData.papStackRecordTypeId);
    zpArrOfPairs.push("Drug_Type__c", "Humira");
    arrOfPairs.push("db-users", ":" + zData.papGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.papGroupId + ":");
    attachLabel = "New Stack received on " + formatNow;
    createCase = false;
} else if (zData.classification == "RH-Immunology") {//AN20180604 set RH-Immunology queue and record type
    alert("@@@ entering RH-Immunology logic");
    zpArrOfPairs.push("ZPAPER__Classification__c", "RH-Immunology"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types
    if (zData.valetQueueId) zpArrOfPairs.push("OwnerId", zData.valetQueueId); //ERS190911 check value
    zpArrOfPairs.push("RecordTypeId", zData.valetStackRecordTypeId);
    zpArrOfPairs.push("Drug_Type__c", "Humira");
    arrOfPairs.push("db-users", ":" + zData.valetGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.valetGroupId + ":");
    attachLabel = "New Stack received on " + formatNow;
    createCase = true;
} else if (zData.classification == "ARCC") {//AN20180604 set ARCC queue and Immunology record type
    alert("@@@ entering ARCC logic");
    zpArrOfPairs.push("ZPAPER__Classification__c", "RH-Immunology"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types
    zpArrOfPairs.push("OwnerId", zData.ARCCQueueId);
    zpArrOfPairs.push("RecordTypeId", zData.valetStackRecordTypeId);
    zpArrOfPairs.push("Drug_Type__c", "Humira");
    arrOfPairs.push("db-users", ":" + zData.valetGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.valetGroupId + ":");
    attachLabel = "New Stack received on " + formatNow;
    createCase = true;
} else if (zData.classification == "Complete Immunology") {//AN20180604 set Complete Immunology queue and Complete Intake record type
    alert("@@@ entering Complete Immunology logic");
    alert("@@@ zData.compImmStackRecordTypeId = " + zData.compImmStackRecordTypeId);
    zpArrOfPairs.push("ZPAPER__Classification__c", "Complete Intake"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types
    if (zData.compImmQueueId) zpArrOfPairs.push("OwnerId", zData.compImmQueueId); //ERS190911
    zpArrOfPairs.push("RecordTypeId", zData.pharmStackRecordTypeId); //AN20190327 first created stack should be for the Pharmacist
    //zpArrOfPairs.push("Drug_Type__c", "Skyrizi"); //AN20191106 we now have multiple Complete Intake programs, so Drug Type will be entered by the user
    arrOfPairs.push("db-users", ":" + zData.pharmGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.pharmGroupId + ":");
    attachLabel = "New Stack received on " + formatNow;
    createCase = true;
}

var sfId = createAndAttach(doc, zStack, attachLabel, zpArrOfPairs);
var originalStackId = sfId;
stackNumber = getSFField(doc, zStack, "Name", null, sfId);
alert("#### Stack Received. Attached to: " + sfId);

arrOfPairs.push("db-label", attachLabel);
arrOfPairs.push("db-BATES", sfId + "-STACK");
arrOfPairs.push("X_sfStackId", sfId); //ERS170727 #40447
arrOfPairs.push("X_Stack_Number", stackNumber);

//assign doc security. Variables are based on the inbound fax line
alert("@@@ master ID is = " + doc.kbData.groupID);
alert("@@@ PAP group ID is = " + zData.papGroupId);
alert("@@@ RH-Immunology group ID is = " + zData.valetGroupId);
alert("@@@ Complete Immunology group ID is = " + zData.compIntGroupId);
alert("zData.classification is " + zData.classification);

//CRN180726 Case #50469 -- Set the "Received" checkbox
var now0 = getCurDateAndTime(doc, false, true);
alert("$$$ now0 = " + now0);
arrOfPairs.push("X_reviewedStatus", "Received");
arrOfPairs.push("X_reviews", "Received by agent at " + now0 + "<br/>"); //ERS170909 #40592/CAW Update
updateDB(doc, arrOfPairs);

alert("@@@ zData.classification123 :" + zData.classification);

//CRN190226 Create copy of original stack - we use zpArrOfPairs as it already contains most of the data that we need
//AN 20190228 only should do this for the Complete Immunology program
if (zData.classification == "Complete Immunology") {
    alert("@@@ creating copy of zStack for Complete Immunology program");

    var org2orgCS = doc.kbData.customSettings; //ERS190411 #57881
    alert("ERS190411 CS a " + (typeof org2orgCS) + " has " + org2orgCS);
    if (org2orgCS) {
        zData.watermark = "" + XCustomSetting(doc, "watermark__c");
        alert("ERS190411 wm=" + zData.watermark + " ZPAPER__server__c=" + XCustomSetting(doc, "ZPAPER__server__c"));
        if (!zData.watermark || zData.watermark == "undefined") {
            zData.watermark = "";
        }
    }

    arrOfPairs = [];
    var pageCount = X(doc, "X_pages");
    var pageRange = "1-" + pageCount;
    alert("@@@ pageRange === " + pageRange);
    // pv022518 markup on non pharmacist pages.
    var watermark = "'addText',10,1,875,1480,'COPY','24px''"; //ERS190411 #57881.
    if (zData.watermark && zData.watermark != "") { //ERS190411 get from the custom setting
        watermark = zData.watermark;
    }

    var buffer = "";
    for (var i = 1; i <= pageCount; i++) {
        var curTime = new Date().getTime();
        //AN20190311 place the word COPY on each page of the copy document
        buffer += "kbm('IMG" + curTime + "','PAGE" + i + "IMG" + curTime + "'," + watermark + ");";
    }
    alert("@@@@ original dbID = " + doc.dbID);
    alert("@@@@ MARKUP = " + buffer);
    alert("@@@@ Original Stack Id: " + originalStackId);
    arrOfPairs.push("X_markup", buffer);

    //ERS 190411 instead of split then watermark, watermark send to flatten, and remove watermark from original
    //ERS190411 #57881 flatten with SF_sendFax.jsp and use that new dbID
    updateDB(doc, arrOfPairs);
    var flatURL = "http://localhost:8080/kb/jsp/SF_sendFax.jsp?faxTo=PDF@" + sfId + "&SFids=" + sfId + "&mode=filePDF";
    alert("ERS190411 URL=" + flatURL);
    var sfOrgID = doc.kbData.sfOrganizationID; //TODO CRN there is a SFSession here instead
    if (!sfOrgID || sfOrgID.length > 18) { //ERS190911 #63071 >18
        sfOrgID = doc.kbData.sfSessionID.substring(0, doc.kbData.sfSessionID.indexOf("!")); //ERS190911 #63071
    }
    flatURL += "&SForg=" + sfOrgID + "&SFsession=" + doc.kbData.sfSessionID;
    flatURL += "&SFserver="+ doc.kbData.sfServer; //ERS190911 #63071
    flatURL += "&coverID2=noBarcode&coverID=" + doc.dbID; //newSnippetId for barcode if we want we can remove(coverID2=noBarcode)
    flatURL += "&SFtype=ZPAPER__zStack__c";  //ERS190411 TODO better missing parameters
    alert("ERS190411 flatten with " + flatURL);
    var flatData;
    var flatId="";
    var zHeaders=["authorization","ZPAPER WGET"]; //ERS190911 TODO by Steve a nice meal out - case REALLY matters
    for (var x = 0; x < 2; x++) { //ERS190911 TODO 2 DONE
        try {
            flatData = ""+wget(doc, flatURL, [], zHeaders); //SF_sendFax.jsp is returning a zippi id //no , null, null
        } catch (e) {
            alert("#58504 wget failed with "+flatURL+" exception:"+e); //ERS190910
        }	
        
        if (flatData && flatData.length > 0) {
            flatId = X(doc, "zippi", flatData);
        }
        alert("ERS190411 x="+x+" flattened to " + flatId + " len=" + flatId.length); //+ " from "+flatData);
        alert("ERS190412,0911B a " + (typeof flatId)+" from zippi in "+ X(doc, "zippi", flatData) +" wget returned "+flatData.length+" with "+zHeaders); //ERS190911
        if (flatId.indexOf("{") == 0) {
            var flatItem = JSON.parse(flatId);
            flatId = flatItem['Item'];
        }
        alert("ERS190911 #63071 flatId="+flatId);
        if (flatId) {break;} //ERS190911
    }

    arrOfPairs = [];
    arrOfPairs.push("X_markup", "");
    updateDB(doc, arrOfPairs);
    alert("225");

    if (!flatId || (flatId+"").length < 15) {
        alert("ERS190910 #58504 still no flatId!!  Case created from email.");
        return;
    } else {
    var copyLabel = "Copy of " + doc.label; //TODO update the flatten doc label
    alert("231: setting document context to dbID: " + flatId);
    setDocumentContext(doc, flatId); //ERS190412 WARN WARN WARN doc is the COPY doc
    alert("233");
    arrOfPairs = [];
    arrOfPairs.push("db-label", copyLabel);
    updateDB(doc, arrOfPairs);
    alert("237");
    }
    
    alert("@@@@ after splitting Snippet, dbID = " + doc.dbID);
    var copySfId = createAndAttach(doc, zStack, "Copy of New Stack received on " + formatNow, zpArrOfPairs);
    alert("Stack Id for copy stack = " + copySfId);

    var copyStackNumber = getSFField(doc, zStack, "Name", null, copySfId);  //CRN190321 Make sure that the copy is indexed correctly
    alert("@@@ copyStackNumber = " + copyStackNumber);
    //CRN190226 Fix the receivedId__c field (was set with original id)
    arrOfPairs = [];

    arrOfPairs.push("RecordTypeId", zData.compImmStackRecordTypeId); //AN20190306 tech debt. I attempted to set this record type when creating the Stack but it that didn't work as expected. Changing the record type after record creation works but is clunky and tech-debty and kludgey
    arrOfPairs.push(zp + "receivedId__c", doc.dbID);
    updateSFRecord(doc, zStack, copySfId, arrOfPairs);
    //CRN190226 also fix the X_sfStackId field
    arrOfPairs = [];
    arrOfPairs.push("X_sfStackId", copySfId);
    arrOfPairs.push("X_attachedTo", copySfId); //ERS190412 #57881
    arrOfPairs.push("X_Stack_Number", copyStackNumber);

    //AN20190327 set the doc security for Complete Intake group
    alert("@@@ setting document security for Complete Intake" + zData.pharmGroupId);
    arrOfPairs.push("db-users", ":" + zData.compIntGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.compIntGroupId + ":");

    updateDB(doc, arrOfPairs);
    //CRN190226 Make sure it is also in the correct incoming folder
    var incomingFolder = doc.kbData.groupID.substring(1) + "In";
    alert("### incomingFolder = " + incomingFolder);
    moveDocument(doc, null, incomingFolder);

    //update the original zStack and make it a child of the copy that we just created
    arrOfPairs = [];
    arrOfPairs.push("ZPAPER__Parent__c", originalStackId);// PV190416 updated for Pharmacy Services Stack should update on Intake Stack
    //arrOfPairs.push("ZPAPER_Orginal_Stack_lookup__c", sfId);
    updateSFRecord(doc, zStack, copySfId, arrOfPairs);
}

alert("@@@ create case123" + createCase);
if (createCase === true) { // PV190321 create a Case if this is not a PAP document
    alert("@@@ entering createCase logic");
    arrOfPairs = [];
    arrOfPairs.push("Status", "New");
    arrOfPairs.push("Origin", "Fax / HCP");
    arrOfPairs.push("Priority", "Standard");
    //AN20080717 link to parent zStack
    if (copySfId) {
        arrOfPairs.push("zStack__c", copySfId);
    } else {
        arrOfPairs.push("zStack__c", sfId); //AN20080717 link to parent zStack
    }

    if (zData.classification == "RH-Immunology") {
        arrOfPairs.push("OwnerId", zData.valetQueueId);
        arrOfPairs.push("RecordTypeId", zData.valetCaseRecordTypeId);
        arrOfPairs.push("PS_CaseSubType__c", "BV Full");
        arrOfPairs.push("PS_ReasonCode__c", "None");
        arrOfPairs.push("PS_Classification__c", "RH-Immunology");
    } else if (zData.classification == "ARCC") {
        arrOfPairs.push("RecordTypeId", zData.valetCaseRecordTypeId);
        arrOfPairs.push("OwnerId", zData.ARCCQueueId);
        arrOfPairs.push("PS_CaseSubType__c", "BV Full");
        arrOfPairs.push("PS_ReasonCode__c", "None");
        arrOfPairs.push("PS_Classification__c", "RH-Immunology");
    } else if (zData.classification == "Complete Immunology") {
        arrOfPairs.push("OwnerId", zData.compIntQueueId);
        arrOfPairs.push("RecordTypeId", zData.compIntCaseRecordTypeId);
        arrOfPairs.push("PS_CaseSubType__c", "Enrollment");
        //AN20190412 change request per Venkat during the Complete Intake project
        arrOfPairs.push("PS_Classification__c", "Complete Immunology");
    }

    //set zPaper workflow fields on the case
    arrOfPairs.push("ZPAPER__latestFax__c", formatNow);
    arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID);
    arrOfPairs.push("ZPAPER__newFax__c", "true");
    arrOfPairs.push("ZPAPER__faxType__c", zType); //AN20180712 during code review, pay attention to this
    arrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //AN20180717 added this

    // TPM180813 changed to not attach doc to case record in zdocset
    createSFRecord(doc, "Case", "New fax received on " + formatNow, arrOfPairs);
}
/* END Create Stack from Fax */
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
