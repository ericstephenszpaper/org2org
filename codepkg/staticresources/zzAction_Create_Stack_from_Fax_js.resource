<!--
// Name: Create Stack from Fax
// Committer: andrew@zpaper.com
// Update: updating static resource
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-07-16 18:50:18","active":true,"button":"","name":"Create Stack from Fax","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_field0\")","value":"","operation":"equals"}]},"consequence":{"doit":""},"ordinal":18}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//CRN190308 Handle uploaded files via Lightning Component
// <X_fromFile>/zpdata/agents/routeAgent/incoming/lightningUpload/zpaper@abbvie.com.psdev-lightningUpload-5001h000003tebtAAA-TestTitlePage.pdf</X_fromFile>
var fromFile = X(doc, "X_fromFile");
if (fromFile && fromFile.indexOf("lightningUpload") >= 0) {
    fromFile = fromFile.substring(fromFile.lastIndexOf('/') + 1);
    var parts = fromFile.split("-");
    if (parts.length >= 3) {
        var attachToId = parts[2];
        alert("@@@ UPLOAD: ATTACHING TO SALESFORCE RECORD = " + attachToId);
        var label = "File uploaded by " + parts[0];
        attach(doc, label, attachToId, true);
        var arrOfPairs = [];
        arrOfPairs.push("db-label", label);
        updateDB(doc, arrOfPairs0);
        return;
    }
}

var createCase = false; //AN20180712 flag to track if we want to create a Case or not
var stackNumber = ""; //AN20190305 moving declaration to top of rule
var attachLabel = "";

//ERS170328 docType by OCR
zData.docTypeOCR = zData.docTyper(doc, {"PAPP":"Patient~ Assistance~", "PAUTH":"Prior~ Authorization~", "ENRL":"Enrollment~", "FAX":""});
alert("docType was " + doc.docType + " now " + zData.docTypeOCR);
var zType = doc.X("X_docType");
if (doc.docType != zData.docTypeOCR) {
    var arrOfPairs0 = [];
    arrOfPairs0.push("X_docTypeOCR", zData.docTypeOCR);
    arrOfPairs0.push("X_docType", zData.docTypeOCR);
    zType = zData.docTypeOCR; //ERS170330 saved below into SF faxType__c field
    updateDB(doc, arrOfPairs0);
}

var formatNow = getCurDateAndTime(doc);
var channel = "Fax";
if (isNaN(doc.deliveredFrom)) { // Not a Number is true
    channel = "Email";
}

var zpArrOfPairs = []; //AN20180713 declaring a separate array for use in setting zPaper doc security

var zp = "ZPAPER__"; //ERS170626 now in the package
var zStack = zp + "zStack__c";

//AN20180711 this ZP businss can probably be removed and replaced with the correct namespace
zpArrOfPairs.push(zp + "faxType__c", zType);
zpArrOfPairs.push(zp + "Priority__c", "Medium");
zpArrOfPairs.push(zp + "Status__c", "New Stack");
zpArrOfPairs.push(zp + "Channel__c", channel);
// MSH171116 using zStack_Received__c instead of latestFax__c because latestFax__c gets updated by save.jsp every time the record is updated
 
//zpArrOfPairs.push(zp + "latestFax__c", formatNow);
zpArrOfPairs.push("zStack_Received__c", formatNow);
zpArrOfPairs.push(zp + "receivedId__c", doc.dbID);
zpArrOfPairs.push(zp + "newFax__c", "true");
zpArrOfPairs.push(zp + "Pages__c", X(doc, "X_pages"));

zpArrOfPairs.push(zp + "Program_Name__c", zData.classification);
zpArrOfPairs.push(zp + "sentFaxTo__c", doc.deliveredTo); //ERS170628 caller id
zpArrOfPairs.push(zp + "From__c", doc.deliveredFrom);
zpArrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //MSH170817 added
zpArrOfPairs.push(zp + "Stage__c", "Received"); //ERS170731 #40593
//zpArrOfPairs.push(zp + "Classification__c", zData.classification); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types

alert("@@@ Classification = " + zData.classification);

//AN20180712 for code review: we have multiple IF iterations involving zData.classifcation. Can we combine them?
if (zData.classification == "PAP") { //AN20180604 set PAP queue and record type
    alert("@@@ entering PAP logic");
    
    zpArrOfPairs.push("ZPAPER__Classification__c", "PAP"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types
    
    zpArrOfPairs.push("OwnerId", zData.papQueueId);
    zpArrOfPairs.push("RecordTypeId", zData.papStackRecordTypeId);
    zpArrOfPairs.push("Drug_Type__c", "Humira");
    
    attachLabel = "New Stack received on " + formatNow;
    
    createCase = false;
}
else if (zData.classification == "RH-Immunology") {//AN20180604 set RH-Immunology queue and record type
    alert("@@@ entering RH-Immunology logic");

    zpArrOfPairs.push("ZPAPER__Classification__c", "RH-Immunology"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types

    zpArrOfPairs.push("OwnerId", zData.immunQueueId);
    zpArrOfPairs.push("RecordTypeId", zData.immunStackRecordTypeId);
    zpArrOfPairs.push("Drug_Type__c", "Humira");
    
    attachLabel = "New Stack received on " + formatNow;
    
    createCase = true;
    
}

else if (zData.classification == "ARCC") {//AN20180604 set ARCC queue and Immunology record type
    alert("@@@ entering ARCC logic");

    zpArrOfPairs.push("ZPAPER__Classification__c", "RH-Immunology"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types

    zpArrOfPairs.push("OwnerId", zData.ARCCQueueId);
    zpArrOfPairs.push("RecordTypeId", zData.immunStackRecordTypeId);
    zpArrOfPairs.push("Drug_Type__c", "Humira");
    
    attachLabel = "New Stack received on " + formatNow;
    
    createCase = true;
    
}

else if (zData.classification == "Complete Immunology") {//AN20180604 set Complete Immunology queue and Complete Intake record type
    alert("@@@ entering Complete Immunology logic");
    alert("@@@ zData.compImmStackRecordTypeId = " + zData.compImmStackRecordTypeId);
    
    zpArrOfPairs.push("ZPAPER__Classification__c", "Complete Intake"); //AN20190312 tech debt. Need to remove all reference to Complete Immunology and replace with Complete Intake, including renaming of variables and record types
    
    zpArrOfPairs.push("OwnerId", zData.compImmQueueId);
    //zpArrOfPairs.push("RecordTypeId", zData.compImmStackRecordTypeId);
    zpArrOfPairs.push("RecordTypeId", zData.pharmStackRecordTypeId); //AN20190327 first created stack should be for the Pharmacist
    //zpArrOfPairs.push("Drug_Type__c", "Skyrizi"); //AN20190708 AbbVie will be using this fax line for mutliple drugs, so no default should be set
    
    attachLabel = "New Stack received on " + formatNow;
    
    createCase = true;

}
var sfId = createAndAttach(doc, zStack, attachLabel, zpArrOfPairs);

var originalStackId = sfId;
stackNumber = getSFField(doc, zStack, "Name", null, sfId);
alert("#### Stack Received. Attached to: " + sfId);

var arrOfPairs = [];
arrOfPairs.push("db-label", attachLabel);
arrOfPairs.push("db-BATES", sfId + "-STACK");
arrOfPairs.push("X_sfStackId", sfId); //ERS170727 #40447
arrOfPairs.push("X_Stack_Number", stackNumber);

//assign doc security. Variables are based on the inbound fax line
alert("@@@ master ID is = " + doc.kbData.groupID);
alert("@@@ PAP group ID is = " + zData.papGroupId);
alert("@@@ RH-Immunology group ID is = " + zData.immunGroupId);
alert("@@@ Complete Immunology group ID is = " + zData.compIntGroupId);
alert("zData.classification is " + zData.classification);

if (zData.classification == "PAP") { //AN20180604 set PAP group security
    alert("@@@ setting document security for PAP group");
    arrOfPairs.push("db-users", ":" + zData.papGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.papGroupId + ":");

}
else if (zData.classification == "RH-Immunology" || zData.classification == "ARCC") {//AN20180604 set RH-Immunology group security or ARCC group security
    alert("@@@ setting document security for RH-Immunology");
    arrOfPairs.push("db-users", ":" + zData.immunGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.immunGroupId + ":");
    
}
else if (zData.classification == "Complete Immunology") {//AN20190225 set Pharmacy group security. Complete Immunology security gets set on the zStack copy that we create later
    alert("@@@ setting document security for Complete Immunology");
    arrOfPairs.push("db-users", ":" + zData.pharmGroupId + ":");
    arrOfPairs.push("db-readers", ":" + zData.pharmGroupId + ":");

}

//CRN180726 Case #50469 -- Set the "Received" checkbox
var now0 = getCurDateAndTime(doc, false, true);
alert("$$$ now0 = " + now0);
arrOfPairs.push("X_reviewedStatus", "Received");
arrOfPairs.push("X_reviews", "Received by agent at " + now0 + "<br/>"); //ERS170909 #40592/CAW Update
//arrOfPairs.push("X_reviews", X(doc, "X_reviews") + "Received by agent at " + now0 + "<br/>"); 

updateDB(doc, arrOfPairs);

alert("@@@ zData.classification123 :" + zData.classification);

var org2orgCS=doc.kbData.customSettings; //ERS190411 #57881
alert("ERS190411 CS a "+ (typeof org2orgCS) +" has "+org2orgCS);
if (org2orgCS) {
    zData.watermark=""+XCustomSetting(doc,"watermark__c");
    alert("ERS190411 wm="+zData.watermark+" ZPAPER__server__c="+XCustomSetting(doc,"ZPAPER__server__c"));
    if (!zData.watermark || zData.watermark=="undefined") zData.watermark="";
}


//CRN190226 Create copy of original stack - we use zpArrOfPairs as it already contains most of the data that we need
//AN 20190228 only should do this for the Complete Immunology program
if (zData.classification == "Complete Immunology"){
alert("@@@ creating copy of zStack for Complete Immunology program");

    arrOfPairs = [];
    var pageCount = X(doc, "X_pages");
    var pageRange = "1-" + pageCount;
    alert("@@@ pageRange === " + pageRange);
    // pv022518 markup on non pharmacist pages.
    var watermark="'addText',10,1,875,1480,'COPY','24px''"; //ERS190411 #57881. 
    if (zData.watermark && zData.watermark != "") watermark=zData.watermark; //ERS190411 get from the custom setting
    
    var buffer = "";
    for (var i=1; i<=pageCount; i++) {
        var curTime = new Date().getTime();
        
        //AN20190311 place the word COPY on each page of the copy document
        buffer += "kbm('IMG" + curTime + "','PAGE" + i + "IMG" + curTime + "',"+watermark+");"; 
    }
    alert("@@@@ original dbID = " + doc.dbID);
    alert("@@@@ MARKUP = " + buffer);
    alert("@@@@ Original Stack Id: " + originalStackId);
    arrOfPairs.push("X_markup", buffer);
    //arrOfPairs.push("ZPAPER_Orginal_Stack__c", originalStackId);
    
    var newSnippetId = null; 
    
    //ERS 190411 instead of split then watermark, watermark send to flatten, and remove watermark from original
    
    if (1===1) {  //ERS190411 #57881 flatten with SF_sendFax.jsp and use that new dbID
        updateDB(doc, arrOfPairs);
        var flatURL="http://localhost:8080/kb/jsp/SF_sendFax.jsp?faxTo=PDF@"+sfId+"&SFids="+sfId+"&mode=filePDF";
        alert("ERS190411 URL="+flatURL);
        var sfOrgID=doc.kbData.sfOrganizationID; 
        if (!sfOrgID) sfOrgID=doc.kbData.sfSessionID.substring(0,doc.kbData.sfSessionID.indexOf("!")-1);
        flatURL+="&SForg="+sfOrgID+"&SFsession="+doc.kbData.sfSessionID;
        flatURL+="&coverID2=noBarcode&coverID="+doc.dbID; //newSnippetId for barcodeif we want we can remove(coverID2=noBarcode)
        flatURL+="&SFtype=ZPAPER__zStack__c";  //ERS190411 TODO better missing parameters
        alert("ERS190411 flatten with "+flatURL);
        var flatData=wget(doc,flatURL,null,null); //SF_sendFax.jsp is returning a zippi id
        var flatId=X(doc,"zippi",flatData); //TODO use X(doc,n,xml);
        alert("ERS190411 flattened to "+flatId+" len="+flatId.length);
        alert("ERS190412 a "+ (typeof flatId) );
        if (flatId.indexOf("{")==0) {
            var flatItem=JSON.parse(flatId); 
            flatId=flatItem['Item']; 
        }
        alert("ERS190412 now to "+flatId+" len="+flatId.length);
        if (flatId.length>4) newSnippetId=flatId;
        arrOfPairs = [];
        arrOfPairs.push("X_markup","");
        updateDB(doc, arrOfPairs);
        var copyLabel="Copy of "+ doc.label;
        
        //TODO update the flatten doc label
        setDocumentContext(doc, flatId); //ERS190412 WARN WARN WARN doc is the COPY doc
        arrOfPairs = [];
        arrOfPairs.push("db-label",copyLabel);
        updateDB(doc, arrOfPairs);
    } else {
        arrOfPairs.push("db-label", "Copy of New Stack received on " + formatNow);
        newSnippetId = splitDocumentForIndex(doc, "", pageRange, arrOfPairs); //the watermark is in there now
    }
    alert("@@@@ after splitting Snippet, dbID = " + doc.dbID);

    //zpArrOfPairs.push("RecordTypeId", zData.compImmStackRecordTypeId); //AN 20160327 change the Stack Rec Type ID - this indicates that the newly created record will be used by the Complete Intake user instead of the Pharmacist
    //zpArrOfPairs.push("RecordTypeId", zData.pharmStackRecordTypeId); //AN 20160309 change the Stack Rec Type ID - this indicates that the newly created record will be used by the Pharmacist instead of the Indexing user
        
    //zpArrOfPairs.push("ZPAPER__Parent__c", originalStackId);
    //zpArrOfPairs.push("ZPAPER_Orginal_Stack_lookup__c", originalStackId); //AN20190305 unknown if we still need this as it is redundant to the value being saved in ZPAPER__Parent__c 
    sfId = createAndAttach(doc, zStack, "Copy of New Stack received on " + formatNow, zpArrOfPairs);
    alert("Stack Id for copy stack = " + sfId);

    var copyStackNumber = getSFField(doc, zStack, "Name", null, sfId);  //CRN190321 Make sure that the copy is indexed correctly
    alert("@@@ copyStackNumber = " + copyStackNumber);
    //CRN190226 Fix the receivedId__c field (was set with original id)
    arrOfPairs = [];
    
    //arrOfPairs.push("ZPAPER_Orginal_Stack_lookup__c", originalStackId); //AN20190305 tech debt to clean up - we are setting the original/parent stack in 2 different fields. Unsure what this cleanup code does
    
    arrOfPairs.push("RecordTypeId", zData.compImmStackRecordTypeId); //AN20190306 tech debt. I attempted to set this record type when creating the Stack but it that didn't work as expected. Changing the record type after record creation works but is clunky and tech-debty and kludgey
    arrOfPairs.push(zp + "receivedId__c", doc.dbID);
    updateSFRecord(doc, zStack, sfId, arrOfPairs);
    //CRN190226 also fix the X_sfStackId field
    arrOfPairs = [];
    arrOfPairs.push("X_sfStackId", sfId);
    arrOfPairs.push("X_attachedTo", sfId); //ERS190412 #57881
    arrOfPairs.push("X_Stack_Number", copyStackNumber);
    
    /*
    //AN20190308 set the doc security for Pharmacy Services group
    alert("@@@ setting document security for Pharmacy Services" + zData.pharmGroupId);
    arrOfPairs.push("db-users", ":" + zData.pharmGroupId  + ":");
    arrOfPairs.push("db-readers", ":" + zData.pharmGroupId  + ":");
    */

    //AN20190327 set the doc security for Complete Intake group
    alert("@@@ setting document security for Complete Intake" + zData.pharmGroupId);
    arrOfPairs.push("db-users", ":" + zData.compIntGroupId  + ":");
    arrOfPairs.push("db-readers", ":" + zData.compIntGroupId  + ":");   
    
    updateDB(doc, arrOfPairs);
    //CRN190226 Make sure it is also in the correct incoming folder
    var incomingFolder = doc.kbData.groupID.substring(1) + "In";
    alert("### incomingFolder = " + incomingFolder);
    moveDocument(doc, null, incomingFolder);
    
    //update the original zStack and make it a child of the copy that we just created
    arrOfPairs = [];
    arrOfPairs.push("ZPAPER__Parent__c",originalStackId);// PV190416 updated for Pharmacy Services Stack should update on Intake Stack
    //arrOfPairs.push("ZPAPER_Orginal_Stack_lookup__c", sfId);
    updateSFRecord(doc, zStack,sfId, arrOfPairs);   
}

alert("@@@ create case123" + createCase);
if (createCase === true){ // PV190321 create a Case if this is not a PAP document
    alert("@@@ entering createCase logic");
    arrOfPairs = [];
                
    arrOfPairs.push("Status", "New");
    arrOfPairs.push("Origin", "Fax / HCP");
    arrOfPairs.push("Priority", "Standard");
    arrOfPairs.push("zStack__c", sfId); //AN20080717 link to parent zStack 

    //if (zData.classification == "RH-Immunology" || zData.classification == "ARCC"){ //AN20190410 abbvie wants ARCC to be its own thing
    if (zData.classification == "RH-Immunology"){                                             
        arrOfPairs.push("OwnerId", zData.immunQueueId);
        arrOfPairs.push("RecordTypeId", zData.immunCaseRecordTypeId);
        arrOfPairs.push("PS_CaseSubType__c", "BV Full");
        arrOfPairs.push("PS_ReasonCode__c", "None");
        arrOfPairs.push("PS_Classification__c", "RH-Immunology");
    }
    
    else if (zData.classification == "ARCC"){
        arrOfPairs.push("RecordTypeId", zData.immunCaseRecordTypeId);
        arrOfPairs.push("OwnerId", zData.ARCCQueueId);
        arrOfPairs.push("PS_CaseSubType__c", "BV Full");
        arrOfPairs.push("PS_ReasonCode__c", "None");
        arrOfPairs.push("PS_Classification__c", "RH-Immunology");
    }
    
    else if (zData.classification == "Complete Immunology"){
        arrOfPairs.push("OwnerId", zData.compIntQueueId);
        arrOfPairs.push("RecordTypeId", zData.compIntCaseRecordTypeId);
        arrOfPairs.push("PS_CaseSubType__c", "Enrollment");

        //AN20190412 change request per Venkat during the Complete Intake project
        //arrOfPairs.push("PS_Classification__c", "RH-Immunology"); 
        arrOfPairs.push("PS_Classification__c", "Complete Immunology");
                                                                 

    }
    
    //set zPaper workflow fields on the case
    arrOfPairs.push("ZPAPER__latestFax__c", formatNow);
    arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID);
    arrOfPairs.push("ZPAPER__newFax__c", "true");
    arrOfPairs.push("ZPAPER__faxType__c", zType); //AN20180712 during code review, pay attention to this
    arrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //AN20180717 added this
    
   //var sfId = createAndAttach(doc, "Case", "New fax received on " + formatNow, arrOfPairs);
// TPM180813 changed to not attach doc to case record in zdocset
    var sfId = createSFRecord(doc, "Case", "New fax received on " + formatNow, arrOfPairs);
    
}


/* END */

//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
