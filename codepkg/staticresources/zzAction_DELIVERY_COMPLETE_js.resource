<!--
// Name: DELIVERY_COMPLETE
// Committer: sruthi.potru@zpaper.com
// Update: Updating for case 00063437 
var attachLabel = "Sent on " + formatNow; /* MSH170905 */
var sfId = X(doc, "X_activityOnID");
var attachedTo = X(doc, "sfServer");
attachedTo += "/" + sfId;

To:

var attachLabel = "Sent on " + formatNow; /* MSH170905 */
var sfId = X(doc, "X_activityOnID");
//CRN191008 The sfServer field in wddata appears to be blank during bulkPrint, so we get this in attachedTo: /50023000002MyBbAAK which screws up tableXMLSearch.jsp.
var attachedTo = X(doc, "sfServer");
if (!attachedTo) {
    attachedTo = doc.kbData.sfServer;
    if (!attachedTo) { attachedTo = "https://www.salesforce.com"; }     // I don't know of anything in our code that really gives a rip about the host on this attachedTo field
    if (attachedTo.indexOf("https://") < 0) { attachedTo = "https://" + attachedTo; } // we do want the https:// starting part
}
attachedTo += "/" + sfId;
alert("@@@@@@@@ attachedTo value = " + attachedTo);
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-11-07 17:01:58","active":true,"button":"","name":"DELIVERY_COMPLETE","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"DELIVERY_COMPLETE","operation":"equals"}]},"consequence":{"doit":""},"ordinal":5}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//TPM180803 starting DELIVERY_COMPLETE rule
var formatNow = getCurDateAndTime(doc);
var coverID = X(doc, "coverID");
var docTitle = X(doc, "docTitle");

//var deliveredTo = X(doc, "deliveredTo");
var deliveredTo = X(doc, "ContactFax", doc.wddata); //AN20190716 #60754 doc.deliveredTo is coming over as null - was suggested to use ContactFax

alert("coverID: " + coverID);
alert("docTitle: " + docTitle);

/* MSH180207 define once here */
var arrOfPairs = [];
var sfCaseId = "";
var sfContactId = "";
var sfType = X(doc, "sfType");
var patientFirstName = "";
var patientLastName = "";
var patientId = "";
var OwnerId = "";

//TPM180803 Below IF statement is only for PAOS integration.  Other DELIVERY_COMPLETE functionality is below that.
//AN180709 This IF statement contains logic for PAOS functionality. PAOS has 3 use cases, each triggered by a different outbound message.  See Tom for details.

var useCase = X(doc, "zPAOSUseCase__c"); //todo: clean this up - we no longer have PAOS use cases
if (useCase && useCase.length > 0) {
    
    alert("useCase: " + useCase);

    var sfActivityOnId = X(doc, "X_activityOnID"); 
    alert("sfActivityOnId: " + X(doc, "X_activityOnID")); //depending on the Use Case this may be an PS_Application__c record, a Contact, or an Account
    
    var masterID = (doc.kbData.groupID).substring(1,(doc.kbData.groupID).length()); //get the zPaper Master ID
    alert("@@@ masterID: " + masterID);

    sfCaseId = X(doc, "PS_PortalCase__c"); //AN20190115 as of Jan 2019 we no longer need to create a case - clean this XML variable and code up later
    sfContactId = X(doc, "PS_Contact__c");
    alert("found sfCaseId: " + sfCaseId);
    alert("found sfContactId: " + sfContactId);

//AN20190115 this is where we attach a doc to the case
    alert("calling attach with sfCaseId = " + sfCaseId); /* MSH171020 debugging */
    var attResult = attach(doc, "New Stack received on " + getCurDateAndTime(doc), sfCaseId, false);
    alert("attResult =  " + attResult); /* MSH171020 debugging */
    if (attResult.indexOf("ERROR") >= 0) {
        addPostExecutionScript(doc, "<ERROR>");
    } else {
        alert("Successful attach complete. Case Id: " + sfCaseId);
        addPostExecutionScript(doc, "<SUCCESS>");
    }
    
//AN20190115 set the label of the file on the PS_Application__c object
    arrOfPairs = [];
    arrOfPairs.push("db-label", "PAOS Supporting Document");
    updateDB(doc, arrOfPairs);      
    
//AN20190115 we should still create a stack       
    var stackId = zData.createStack(doc, sfContactId, sfCaseId, "Complete");
    alert("stackID: " + stackId);
    var contactFlds = getSFFields(doc, "Contact", "Name", null, sfActivityOnId);
    contactFlds += "";
    var patientname = X(doc, "Name", contactFlds);
    
    arrOfPairs = [];
    var attachPath = sfCaseId + "," + stackId;
    arrOfPairs.push("X_attachedTo", attachPath);
    arrOfPairs.push("X_ZPAPER__Case__c", sfCaseId);
    arrOfPairs.push("db-label", patientname + " PAOS Supporting Document");
    updateDB(doc, arrOfPairs);

    moveDocument(doc, masterID + "Out", masterID + "In");

    /* MSH171020 */
    zData.clearTriggerCondition(doc,"X_buttonAction");
    return;
}
//TPM180803  END of PAOS integration code
/*  DELIVERY_COMPLETE rule for anything NOT PAOS*/
var attachLabel = "Sent on " + formatNow; /* MSH170905 */
var sfId = X(doc, "X_activityOnID");
//CRN191008 The sfServer field in wddata appears to be blank during bulkPrint, so we get this in attachedTo: /50023000002MyBbAAK which screws up tableXMLSearch.jsp.
var attachedTo = X(doc, "sfServer");
if (!attachedTo) {
    attachedTo = doc.kbData.sfServer;
    if (!attachedTo) { attachedTo = "https://www.salesforce.com"; }     // I don't know of anything in our code that really gives a rip about the host on this attachedTo field
    if (attachedTo.indexOf("https://") < 0) { attachedTo = "https://" + attachedTo; } // we do want the https:// starting part
}
attachedTo += "/" + sfId;
alert("@@@@@@@@ attachedTo value = " + attachedTo);

var docType=X(doc, "X_docTypeSent"); //ERS180328 #46373
alert("@@@ first docType = " + docType);
if (docType==="") { docType = X(doc,"X_docType"); }  //ERS180328 #46373
alert("@@@ second docType = " + docType);
if (docType==="") { docType = doc.docType; }
alert("@@@ third docType = " + docType);
if (docType==="") { docType = X(doc,"ContactName"); } //ERS180328 #46373
alert("@@@ forth docType = " + docType);
if (docType==="") { docType = "FAX"; }
alert("@@@ fifth docType = " + docType);
doc.docType=docType; //ERS180328 #46373

var labelDocType = docType;

alert("@@@ docType = " + docType); 
alert("@@@ X(doc, sfServer) = " + attachedTo);

if (sfType == "Case") {
    
    var caseFlds = getSFFields(doc, "Case", "RecordTypeId,ContactId,AccountId,OwnerId", null, sfId); //AN20180718 get the fields from the Case that we will need
     
    var recTypeId = X(doc, "RecordTypeId", caseFlds);
    var recTypeName = getSFField(doc, "RecordType", "Name", null, recTypeId); //AN20180718 get the name of the current Case record type
    OwnerId = X(doc, "OwnerId", caseFlds);
    alert("@@@ OwnerId" + OwnerId);
    alert("@@@ current Case Record Type Name: " + recTypeName);
    
    if (recTypeName === "New/Renewal/YEC/On-going Prescription"){ //this is a PAP case
      alert("@@@ getting PAP Case details");
      patientId =  X(doc, "ContactId", caseFlds); //get the Contact ID since PAP uses the Contact object for Patients
      var contactFlds = getSFFields(doc, "Contact", "FirstName,LastName", null, patientId); 
      alert("@@@ calling SF for contactFlds :: " + contactFlds);
      patientFirstName = X(doc, "FirstName", contactFlds);
      patientLastName = X(doc, "LastName", contactFlds);
    }

    else if (recTypeName === "Benefit Verification" || recTypeName === "Denial Support"){ //this is an RH-Immunology case
      alert("@@@ getting RH Case details");
      patientId = X(doc, "AccountId", caseFlds); //get the Account ID since RH uses the Account object for Patients
      var accountFlds = getSFFields(doc, "Account", "PS_PatientFirstName__c,PS_PatientLastName__c", null, patientId); 
      alert("@@@ calling SF for accountFlds :: " + accountFlds);
      patientFirstName = X(doc, "PS_PatientFirstName__c", accountFlds);
      patientLastName = X(doc, "PS_PatientLastName__c", accountFlds);
    }

    alert("@@@ patientId :: " + patientId);
    alert("@@@ patientFirstName :: " + patientFirstName);
    alert("@@@ patientLastName :: " + patientLastName);
    
    /* create attachLabel X(doc, "X_ZPAPER__FirstName__c") + X(doc, "X_ZPAPER__LastName__c") + " - " + X(doc, "X_ZPAPER__faxType__c") + " - " + MMddYYYY; */    
    attachLabel = patientFirstName + " " + patientLastName + " - " + docTitle + " - Sent " + zData.formatTodayMMddYYYY();
    alert("@@@@ attachLabel: " + attachLabel);
    
    //arrOfPairs = [];
    arrOfPairs.push("db-label", attachLabel);
    
    // For Abbvie's Bulk printing capability
    /* MSH180228 #46294 */
    var bulkPrint = (X(doc, "mailondemand", "").length > 0);
    if (bulkPrint) {
        /* MSH180207 assuming it got sent to print process */
        arrOfPairs = [];
        docType = "BP";
        arrOfPairs.push("PS_Bulkprint_Date_time__c", formatNow);
        arrOfPairs.push("PS_Bulkprint_status__c", X(doc, "X_faxStatus"));
        updateSFRecord(doc, "Case", X(doc, "sfId"), arrOfPairs);
    }
}

arrOfPairs = [];
arrOfPairs.push("X_buttonAction0", X(doc, "X_buttonAction"));
arrOfPairs.push("X_buttonAction", "");

arrOfPairs.push("db-label", attachLabel);
arrOfPairs.push("db-BATES", sfId + "-" + doc.docType); /* ERS170625 todo get docType from template used */
arrOfPairs.push("X_attachedTo", attachedTo); /* ERS170628 docSet needs this */
if (docType !== "") arrOfPairs.push("X_docType",docType); //ERS180328 #46373

//TPM180803 For setting checkboxes on the zdocset
//ERS170909 #40592 for zDocSet statuses
var ba=doc.X("X_faxStatus")+"";
if ("Delivered" !== ba) { ba="Failed"; } //JPB180803 #50178
var now0 = getCurDateAndTime(doc,false,true);
arrOfPairs.push("X_reviewedStatus",ba);
arrOfPairs.push("X_reviews",X(doc,"X_reviews")+ba+" by "+doc.kbData.remoteUser+" at "+now0+"<br/>"); //ERS170909 #40592
arrOfPairs.push("X_buttonAction","");

alert("@@@ master ID is = " + doc.kbData.groupID);
alert("@@@ PAP group ID is = " + zData.papGroupId);
alert("@@@ RH-Immunology group ID is = " + zData.immunGroupId);
alert("@@@ Complete Intake group ID is = " + zData.compIntGroupId);

if (sfType == "Case") {

    var caseFlds = getSFFields(doc, "Case", "RecordTypeId,Classification__c,OwnerId", null, sfId); //AN20180718 get the fields from the Case that we will need

    var recTypeId = X(doc, "RecordTypeId", caseFlds);
    var recTypeName = getSFField(doc, "RecordType", "Name", null, recTypeId); //AN20180718 get the name of the current Case record type
    OwnerId = X(doc, "OwnerId", caseFlds);
    alert("@@@ recTypeName is = " + recTypeName);

    var caseClassification =  X(doc, "Classification__c", caseFlds); 
    alert("@@@ caseClassification is = " + caseClassification);
    
    //set the Group security to PAP, RH-Immunology, or Complete Intake. We look at both the Record Type and the Classification to determine this.
    if (recTypeName === "New/Renewal/YEC/On-going Prescription" || caseClassification === "PAP") { //AN20180604 set PAP security
        alert("@@@ setting document security for PAP group");
        arrOfPairs.push("db-users", ":" + zData.papGroupId + ":");
        arrOfPairs.push("db-readers", ":" + zData.papGroupId + ":");
    }
    else if (recTypeName === "Benefit Verification" || caseClassification === "RH-Immunology") {//AN20180604 set RH-Immunology group security
        alert("@@@ setting document security for RH-Immunology");
        arrOfPairs.push("db-users", ":" + zData.immunGroupId + ":");
        arrOfPairs.push("db-readers", ":" + zData.immunGroupId + ":");
    }
    else if (recTypeName === "Complete Intake" || caseClassification === "Complete Immunology") {//AN20190301 set Complete Intake group security
        alert("@@@ setting document security for Complete Intake");
        arrOfPairs.push("db-users", ":" + zData.compIntGroupId + ":");
        arrOfPairs.push("db-readers", ":" + zData.compIntGroupId + ":");
    }
}
else if (sfType == "Contact") {
    alert("@@@ processing outbound for a PAP contact record");
    var contactFlds = getSFFields(doc, "Contact", "RecordTypeId", null, sfId); //TPM180806 get the fields from the Contact that we will need
    var recTypeId = X(doc, "RecordTypeId", contactFlds);
    var recTypeName = getSFField(doc, "RecordType", "Name", null, recTypeId); //TPM180806 get the name of the current Contact record type
    alert("@@@ recTypeName is = " + recTypeName);
    
    //set the Group security for PAP (RH does not send outbound from a contact record)
    if (recTypeName === "Individual") { //TPM180806 set group security and attachlabel for PAP, not for RH
        alert("@@@ setting document security for PAP group");
        arrOfPairs.push("db-users", ":" + zData.papGroupId + ":");
        arrOfPairs.push("db-readers", ":" + zData.papGroupId + ":");
        
        var contactFlds = getSFFields(doc, "Contact", "FirstName,LastName", null, sfId); 
        alert("@@@ calling SF for contactFlds :: " + contactFlds);
        patientFirstName = X(doc, "FirstName", contactFlds);
        patientLastName = X(doc, "LastName", contactFlds);
        
        attachLabel = patientFirstName + " " + patientLastName + " - " + docTitle + " - Sent " + zData.formatTodayMMddYYYY();
        alert("@@@@ attachLabel: " + attachLabel);
        arrOfPairs.push("db-label", attachLabel);
    }
}

/* MSH180228 #46294 */
if (bulkPrint) {
    arrOfPairs.push("X_docType", docType);
}
    
updateDB(doc, arrOfPairs);
var faxStatus=doc.X("X_faxStatus")+"";
var faxStatusDetail = X(doc, "X_faxStatusDetail");
var successfulXMission = false;
if(faxStatus==="Delivered"){
    successfulXMission = true;
}

//CRN190404 If we get here, the fax submission failed. Find the Case that sent this fax and create an open "Failed" task for it
var attachedTo = X(doc, "X_attachedTo");
if (!attachedTo) {
    alert("ERROR: We couldn't create the Task Activity because we don't have any Salesforce record that we are attached to.");
    return;
}

attachedTo = attachedTo.substring(attachedTo.lastIndexOf('/') + 1);     // strip off https://...
var parts = attachedTo.split(",");
attachedTo = parts[0].trim();
alert("@@@ Creating open activity for record with id: " + attachedTo);

var arrOfPairs = [];

var host = doc.kbData.HOST;
if (host.indexOf('://') > 0)    { host = host.substring(host.indexOf('://')+3); }
if (host.indexOf(':') > 0)      { host = host.substring(0, host.indexOf(':'));  }
else if (host.indexOf('/') > 0) { host = host.substring(0, host.indexOf('/'));  }
var viewLink = "https://" + host + "/kb/jsp/SF_find.jsp?skin=SFbare&dbID=" + doc.dbID + "&SForg=" + doc.sfOrg + "&SFid=" + sfId;

// Add an Activity to the existing Salesforce record.
//PV190404 updated to override activity history status
var formatNow = getSFPreferredCurDateAndTime(doc);
arrOfPairs.push("WhatId", attachedTo);
if (!faxStatusDetail) { faxStatusDetail = successfulXMission ? "Fax successfully delivered" : "Unknown error"; }
faxStatusDetail = (successfulXMission ? "Delivered" : "Failed") + ": " + docTitle + " " + faxStatusDetail + " to " + deliveredTo;

alert("@@@ deliveredTo = " + deliveredTo);

arrOfPairs.push("Subject", faxStatusDetail);
arrOfPairs.push("Description", faxStatusDetail + ". View the document at " + viewLink);
arrOfPairs.push("ActivityDate", formatNow);

//AN20180719 #60754 saving these additional fields on the task per Venkat
arrOfPairs.push("DNIS__c", deliveredTo);
arrOfPairs.push("Task_Subject__c", docTitle);

//PV190430 set OwnerId  only if it is a user
if(OwnerId.startsWith("005")){
arrOfPairs.push("OwnerId", OwnerId);
}
else{
 var remoteUserId= getSFField(doc, "User","Id","username='"+doc.kbData.remoteUser+"'");
 arrOfPairs.push("OwnerId", remoteUserId);   
}

//PV190411 Find the Case that sent this fax and create an open "Failed" task for it
addPostExecutionScript(doc, '{"status":"success","message":"EXIT LOGFAX"}');
arrOfPairs.push("Status",successfulXMission ? "Completed" : "Failed");
arrOfPairs.push("Type", "Document");
alert("@@@@@@ PV190425: " + OwnerId);
var sfId = createSFRecord(doc, "Task", faxStatusDetail, arrOfPairs);
alert("@@@@@@ Adding Activity to: " + sfId);
/* END DELIVERY_COMPLETE zAction */
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
