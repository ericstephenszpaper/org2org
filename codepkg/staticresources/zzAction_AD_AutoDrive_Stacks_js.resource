<!--
// Name: AD AutoDrive Stacks
// Committer: eric.stephens@zpaper.com
// Update: ERS210128 autoData details TODO rename zippiData and patch clientLibrary
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2021-01-28 16:46:15","active":true,"button":"Auto","name":"AD AutoDrive Stacks","conditions":{"logic":"or","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"Auto","operation":"starts-with"},{"name":"doc.X(\"X_zippiCompareOld\")","value":"template","operation":"contains"},{"name":"doc.X(\"X_zippiCompare\")","value":"template","operation":"contains"}]},"consequence":{"doit":""},"ordinal":29}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
alert("@@@@ AutoDrive Rule Fired @@@#"); //ERS190803 #52661 from OccFit
//ERS201009 fiexed the ] issue #75381

//ERS200227 criteria looks for any template not just ENR

function zPrepop(fd,filled,confidence) {
    if (!fd) return {};
    var values={};
    if (!filled) filled=0.04;
    if (!confidence) confidence=0.90;
    for (var x in fd) {
        //alert("x="+x);
        var i=fd[x];
        if (i.type=="text" && i.confidence>=confidence) { values[i.name]=i.text; alert(i.name+"="+i.text);}
        if (i.type=="checkbox") { values[i.name]=(i.filled>=filled); }
        if (i.type=="signature") { values[i.name]=(i.filled>=filled); } //ERS200406 TODO use to detect signed
    }
    return values;
}

zData.autoIndex=""+XCustomSetting(doc,""+"ADpersonTypes__c").trim(); //TODO PACKAGE zData.zp+
if (!zData.autoIndex) {alert("Missing ADPersonTypes setting."); zData.autoIndex=",ORD,HIPAA,"; }
alert("ERS200229.22 looking for settings "+XCustomSetting(doc,""+"ADPersonTypes__c")+" now using "+zData.autoIndex);
zData.dataConfidence=("0"+XCustomSetting(doc,""+"ADdataConfidence__c"))/1.00;
if (!zData.dataConfidence) zData.dataConfidence=0.92;
alert("ERS200229.22 using confidence "+zData.dataConfidence+ " from "+XCustomSetting(doc,""+"ADdataConfidence__c"));


function autoSplit(doc,pageRange,p0,zc,zd) { //ERS191010 #61357
    var arrOfPairs = [];
    var dt=zc[p0].docType;
    arrOfPairs.push("X_docType", dt);
//CRN201023 Case #76788 This screws up the checkboxes on child stacks. Do NOT RESTORE THIS LINE. IT BREAKS THE DOCSET CHECKBOXES.
//    arrOfPairs.push("X_reviews","page "+pageRange+" a "+dt);
    arrOfPairs.push("db-label",dt+" autoSplit page "+pageRange);
    var zdValues = {};
    if (zd[p0]) {
        zdValues = zPrepop(zd[p0]); //SHR201028 #76788 reduce the zippi data down to a name/value lookup map
        arrOfPairs.push("X_zippiFields",JSON.stringify(zdValues) ); //ERS191014 autoData
        arrOfPairs.push("X_zippiData",JSON.stringify(zd[p0]) ); //ERS210128 autoData details TODO rename zippiData and patch clientLibrary
    }
    arrOfPairs.push("X_zippiCompare","[null,"+JSON.stringify(zc[p0])+"]"); //ERS191014 autoData
    arrOfPairs.push("X_autoIndexedPages", pageRange);
    alert("ERS200312.37 before split "+pageRange);
    var newId=splitDocumentForIndex(doc, "deprecated", pageRange,arrOfPairs);
    alert("ERS191014 newId="+newId +" from "+pageRange); //ERS191014 #61196

    //ERS200311 blows up!!! track(doc, "AutoIndexed", "Document with Id: " + doc.dbID, zData.countPages(pageRange)); //ERS200308 tracking
    //TODO ERS191015 create zStack record type auto
    //*
    /* AFTER THIS POINT, THE DOC WILL HOLD DATA FOR NEW SNIPPET, NOT THE STACK SNIPPET */
    //*
    //ERS2004308 TODO x_reviews for Signed
    //ERS200406 #71156 TODO detect Signature,"true" and add stage for Signed
/*
//CRN201027 #76788 Moved below so that we can recover from all of the stuff that addStage() and clientAutoIndex(), etc does to
// the X_reviews. According to Judson, we want the child stacks split off by autodrive to have only the "Index" and possibly
// the "Signed" checkboxes to be checked. Down below we will take the direct approach when setting the X_reviews instead
// of suffering from all of the side-effects of the client library calls.
    var arrOfPairs2 = [];
    zData.stage="Received";
    //CRN201025 Case #76788 Moved from addStage() function since it shouldn't apply to non-AutoDrive rules.
    if (!zData.reviews) { zData.reviews=X(doc,"X_reviews"); } //ERS200418 #71415 autodrive
    zData.reviews = ""; //SHR201027 #76788 Make sure each child zStack starts with empty reviews...
    arrOfPairs2=zData.addStage(doc,arrOfPairs,zData.stage); //ERS200418 #71415
    var pageCount = zData.countPages(doc,pageRange);
    track(doc, "Stage."+zData.stage, "Document with Id: " + doc.dbID, pageCount);
    updateDB(doc,arrOfPairs2);
*/

    //ERS200229 might be better in client library
    var newChildStackId="";
    if (zData.autoIndex.indexOf(","+dt+",")>-1 || zData.pId0) { //lookup with record type, key values and recent pId0 ERS200418
        var attachedId=zData.clientAutoIndex(doc,dt,zPrepop(zd[p0],0.03,zData.dataConfidence));
        if (1===1 && attachedId) { //ERS200502 #70273 not showing up on the Timeline
            //zData.patientId=zData.clientPatient(doc,arrOfPairs);
            //alert("Created Patient with ID: " + zData.patientId);
            //attach(doc, dt+" AutoSplit page "+pageRange, attachedId);
            zData.patientId=attachedId;
            zData.docType=dt;
            if (zData.patientId.indexOf("001")===0) arrOfPairs.push("ZPAPER__PatientAccount__c", zData.patientId);
            newChildStackId=zData.clientChildStack(doc,arrOfPairs,zData.stackId); //ERS200503 #70273 makes the Timeline task
            alert("New AutoStack "+newChildStackId);
            attach(doc, dt+" AutoSplit page "+pageRange, zData.stackId); //SHR201027 #76788 also attach the newly created child Snippet to the parent zStack
        }
    } else { alert("ERS200229.44 "+dt +" not in "+zData.autoIndex); }

    //CRN201027 #76788 Moved from above. Setting the X_reviews how Judson wants them so that the correct checkboxes are
    // checked in the zDocSet.
    var pageCount = zData.countPages(doc,pageRange);
    track(doc, "Stage.Indexed", "Document with Id: " + doc.dbID, pageCount);
    var now0 = zData.formatNow;
    if (!now0) { now0 = getCurDateAndTime(doc,false,true); }  //ERS200314 #70336
    var arrOfPairs2 = [];
    //CRN2010227 #76788 All auto-split children should have Indexed in their X_reviews.
    var curReviews = "Indexed by autodrive at "+now0+"<br/>"; //ERS200418 #71415 autodrive //SHR201028 don't show the integration user
    var hasAnySigs = false;
    alert("Page " + p0 + " -- zd length => " + JSON.stringify(zd).length);
    if (zd[p0]) { //SHR201028 #76788 only check for signatures if we have zippiData for this page
        alert("zdValues => " + JSON.stringify(zdValues));
        var sigKeys = Object.keys(zdValues).filter(function(key) {
            var isSigField = key.match(/signature/i) !== null;
            alert("@@@ filter: key => " + key);
            alert("@@@ filter: value => " + zdValues[key]);
            alert("@@@ filter: key.match => " + isSigField);
            return isSigField;
        });
        alert("sigKeys found in filter: " + sigKeys.length);
        hasAnySigs = sigKeys.length > 0; //SHR201028 #76788 signed is false unless there are signature fields
        sigKeys.forEach(function(key) {
            alert("@@@ iterating: key => " + key);
            alert("@@@ iterating: zdValues[key] => " + zdValues[key]);
            hasAnySigs = hasAnySigs || zdValues[key]; //SHR201028 #76788 return true if ANY signatures are true
        });
        curReviews += hasAnySigs ? "Signed at " + now0 : ""; //SHR201027 #76788 child stacks should only show Indexed and Signed
    }
    alert("curReviews => " + curReviews);
    arrOfPairs2.push("X_reviews", curReviews);
    updateDB(doc,arrOfPairs2);

    return newId;
}

var stackId = zData.getStackId(doc); //ERS190624 HACK? //ERS200711 #72433 added into zStack library from 2019
zData.stage="Indexed"; //ERS200310 AutoIndexed is not in zStack picklist
zData.pages=("0"+X(doc,"X_pages"))/1; if (zData.pages===0) zData.pages=1; //TODO intialize zData better

//really need patient info enough to attach or create
//zData.getDataEntryFields(doc); //ERS190914 get from X_zippiData
var zc=X(doc,"X_zippiCompare");
var zd=X(doc,"X_zippiData");
alert("zc="+zc);
if (zc && zc.indexOf("[")===0) {zc=JSON.parse(zc);}
alert("zc now "+zc);
if (zd && zd.indexOf("[")===0) {zd=JSON.parse(zd);}

//loop pages
var dt0="FAX", p0=1, c=0;
var dbID0=doc.dbID;
var docStack=doc;
zData.newSplits=[];
zData.stackId=stackId; //ERS200503 #70273

zData.rotation=""; //ERS200704 #72433
for (var p=1; p<=zData.pages; p++) {
    alert("page "+p);
    alert("zc[]="+zc[p]);
    if (zc[p]) {
        var dt=zc[p].docType;
        if (dt != dt0 || 1==1) { //ERS200227 #61196 zc[p] existing is enough?
            alert("Split "+p0+zData.rotation+"-"+(p-1)+" into "+dt0);
            //ERS200312 alert("Data "+JSON.stringify(zPrepop(zd[p0])));
            if (dt0 != "FAX") {
                if (zc && zc[p] && zc[p].orient && zc[p].orient==180) zData.rotation="u"; //ERS200704 #72433
                zData.newSplits[c]=autoSplit(doc,p0+zData.rotation+"-"+(p-1),p0,zc,zd);
                zData.rotation=""; //ERS200711 reset to "" after the split
                //doc=docStack;
                setDocumentContext(doc, dbID0);
                alert("ERS191014.59 after split doc.dbID="+doc.dbID +" new "+c+" = "+zData.newSplits[c]);
                c++;
            }
            //HACK OFF if ((p-p0)>1) dt="was"+dt; //ERS200227 #61196 multiple contimeous Orders
            dt0=dt; p0=p;
        }
    }
}
//ERS200915 #75381 accelerator and orientations
if (zc[p0] && zc[p0].orient && zc[p0].orient==180) zData.rotation="u"; //ERS200704 #72433 //ERS200711 TODO orient=0 in default

alert("ERS200711.116 rotation="+zData.rotation+" Pages "+p0+zData.rotation+"-"+(p-1)+" is a "+dt0);
alert("Data "+JSON.stringify(zPrepop(zd[p0])));
if (dt0 != "FAX") {
    zData.newSplits[c]=autoSplit(doc,p0+zData.rotation+"-"+(p-1),p0,zc,zd);
}
alert("Splits into "+zData.newSplits);

/* end of rule */
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---

//--- RULE VALIDATION CODE - END ---

</script>
