<!--
// Name: Index Page
// Committer: andrew@zpaper.com
// Update: updating static resource
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2020-01-02 16:09:02","active":true,"button":"Index","name":"Index Page","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"Index","operation":"equals"}]},"consequence":{"doit":""},"ordinal":5}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
alert("@@@@ Index Rule Fired @@@#"); //ERS190803 #52661 from OccFit
//ERS190730 #61272 updated button validation in the Actions* Details area

var stackId = X(doc, "X_stack");
if (!stackId) stackId=zData.getStackId(doc); //ERS190624 HACK?
var stackFolder = stackId + "-STACK";
var companyCode = doc.deliveredTo;
zData.stage="Indexed"; //ERS190620

/* Clear the trigger that invoked this rule */
//ERS170909 zData.clearTriggerCondition(doc,"X_buttonAction");
var indexInitialized = X(doc,"X_indexInitialized");
if (!indexInitialized || 0 === indexInitialized.length) {
    stackId = new Date().getTime() + "";
    zData.initializeStack(doc,stackFolder, companyCode, stackId);
}

zData.getDataEntryFields(doc);

// Get the document type (will be used to route to next folder)
//var docType = X(doc, "X_Document_Type__c");
var nextFolder = "20500Triage-S2";              // Other folder is the default
var prevIndexPages = X(doc, "X_indexedPages");
var curIndexPages = X(doc, "X_idxPages");
if (prevIndexPages && prevIndexPages.length > 0 && curIndexPages && curIndexPages.length > 0) {
    prevIndexPages += ",";
}
curIndexPages = prevIndexPages + curIndexPages;
var arrOfPairs = [];
arrOfPairs.push("X_indexedPages", curIndexPages);
//move to after updates arrOfPairs=zData.addStage(doc,arrOfPairs,"Indexed");
updateDB(doc,arrOfPairs);

var sfStackId=X(doc,'X_sfStackId');
if(!sfStackId){
  sfStackId=zData.getStackId(doc);  
}
zData.zParentId=doc.dbID; //PV191105
alert("@@@@@@ Currently attached to ZPAPER__zStack__c with ID: " + sfStackId);
/* SPLIT OFF NEW SNIPPET HERE */
var pageRange = X(doc,"X_idxPages");
var newId=splitDocumentForIndex(doc, "index", pageRange);
alert("ERS190624 newId="+newId);
//*
/* AFTER THIS POINT, THE DOC WILL HOLD DATA FOR NEW SNIPPET, NOT THE STACK SNIPPET */
//*

/* Attach the split document to a new Case record, if it wasn't passed in */
//var priority=X(doc,"X_ZPAPER__Priority__c"); //ERS170626
var label0="";
var triageType=doc.docType;

var attachPath = X(doc,"X_attachedTo");
var attachLabel=zData.clientFile(doc,"Indexed"); //"Indexed " + formatNow;
alert("ERS190624 attachLabel="+attachLabel);


/* Attach the split document to Lead record if required */ //ERS190619
// TODO ERS190624 flip the if logic
if (doc.wddata.indexOf("X_ZPAPER__ReferralLead__c")>-1) { //ERS190803 TODO rethink
    if (!leadId || 0 === leadId.length) {
        alert("@@@@ creating new Lead");
        arrOfPairs = [];
        leadId=zData.clientLead(doc,arrOfPairs);
        alert("Created Lead with ID: " + leadId);
        if (leadId == "null" || leadId == "NEW") leadId=null;
    } else {
        if (zData.attachRecords.indexOf("Lead")>-1) {
            alert("@@@@ attaching to existing Lead: " + leadId);
            attach(doc, attachLabel, leadId);
        }
    }
    if (leadId && attachPath.indexOf(leadId)==-1) attachPath+=","+leadId;
}

alert("@@@@ Passed in patient Id = " + X(doc,"X_ZPAPER__Patient__c"));
/* Attach the split document to Lead record if required */ //ERS190619
zData.patientType=XCustomSetting(doc,"PatientRecord__c"); //+XCustomSetting(doc,"ZPAPER__PatientRecordType__c");
if (!zData.patientType) zData.patientType="Contact"; //ERS190802 #61272
//AN191101 Make sure we are initializing zData patient fields that we're going to need later
if (X(doc,"X_ZPAPER__Patient__c") || zData.X_ZPAPER__LastName__c) { //ERS190803 TODO rethink use X
    zData.patientId = zData.contacId = X(doc,"X_ZPAPER__Patient__c");
    alert("@@ patient type = " + zData.patientType + ", patientID = " + zData.patientId);
    var dq = zData.dq = String.fromCharCode(34); //ERS190802 TODO define better in zData
    alert("@@@@ creating new "+zData.patientId);
    if (!zData.patientId) {
        alert("@@@@ creating new "+zData.patientType+" Patient");
        arrOfPairs = [];
        //ERS190730 #61272 missing the basics
        var p="";
        if ("Account"===zData.patientType) { //ERS190803
            p="Person";
            //arrOfPairs.push("Name", zData.X_ZPAPER__FirstName__c+" "+zData.X_ZPAPER__LastName__c);
            arrOfPairs.push("FirstName", zData.X_ZPAPER__FirstName__c);
            arrOfPairs.push("LastName", zData.X_ZPAPER__LastName__c);
            arrOfPairs.push(p+"Birthdate", zData.X_ZPAPER__Birthdate__c);
        } else {
            arrOfPairs.push("FirstName", zData.X_ZPAPER__FirstName__c); //X_ZPAPER__FirstName__c //ERS190803 TODO get cleaner #61272
            arrOfPairs.push("LastName", zData.X_ZPAPER__LastName__c);
            if(zData.X_ZPAPER__Birthdate__c) arrOfPairs.push("Birthdate", zData.X_ZPAPER__Birthdate__c);
            //arrOfPairs.push("RecordTypeId", "0122E0000012eHX"); //X_ZPAPER__FirstName__c //ERS190803 TODO get cleaner #61272 PV191107 Added id 0122E0000012eHX
            arrOfPairs.push("Contact_Type__c", "Patient");// PV190926 hardcoded to create contact
        }
        zData.contactId = zData.patientId=zData.clientPatient(doc,arrOfPairs);
        alert("Created Patient with ID: " + zData.patientId);
        if (zData.patientId == "null" || zData.patientId == "NEW") zData.patientId=null;
        else { //ERS190730 #61272 leverage the new record
            if (attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
            alert("@@@@@@@ NEW CONTACT CREATED WITH ID: " + zData.contactId); //ERS190802 zData.contactId
            // clear out the "New Patient" fields
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__FirstName__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__LastName__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c_readable" + dq + ").val(" + dq + "NONE" + dq + "); ");
            // set the Patient lookup fields
            //ERS190803 TODO handle ZPAPER__ relationships
            //addPostExecutionScript(doc, " $(" + dq + "#Patient__c" + dq + ").val(" + dq + zData.patientId + dq + "); ");
            //addPostExecutionScript(doc, " $(" + dq + "#Patient__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
        }
    } else {
        alert("@@@@ attaching to existing Patient zData.attachRecords: " + zData.attachRecords);// PV190926 changed to create a patient
        if (zData.attachRecords.indexOf("Patient")<=-1) {
            alert("@@@@ attaching to existing Patient: " + zData.patientId);
           
            if (1===1 || zData.patientType != "Account") { //ERS190730 lookup the data TODO person account?
                var contactFlds = getSFFields(doc, zData.patientType, "FirstName,LastName", null, zData.patientId);
                zData.X_ZPAPER__FirstName__c = patientFirstName = X(doc, "FirstName", contactFlds); //PV190926 update the child stack
                zData.X_ZPAPER__LastName__c = patientLastName = X(doc, "LastName", contactFlds);
            } else if (zData.patientType == "Account") { //ERS190730 lookup the data TODO person account?
                var contactFlds = getSFFields(doc, zData.patientType, "Name", null, zData.patientId);
                zData.X_ZPAPER__FirstName__c = patientFirstName = X(doc, "Name", contactFlds).split(" ")[0]; //ERS190803 TODO find a better way
                zData.X_ZPAPER__LastName__c = patientLastName = X(doc, "Name", contactFlds).split(" ")[1];
            }
            attachLabel=zData.clientFile(doc,"Indexed"); //PV190929 attach label fix
            //if(zData.X_ZPAPER__faxType__c !="PE"){
                attach(doc, attachLabel, zData.patientId);
            //}
           
        }
    }
    if (zData.patientId && attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
}
//PV191025 to create Prescription record
var stackFlds = getSFFields(doc, "ZPAPER__zStack__c", "ZPAPER__latestFax__c", null, sfStackId);
zData.X_ZPAPER__latestFax__c =  X(doc, "ZPAPER__latestFax__c", stackFlds); //PV190926 update the child stack


//ERS190620 use a setting to determine which lookups we attach to
/* Attach the split document to Case record if required */ //ERS190619
alert("@@@@ creating new Case doc.wddata ****"+doc.wddata); //PV190926 moved down because patient needs to create first

//if (doc.wddata.indexOf("X_ZPAPER__Case__c")>-1 && zData.X_ZPAPER__faxType__c !="PE") { //ERS190803 TODO detect Case lookup // PV190925 in WDData checking for X_ZPAPER__Case__c if that is there then will create a case. But now in the wd data what we are getting we are not getting X_ZPAPER__Case__c this value that's the reason i am making this condition false
//if (zData.X_ZPAPER__faxType__c !="PE") {
    alert("ERS190624 need Case");
    alert("@@@@@ zData.caseId: " + zData.caseId);
    alert("@@@@@ zData.caseNumber: " + zData.caseNumber);
    if (zData.caseId) {
        alert("ERS190624.67");
        if (zData.attachRecords.indexOf("Case")>-1) {
            alert("@@@@ attaching to existing Case: " + zData.caseId);
            attachLabel=zData.clientFile(doc,"Indexed"); //PV190929 attach label fix
            attach(doc, attachLabel, zData.caseId);
        }
    } else {
        if(zData.X_Case_Record_Type__c){
            alert("@@@@ creating new Case");
            arrOfPairs = [];
            arrOfPairs.push("ContactId",zData.patientId);      
            arrOfPairs.push("RecordTypeId",zData.X_Case_Record_Type__c);
            alert("@@@@ creating new Case arrOfPairs ***"+ arrOfPairs);
            zData.caseId=zData.clientCase(doc,arrOfPairs,"DataEntry");
            alert("Created Case with ID: " + zData.caseId);
            if (zData.caseId == "null" || zData.caseId == "NEW") zData.caseId=null;
        }
       
    }
    alert("ERS190624.78 have a case?");
    if (zData.caseId && attachPath.indexOf(zData.caseId)==-1){
        attachPath+=","+zData.caseId;
        zData.caseNumber = getSFField(doc, "Case", "CaseNumber", null, zData.caseId); //PV9292019
    }
//}


//clientPatient has to do this
/* Attach the split document to Contact record if required
if (doc.wddata.indexOf("X_ZPAPER__Patient__c")>-1) {  //TODO deal with personAccounts
    alert("@@@@ attaching to a Contact? contactId = " + contactId);
    if (contactId && contactId.length > 0) {
        attach(doc, "Indexed-" + docType + "-" + stackId, contactId);
        if (attachPath.indexOf(contactId)==-1) attachPath+=","+contactId;
        var contactFlds = getSFFields(doc, "Contact", "FirstName,LastName", null, contactId);
        patientFirstName = X(doc, "FirstName", contactFlds);
        patientLastName = X(doc, "LastName", contactFlds);
    }
    else if (patientFirstName && patientFirstName.length > 0
        && patientLastName && patientLastName.length > 0
        && patientDOB && patientDOB.length > 0) {
        var ctcArrOfPairs = [];
        ctcArrOfPairs.push("FirstName", patientFirstName);
        ctcArrOfPairs.push("LastName", patientLastName);
        ctcArrOfPairs.push("BirthDate", patientDOB);
        contactId = createAndAttach(doc, "Contact", "Indexed-" + docType + "-" + stackId, ctcArrOfPairs);
        if (attachPath.indexOf(contactId)==-1) attachPath+=","+contactId;
        alert("@@@@@@@ NEW CONTACT CREATED WITH ID: " + contactId);
        // clear out the "New Patient" fields
        addPostExecutionScript(doc, " $(" + dq + "#Labeler_Patient_First_Name__c" + dq + ").val(" + dq + "" + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Labeler_Patient_Last_Name__c" + dq + ").val(" + dq + "" + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Labeler_Patient_DoB__c" + dq + ").val(" + dq + "" + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Labeler_Patient_DoB__c_readable" + dq + ").val(" + dq + "NONE" + dq + "); ");
        // set the Patient lookup fields
        addPostExecutionScript(doc, " $(" + dq + "#Patient__c" + dq + ").val(" + dq + contactId + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Patient__c_Name" + dq + ").val(" + dq + patientFirstName + " " + patientLastName + dq + "); ");
    }
}
*/
if("RX" === zData.X_ZPAPER__faxType__c){ //PV191002 Creating Rx Record
    alert("@@@@ creating Rx Record @@@");
    arrOfPairs = [];
    if(zData.caseId){
        arrOfPairs.push("Case__c",zData.caseId);
    }
         
    zData.rxRecordId=zData.clientRecord(doc,"Prescription_Info__c",arrOfPairs,"Index")+"";
    arrOfPairs.push("receivedId__c", doc.dbID);
    alert("@@@@ created Rx Record @@@ "+ zData.rxRecordId);
    attachPath = (attachPath ? attachPath + "," + zData.rxRecordId : zData.rxRecordId); //PV191031 attach document to rx record
   
    //PV191212 attach PDF
    zData.exposePDF(doc,zData.rxRecordId, null);
   attachLabel=zData.clientFile(doc,"Indexed"); //PV191030 attachment label fix
   attach(doc,attachLabel, zData.rxRecordId);
}



arrOfPairs = [];
if (zData.providerId) {
    arrOfPairs.push("ZPAPER__Provider__c", zData.providerId);
    if (attachPath.indexOf(zData.providerId)==-1) attachPath+=","+zData.providerId;
}
if (zData.patientId) {
    //if (zData.patientId.indexOf("003")===0) arrOfPairs.push("ZPAPER__Patient__c", zData.patientId);
    if (zData.patientId.indexOf("001")===0) arrOfPairs.push("ZPAPER__PatientAccount__c", zData.patientId);
    if (zData.patientId.indexOf("00Q")===0) arrOfPairs.push("ZPAPER__ReferralLead__c", zData.patientId); //ERS190802 Lead
    if (attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
}

if (zData.leadId) {
    arrOfPairs.push("ZPAPER__ReferralLead__c", zData.leadId);
    if (attachPath.indexOf(zData.leadId)==-1) attachPath+=","+zData.leadId;
}
if (zData.referralId) {
    arrOfPairs.push("ZPAPER__Referral__c", zData.referralId);
    if (attachPath.indexOf(zData.referralId)==-1) attachPath+=","+zData.referralId;
}

updateSFRecord(doc, zData.zps, sfStackId, arrOfPairs);
attachLabel=zData.clientFile(doc,"Indexed"); //PV190929 attachment label fix
attach(doc,attachLabel, sfStackId);
alert("@@@@ updated and attached to zStack Record, id = " + sfStackId);

/* Move the split document to its processing folder */
alert("@@@@@@ Moving the indexed pages document into next processing folder: " + nextFolder);

alert("@@@ patientId is" + zData.patientId)

//PV190926 updated for child stacks
alert("@@@@ updated and attached to zStack Record, id = " + sfStackId + "?="+zData.getStackId(doc)+" data="+arrOfPairs);
arrOfPairs.push("ZPAPER__Status__c", "Completed"); //PV190911 to update child stack status to complete
arrOfPairs.push("ZPAPER__Patient__c", zData.patientId);
arrOfPairs.push("ZPAPER__Case__c",zData.caseId);
arrOfPairs.push("ZPAPER__FirstName__c", zData.X_ZPAPER__FirstName__c);
arrOfPairs.push("ZPAPER__LastName__c", zData.X_ZPAPER__LastName__c);
arrOfPairs.push("ZPAPER__Classification__c", zData.classification);
arrOfPairs.push("ZPAPER__faxType__c", zData.X_ZPAPER__faxType__c);

if (zData.rxRecordId) { //PV191217
    arrOfPairs.push("RX_Image_ID__c", zData.rxRecordId);
}

//  arrOfPairs.push("Case_Record_Type__c",zData.X_Case_Record_Type__c);//PV191024
if(zData.X_Case_Record_Type__c && zData.X_Case_Record_Type__c != "DONOT_SAVE" )arrOfPairs.push("Case_Record_Type__c",zData.X_Case_Record_Type__c);//PV191030 update the case record type
//arrOfPairs.push("Case_Record_Type__c",zData.X_Case_Record_Type__c);//PV191024 update the case record type
arrOfPairs.push("ZPAPER__Program_Name__c", zData.classification);
if( zData.X_Prescription__c )  arrOfPairs.push("Prescription__c",zData.X_Prescription__c); //PV191025 to update Prescription
var childStackId=zData.clientChildStack(doc,arrOfPairs,sfStackId); //ERS190810 create child stack for split ERS190811 clientChildStack
if (childStackId) {attachPath+=","+sfStackId+","+childStackId; attachPath=attachPath.replace("/,?","/"); } //ERS190811 #61570 clean up //parent stack too
arrOfPairs=[];//PV191023 Everytime child will attach to that particular zStack
arrOfPairs.push("X_sfStackId",childStackId);
arrOfPairs.push("receivedId__c", doc.dbID);//PV191105 Update received id
updateDB(doc,arrOfPairs);

/* Move the split document to its processing folder */
alert("@@@@@@ Moving the indexed pages document into next processing folder: " + nextFolder);
//ERS190731 #61272 moveDocument(doc,"",nextFolder);
//ERS190731 #61272 reloadByBATES(doc, nextFolder); //ERS170413 #35291
/* Place the split document into the stack folder */
alert("@@@@@@ Moving the indexed pages document into the final stack folder: " + stackFolder);
moveDocument(doc,"",stackFolder);
unlockDocument(doc);

//ERS190731 #61272 moveDocument(doc,"",nextFolder);
//ERS190731 #61272 reloadByBATES(doc, nextFolder); //ERS170413 #35291
/* Place the split document into the stack folder */
alert("@@@@@@ Moving the indexed pages document into the final stack folder: " + stackFolder);
moveDocument(doc,"",stackFolder);
unlockDocument(doc);


arrOfPairs = [];
arrOfPairs=zData.addStage(doc,arrOfPairs,zData.stage);
var pageCount = zData.countPages(doc,pageRange);
alert("@@@@ pageCount = " + pageCount +" were "+ zData.stage);
arrOfPairs.push("X_pages",pageCount);
arrOfPairs.push("X_count",pageCount);
arrOfPairs.push("db-pages",pageCount);
//ERS190620 arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + companyCode + " - " + stackId);
arrOfPairs.push("X_attachedTo",attachPath); //ERS170628
updateDB(doc,arrOfPairs);

track(doc, "Doc Indexed", "Document with Id: " + doc.dbID, pageCount);
var dq = String.fromCharCode(34); //PV191025 updated
alert("Setting Patient Id to: " + zData.contactId);
alert("Setting Patient name to: " + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c);
alert("Setting case Id to: " + zData.caseId);
alert("Setting Case number to: " + zData.caseNumber);
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c" + dq + ").val(" + dq + zData.contactId + dq + "); ");
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c" + dq + ").val(" + dq + zData.caseId + dq + "); ");
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c_CaseNumber" + dq + ").val(" + dq + zData.caseNumber + dq + "); "); //PV190929 updated case number in lookup
addPostExecutionScript(doc, "nextPage(~ready~);updateDEStatus(~indexed:" + pageRange + "~);");

/* end of rule */

//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
ZnVuY3Rpb24gekluc3RhbGwoKSB7CiAgICAkKCJbbmFtZT0nZGItQkFURVMnXSIpLnZhbCgiIik7CiAgICAkKCIjWF9idXR0b25BY3Rpb25zIikudmFsKCJJbmRleCxJZ25vcmUsUmVqZWN0LFN0YWNrIENvbXBsZXRlIik7CiAgICAkKCIjWF9mb2xkZXJGb3JtcyIpLnZhbCgiMjAyMDAyMDE3MTEyNTA5MTExNV9EYXRhMl9XZWJfRm9ybSIpOwp9CgpmdW5jdGlvbiBkb1ZhbGlkYXRpb24oKSB7CiAgICB2YXIgZmF4VHlwZSA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fZmF4VHlwZV9fYyJdJyk7CiAgIGlmKCJQRSIgIT1mYXhUeXBlLnZhbCgpKXsKCiAKICAgIHZhciBjYXNlSWQgPSAkKCdbbmFtZT0iWF9DYXNlX19jIl0nKS52YWwoKTsKICAgCiAgIAogICAgdmFyIHJlcUJ1ZmZlciA9ICIiOwogICAgdmFyIHBhdHRlcm5TdHJpbmcgPSAvXlthLXpBLVogXSskLzsKICAgIG49IlhfWlBBUEVSX19mYXhUeXBlX19jIjsgbD0iRG9jdW1lbnQgVHlwZSI7CiAgICBlPSQoJ1tuYW1lPSInK24rJyJdJyk7CiAgICB2YXIgZG9jVHlwZSA9IGUudmFsKCk7CiAKCiAgICBpZiAoIWUudmFsKCkgfHwgMCA9PT0gZS52YWwoKS5sZW5ndGggfHwgIkRPTk9UX1NBVkUiID09PSBlLnZhbCgpKSB7CiAgICAgICAgZS5jc3MoJ2JvcmRlcicsJzNweCBzb2xpZCByZWQnKTsKICAgICAgICBpZiAocmVxQnVmZmVyLmxlbmd0aCA+IDApIHsgcmVxQnVmZmVyICs9ICIsICI7IH0KICAgICAgICByZXFCdWZmZXIgKz0gbDsKICAgIH0gZWxzZXsKICAgICAgICBlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAgICAgdmFyIGRvY1R5cGVMYWJlbD0gJChlKS5maW5kKCJvcHRpb246c2VsZWN0ZWQiKS50ZXh0KCk7CiAgICAgICAgdmFyIGRvY1R5cGVMYWJlbERvbSA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fZmF4VHlwZUxhYmVsIl0nKTsKICAgICAgIAogICAgICAgIGlmKCFkb2NUeXBlTGFiZWxEb20udmFsKCkgfHwgMCA9PT0gZG9jVHlwZUxhYmVsRG9tLnZhbCgpLmxlbmd0aCl7CiAgICAgICAgICAgCiAgICAgICAgICAgICQoJ2Zvcm0jZGF0YUVudHJ5Rm9ybScpLmFwcGVuZCgnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iWF9aUEFQRVJfX2ZheFR5cGVMYWJlbCIgaWQ9IlhfWlBBUEVSX19mYXhUeXBlTGFiZWwiIHZhbHVlPSInK2RvY1R5cGVMYWJlbCsnIi8+Jyk7CgogICAgICAgIH1lbHNlewogICAgICAgICAgIAogICAgICAgICAgICAkKGRvY1R5cGVMYWJlbERvbSkudmFsKGRvY1R5cGVMYWJlbCk7CiAgICAgICAgfQogICAgICAgCiAgICB9CiAgIAogICAgIAogICAgdmFyIHBhdGllbnRJZD0kKCdbbmFtZT0iWF9aUEFQRVJfX1BhdGllbnRfX3IuTmFtZSJdJykudmFsKCk7CiAgICBpZighcGF0aWVudElkIHx8IDAgPT09IHBhdGllbnRJZC5sZW5ndGgpewogICAgICAgIHZhciBwYWl0ZW50RGUgPSAkKCdbbmFtZT0iWF9aUEFQRVJfX0ZpcnN0TmFtZV9fYyJdJyk7CiAgICAgICAKICAgICAgICAgaWYoIXBhaXRlbnREZS52YWwoKSB8fCAwID09PSBwYWl0ZW50RGUudmFsKCkubGVuZ3RoKXsKICAgICAgICAgICAgcGFpdGVudERlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIHJlZCcpOwogICAgICAgICAgICByZXFCdWZmZXIgKz0gIixGaXJzdE5hbWUiOwogICAgICAgIH1lbHNlewogICAgICAgICAgICBpZighKHBhaXRlbnREZS52YWwoKS5tYXRjaChwYXR0ZXJuU3RyaW5nKSkpewogICAgICAgICAgICAgICAgIGFsZXJ0KCJFUlJPUjogICdGaXJzdE5hbWUnIE11c3QgYmUgU3RyaW5nLiIpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgcGFpdGVudERlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAgICAgfQoKICAgICAgICAgcGFpdGVudERlICA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fTGFzdE5hbWVfX2MiXScpOwogICAgICAgICBpZighcGFpdGVudERlLnZhbCgpIHx8IDAgPT09IHBhaXRlbnREZS52YWwoKS5sZW5ndGgpewogICAgICAgICAgICBwYWl0ZW50RGUuY3NzKCdib3JkZXInLCczcHggc29saWQgcmVkJyk7CiAgICAgICAgICAgIHJlcUJ1ZmZlciArPSAiLExhc3ROYW1lIjsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgaWYoIShwYWl0ZW50RGUudmFsKCkubWF0Y2gocGF0dGVyblN0cmluZykpKXsKICAgICAgICAgICAgICAgIGFsZXJ0KCJFUlJPUjogICdMYXN0TmFtZScgTXVzdCBiZSBTdHJpbmcuIik7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFpdGVudERlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAgICAgfSAgICAgICAgCgogICAgfWVsc2V7CiAgICAgICAgdmFyIGxhc3ROYW1lID0gJCgnW25hbWU9IlhfWlBBUEVSX19MYXN0TmFtZV9fYyJdJyk7CiAgICAgICAgdmFyIGZpcnN0TmFtZSA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fRmlyc3ROYW1lX19jIl0nKTsKICAgICAgIAogICAgICAgIGlmKGxhc3ROYW1lLnZhbCgpIHx8IGZpcnN0TmFtZS52YWwoKSl7CiAgICAgICAgICAgIGFsZXJ0KCJFUlJPUjogIEVpdGhlciAnRmlyc3ROYW1lJyAgJ0xhc3RuYW1lJyBvciAnUGF0aWVudCcgb25seSBvbmUgc2hvdWxkIGJlIHNlbGVjdGVkLiIpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIH0KICAgIH0KCiAgICBjYXNlSWQ9JCgnW25hbWU9IlhfWlBBUEVSX19DYXNlX19yLkNhc2VOdW1iZXIiXScpLnZhbCgpOwogICAgaWYoIWNhc2VJZCB8fCAwID09PSBjYXNlSWQubGVuZ3RoKXsKICAgICAgICB2YXIgY2FzZVJlY29yZFR5cGUgPSAkKCdbbmFtZT0iWF9DYXNlX1JlY29yZF9UeXBlX19jIl0nKTsKICAgIGlmKCJQT0EiICE9IGRvY1R5cGUgJiYgIlJYIiAhPSBkb2NUeXBlICAmJiAoIWNhc2VSZWNvcmRUeXBlLnZhbCgpIHx8IDAgPT09IGNhc2VSZWNvcmRUeXBlLnZhbCgpLmxlbmd0aCB8fCAiRE9OT1RfU0FWRSIgPT09IGNhc2VSZWNvcmRUeXBlLnZhbCgpKSl7CiAgICAgICAgICAgIGNhc2VSZWNvcmRUeXBlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIHJlZCcpOwogICAgICAgICAgICByZXFCdWZmZXIgKz0gIixDYXNlIFJlY29yZCBUeXBlIjsKICAgICAgICB9ZWxzZSBjYXNlUmVjb3JkVHlwZS5jc3MoJ2JvcmRlcicsJzNweCBzb2xpZCBncmVlbicpOwoKICAgIH1lbHNlewogICAgICAgIHZhciBjYXNlUmVjb3JkVHlwZSA9ICQoJ1tuYW1lPSJYX0Nhc2VfUmVjb3JkX1R5cGVfX2MiXScpOwogICAgICAgCiAgICAgICAgaWYoY2FzZVJlY29yZFR5cGUudmFsKCkgJiYgIkRPTk9UX1NBVkUiICE9IGNhc2VSZWNvcmRUeXBlLnZhbCgpKXsKICAgICAgICAgICAgLy9hbGVydCgiRVJST1I6ICBFaXRoZXIgY2FzZVJlY29yZFR5cGUgb3IgJ0Nhc2UnIG9ubHkgb25lIHNob3VsZCBiZSBzZWxlY3RlZC4iKTsKICAgICAgICAgICAgLy9yZXR1cm4gZmFsc2U7CgogICAgICAgIH0KICAgIH0KCiAgICB2YXIgcGF0dGVybk51bSA9IC9eWzAtOV0rJC87CiAgIAogICAKICAgIGlmIChyZXFCdWZmZXIubGVuZ3RoID4gMCkgewogICAgICAgIGFsZXJ0KCJFUlJPUjogVGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIHJlcXVpcmVkOiAiICsgcmVxQnVmZmVyKTsKICAgICAgICByZXR1cm4gZmFsc2U7ICAgLy9QVjE5MTAwNCBvbmUgb3IgbW9yZSBmaWVsZCBpcyBtaXNzaW5nLCBkb24ndCBzZW5kIHRvIHRoZSBydWxlcyBlbmdpbmUKICAgIH0KfSAgCiAgICByZXR1cm4gdHJ1ZTsgICAgICAgIC8vUFYxOTEwMDQgQWxsIHJlcXVpcmVkIGZpZWxkcyBoYXZlIGJlZW4gc3VwcGxpZWQsIGxldCB0aGUgcnVsZXMgZW5naW5lIGJlIG5vdGlmaWVkCn0KCgpmdW5jdGlvbiB2YWxpZGF0ZUVsZW1lbnQobmFtZSxsYWJlbCAscGF0dGVybikgewogICAKICAgICAKfQpyZXR1cm4gZG9WYWxpZGF0aW9uKCk7Cg==
//--- RULE VALIDATION CODE - END ---

</script>
