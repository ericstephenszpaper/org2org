<!--
// Name: Index Page
// Committer: cory.newey@zpaper.com
// Update: validations
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-11-16 16:04:02","active":true,"button":"Index","name":"Index Page","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"Index","operation":"equals"}]},"consequence":{"doit":""},"ordinal":11}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
alert("@@@@ Index Rule Fired @@@#");
//ERS190730 #61272 updated button validation in the Actions* Details area

var stackId = X(doc, "X_stack");
if (!stackId) stackId=zData.getStackId(doc); //ERS190624 HACK?
var stackFolder = stackId + "-STACK";
var companyCode = doc.deliveredTo;
zData.stage="Indexed"; //ERS190620

/* Clear the trigger that invoked this rule */
//ERS170909 zData.clearTriggerCondition(doc,"X_buttonAction");
var indexInitialized = X(doc,"X_indexInitialized");
if (!indexInitialized || 0 === indexInitialized.length) {
    stackId = new Date().getTime() + "";
    stackFolder = stackId + "-STACK";
    zData.initializeStack(doc,stackFolder, companyCode, stackId);
}

zData.getDataEntryFields(doc);
// Does the user want to attach indexed pages to Case?
//var caseId = X(doc, "X_ZPAPER__Case__c");
//var contactId = X(doc, "X_ZPAPER__Patient__c");
//var patientId=contactId; //TODO
//var providerId = X(doc, "X_ZPAPER__Provider__c");
//var patientFirstName = X(doc, "X_ZPAPER__FirstName__c");
//var patientLastName = X(doc, "X_ZPAPER__LastName__c");
//var patientDOB = X(doc, "X_ZPAPER__Birthdate__c");

// Get the document type (will be used to route to next folder)
//var docType = X(doc, "X_Document_Type__c");
var nextFolder = "20500Triage-S2";              // Other folder is the default
var prevIndexPages = X(doc, "X_indexedPages");
var curIndexPages = X(doc, "X_idxPages");
if (prevIndexPages && prevIndexPages.length > 0 && curIndexPages && curIndexPages.length > 0) {
    prevIndexPages += ",";
}
curIndexPages = prevIndexPages + curIndexPages;
var arrOfPairs = [];
arrOfPairs.push("X_indexedPages", curIndexPages);
//move to after updates arrOfPairs=zData.addStage(doc,arrOfPairs,"Indexed");
updateDB(doc,arrOfPairs);

//var sfStackId=zData.getStackId(doc);
var sfStackId=X(doc,'X_sfStackId');
if(!sfStackId){
  sfStackId=zData.getStackId(doc);  
}

alert("@@@@@@ Currently attached to ZPAPER__zStack__c with ID: " + sfStackId);
zData.zParentId=doc.dbID; //ERS190814 to overside the save.jsp workflows

alert("@@@@ Parent zStack Snippet attached to: " + X(doc, "X_attachedTo"));

/* SPLIT OFF NEW SNIPPET HERE */
var pageRange = X(doc,"X_idxPages");
var newId=splitDocumentForIndex(doc, "index", pageRange);

alert("@@@@ AFTER SPLIT: Child zStack Snippet attached to: " + X(doc, "X_attachedTo"));

alert("ERS190624 newId="+newId);
//*
/* AFTER THIS POINT, THE DOC WILL HOLD DATA FOR NEW SNIPPET, NOT THE STACK SNIPPET */
//*

/* Attach the split document to a new Case record, if it wasn't passed in */
//var priority=X(doc,"X_ZPAPER__Priority__c"); //ERS170626
var label0="";
var triageType=doc.docType;

var attachPath = X(doc,"X_attachedTo");
/* Attach the split document to Patient record if required */ //ERS190619
zData.patientType=XCustomSetting(doc,"ZPAPER__PatientRecord__c"); //ERS190806 ZPAPER__ now in MP
alert("@@@@ zData.patientType ***** "+zData.patientType+" Patient");
if (!zData.patientType) zData.patientType="Contact"; //ERS190802 #61272
//if (X(doc,"X_ZPAPER__Patient__c") || zData.X_ZPAPER__LastName__c) { //ERS190803 TODO rethink use X
    var dq = zData.dq = String.fromCharCode(34); //ERS190802 TODO define better in zData
    if (!zData.patientId) {
        alert("@@@@ creating new "+zData.patientType+" Patient");
        arrOfPairs = [];
        //ERS190730 #61272 missing the basics
        var p="";
        if ("Account"===zData.patientType) { //ERS190803
            p="Person";
            //arrOfPairs.push("Name", zData.X_ZPAPER__FirstName__c+" "+zData.X_ZPAPER__LastName__c);
            arrOfPairs.push("FirstName", zData.X_ZPAPER__FirstName__c);
            arrOfPairs.push("LastName", zData.X_ZPAPER__LastName__c);
            if (zData.X_ZPAPER__Birthdate__c) {
                arrOfPairs.push(p+"Birthdate", zData.X_ZPAPER__Birthdate__c);
            }
        } else {
            arrOfPairs.push("FirstName", zData.X_ZPAPER__FirstName__c); //X_ZPAPER__FirstName__c //ERS190803 TODO get cleaner #61272
            arrOfPairs.push("LastName", zData.X_ZPAPER__LastName__c);
            if (zData.X_ZPAPER__Birthdate__c) {
                arrOfPairs.push("Birthdate", zData.X_ZPAPER__Birthdate__c);
            }
        }
        var attachLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
        zData.patientId=zData.clientPatient(doc,arrOfPairs, attachLabel);
        alert("Created Patient with ID: " + zData.patientId);
        if (zData.patientId == "null" || zData.patientId == "NEW") zData.patientId=null;
        else { //ERS190730 #61272 leverage the new record
            if (attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
            alert("@@@@@@@ NEW PATIENT CREATED WITH ID: " + zData.patientId); //ERS190802 zData.contactId
            // clear out the "New Patient" fields
            if (1===1) { //ERS190811 #61570 commented out so that patient info is available for DE variables in zippi
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__FirstName__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__LastName__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Phone__c" + dq + ").val(" + dq + "" + dq + "); ");            
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c_readable" + dq + ").val(" + dq + "NONE" + dq + "); ");
            }
            // set the Patient lookup fields
            //ERS190803 TODO handle ZPAPER__ relationships //ERS190811 double up for safety
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c" + dq + ").val(" + dq + zData.patientId + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__PatientAccount__c" + dq + ").val(" + dq + zData.patientId + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__PatientAccount__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
        }
    } else {
        //if (zData.X_ZPAPER__faxType__c && ("CONS" === zData.X_ZPAPER__faxType__c
         //   || "ENRL" ===zData.X_ZPAPER__faxType__c ||
         //  "MEDO" === zData.X_ZPAPER__faxType__c)) { //ERS19109 #64921 TODO many journey best proctice
            alert("@@@@ attaching to existing Patient: " + zData.patientId);
            if (zData.patientType != "Account") { //ERS190730 lookup the data TODO person account?
                var contactFlds = getSFFields(doc, zData.patientType, "FirstName,LastName,Birthdate", null, zData.patientId);
                alert("@@@@ attaching to existing contactFlds: " + contactFlds);
                zData.X_ZPAPER__FirstName__c = patientFirstName = X(doc, "FirstName", contactFlds); //PV191006 update the child stack
                zData.X_ZPAPER__LastName__c = patientLastName = X(doc, "LastName", contactFlds);
                zData.X_ZPAPER__Birthdate__c=patientDOB = X(doc, "Birthdate", contactFlds);
            } else if (zData.patientType === "Account") { //ERS190730 lookup the data TODO person account?
                var contactFlds = getSFFields(doc, zData.patientType, "Name", null, zData.patientId);
                alert("@@@@ attaching to existing AccountFlds: " + contactFlds);
                zData.X_ZPAPER__FirstName__c = patientFirstName = X(doc, "Name", contactFlds).split(" ")[0]; //ERS190803 TODO find a better way
                zData.X_ZPAPER__LastName__c = patientLastName = X(doc, "Name", contactFlds).split(" ")[1];
                //zData.X_ZPAPER__Birthdate__c=patientDOB = X(doc, "PersonBirthdate", contactFlds);

            }
            //PV191008 updated attachLabel on child stack
            attachLabel=zData.clientFile(doc,"Indexed");
            attach(doc, attachLabel, zData.patientId);
      // }
    }
    if (zData.patientId && attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
//}
alert("@@@@ AFTER PATIENT: Child zStack Snippet attached to: " + attachPath);

var attachLabel=zData.clientFile(doc,"Indexed"); //"Indexed " + formatNow;
alert("ERS190624 attachLabel="+attachLabel);


/* Attach the split document to Lead record if required */ //ERS190619
// TODO ERS190624 flip the if logic
if (doc.wddata.indexOf("X_ZPAPER__ReferralLead__c")>-1) { //ERS190803 TODO rethink
    if (!leadId || 0 === leadId.length) {
        alert("@@@@ creating new Lead");
        arrOfPairs = [];
        leadId=zData.clientLead(doc,arrOfPairs);
        alert("Created Lead with ID: " + leadId);
        if (leadId == "null" || leadId == "NEW") leadId=null;
    } else {
        if (zData.attachRecords.indexOf("Lead")>-1) {
            alert("@@@@ attaching to existing Lead: " + leadId);
            attach(doc, attachLabel, leadId);
        }
    }
    if (leadId && attachPath.indexOf(leadId)==-1) attachPath+=","+leadId;
}
alert("@@@@ AFTER LEAD: Child zStack Snippet attached to: " + X(doc, "X_attachedTo"));


//ERS190620 use a setting to determine which lookups we attach to
/* Attach the split document to Case record if required */ //ERS190619
//if (doc.wddata.indexOf("X_ZPAPER__Case__c")>-1) {
  if(1===1){  
    alert("ERS190624 need Case");
    if (zData.caseId) {        
        if (zData.attachRecords.indexOf("Case")>-1) {
            alert("@@@@ attaching to existing Case: " + zData.caseId);
            attachLabel=zData.clientFile(doc,"Indexed");
            attach(doc, attachLabel, zData.caseId);
        }
    }
    alert("ERS190624.78 have a case?");
    if (zData.caseId && attachPath.indexOf(zData.caseId)==-1) attachPath+=","+zData.caseId;
}

alert("@@@@ AFTER CASE: Child zStack Snippet attached to: " + X(doc, "X_attachedTo"));


//PV191022 create prescription
var stackFlds = getSFFields(doc, "ZPAPER__zStack__c", "ZPAPER__latestFax__c", null, sfStackId);
zData.X_ZPAPER__latestFax__c =  X(doc, "ZPAPER__latestFax__c", stackFlds); //PV190926 update the child stack
if( zData.X_Prescription__c){
    alert("@@@@ attaching to existing Prescription: " + zData.X_Prescription__c);
    attachLabel=zData.clientFile(doc,"Indexed");
    attach(doc, attachLabel, zData.X_Prescription__c);
}

if( !zData.X_Prescription__c && zData.X_ZPAPER__faxType__c &&"RX" === zData.X_ZPAPER__faxType__c ){ //ERS191109 #64921 TODO many journeys
    alert("@@@@ Creating  Prescription__c with fax Type : " + zData.X_ZPAPER__faxType__c);
    arrOfPairs = [];
    arrOfPairs.push("Core_Date_of_Prescription_Received__c",zData.X_ZPAPER__latestFax__c);
    arrOfPairs.push("Core_ProductPrescribed__c",zData.X_ZPAPER__Classification__c);
    arrOfPairs.push("zPaper_receivedId__c", doc.dbID);
    //arrOfPairs.push("Core_Patient__c",zData.patientId);
    zData.X_Prescription__c = zData.clientRecordType(doc,"Core_Prescription__c",arrOfPairs,"Index");
    alert("@@@@ Create Prescription__c with ID: " + zData.X_Prescription__c);
    attachLabel=zData.clientFile(doc,"Indexed");
    //attach(doc, attachLabel, zData.X_Prescription__c);
    zData.PrescriptionName = getSFField(doc, "Core_Prescription__c", "Name", null, zData.X_Prescription__c); //PV191022 //ERS191109 clientIndex?
    addPostExecutionScript(doc, " $(" + dq + "#Prescription__c" + dq + ").val(" + dq + zData.X_Prescription__c + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#Prescription__c_Name" + dq + ").val(" + dq + zData.PrescriptionName + dq + "); ");
     
}

//COMDR
//if( !zData.caseId && ("COMDR" === zData.X_ZPAPER__faxType__c
//     || "MEDC"=== zData.X_ZPAPER__faxType__c || "LAB"=== zData.X_ZPAPER__faxType__c
//     || "INJR"===zData.X_ZPAPER__faxType__c)){
//CRN191114 According to the Abbvie stories, all docTypes except "Consent Forms" need to have a Case created if one isn't already selected
if(!zData.caseId && "CONS" !== zData.X_ZPAPER__faxType__c){
    arrOfPairs = [];
    arrOfPairs.push("RecordTypeId","0121i000000hQo7AAE");               // CRN191114 Always use CarePlan Record Type?
    arrOfPairs.push("Core_Brand__c",zData.X_ZPAPER__Classification__c);
    if(zData.programName === "Abbvie OneCRM - Canada"){
        arrOfPairs.push("Core_CountryCode__c","CA");
    }    
   
    zData.caseId = zData.clientRecordType(doc,"Case",arrOfPairs,"Index");
    zData.caseNumber = getSFField(doc, "Case", "CaseNumber", null, zData.caseId); //PV191022
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c" + dq + ").val(" + dq + zData.caseId + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c_CaseNumber" + dq + ").val(" + dq + zData.caseNumber + dq + "); "); //PV190929 updated case number in lookup
    zData.X_Clinical_Services_Record_Type__c = X(doc, "X_Clinical_Services_Record_Type__c");

/*
CRN191113 Moved below where the docType logic isn't so convoluted    
    if("LAB"=== zData.X_ZPAPER__faxType__c || "INJR"===zData.X_ZPAPER__faxType__c
       || "MEDC" === zData.X_ZPAPER__faxType__c){
      arrOfPairs = [];
      if("Lab Tests"===zData.X_Clinical_Services_Record_Type__c){
        arrOfPairs.push("Clinical_Services_Record_Type__c","0125E000000K24GQAS");
      }
      if("injection Training"===zData.X_Clinical_Services_Record_Type__c){
         
        arrOfPairs.push("Clinical_Services_Record_Type__c","0125E000000K24LQAS");
      }

     //arrOfPairs.push("Service_Requested_date__c",zData.X_Service_Requested_Date__c);
     arrOfPairs.push("Core_Patient__c",zData.patientId);
     if(!zData.X_Clinical_Services__c){
        zData.X_Clinical_Services__c = zData.clientRecordType(doc,"Core_Clinical_Service__c",arrOfPairs,"Index");
     }
     attachLabel=zData.clientFile(doc,"Indexed");
     attach(doc, attachLabel,  zData.X_Clinical_Services__c);
     zData.ClinicalName = getSFField(doc, "Core_Clinical_Service__c", "Name", null, zData.X_Clinical_Services__c); //PV191022
     addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c" + dq + ").val(" + dq + zData.X_Clinical_Services__c + dq + "); ");
     addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c_Name" + dq + ").val(" + dq + zData.ClinicalName + dq + "); ");
    }
    */
}



//OTH
if( !zData.caseId && ("OTH" === zData.X_ZPAPER__faxType__c || "ENRL" === zData.X_ZPAPER__faxType__c
    || "MEDO" === zData.X_ZPAPER__faxType__c || "RX" === zData.X_ZPAPER__faxType__c )){
    arrOfPairs = [];
    arrOfPairs.push("RecordTypeId","0121i000000hQo7AAE");
    arrOfPairs.push("Core_Brand__c",zData.X_ZPAPER__Classification__c);
    if(zData.programName === "Abbvie OneCRM - Canada"){
        arrOfPairs.push("Core_CountryCode__c","CA");
    }    
   
    zData.caseId = zData.clientRecordType(doc,"Case",arrOfPairs,"Index");
    zData.caseNumber = getSFField(doc, "Case", "CaseNumber", null, zData.caseId); //PV191022
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c" + dq + ").val(" + dq + zData.caseId + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c_CaseNumber" + dq + ").val(" + dq + zData.caseNumber + dq + "); "); //PV190929 updated case number in lookup
}

if( zData.X_Reported_Outcome__c){
    alert("@@@@ attaching to existing Outcome: " + zData.X_Reported_Outcome__c);
    attachLabel=zData.clientFile(doc,"Indexed");
    attach(doc, attachLabel, zData.X_Reported_Outcome__c);
}



arrOfPairs = [];
if (zData.docType) { arrOfPairs.push("ZPAPER__faxType__c", zData.docType);  } //ERS190810 PV190808 #51670
if (zData.providerId) {
    arrOfPairs.push("ZPAPER__Provider__c", zData.providerId);
    if (attachPath.indexOf(zData.providerId)==-1) attachPath+=","+zData.providerId;
}
alert("ERS190812.200 zData.patientId="+zData.patientId); //ERS190812 #61511
if (zData.patientId) {
    if (zData.patientId.indexOf("003")===0) arrOfPairs.push("ZPAPER__Patient__c", zData.patientId);
    if (zData.patientId.indexOf("001")===0) arrOfPairs.push("ZPAPER__PatientAccount__c", zData.patientId);
    if (zData.patientId.indexOf("00Q")===0) arrOfPairs.push("ZPAPER__ReferralLead__c", zData.patientId); //ERS190802 Lead
    if (attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
    if (1===1) { //ERS190810 PV190808 data entry for next split
        if (zData.X_ZPAPER__FirstName__c) { arrOfPairs.push("ZPAPER__FirstName__c", zData.X_ZPAPER__FirstName__c); }
        if (zData.X_ZPAPER__LastName__c) { arrOfPairs.push("ZPAPER__LastName__c", zData.X_ZPAPER__LastName__c); }  
        if (zData.X_ZPAPER__Birthdate__c) { arrOfPairs.push("ZPAPER__Birthdate__c", zData.X_ZPAPER__Birthdate__c); }
        if (zData.X_ZPAPER__Status__c) {arrOfPairs.push(zp+"Status__c", "Completed"); } //PV191023 updateing status
    }
}
if (zData.caseId) {
    arrOfPairs.push("ZPAPER__Case__c", zData.caseId);
    if (attachPath.indexOf(zData.caseId)==-1) attachPath+=","+zData.caseId;
}
 alert("@@@@ zData.contactId = " + zData.contactId);
if (zData.contactId && zData.contactId.startsWith("003")) {
   
    arrOfPairs.push("ZPAPER__Patient__c", zData.contactId);
}
if (zData.leadId) {
    arrOfPairs.push("ZPAPER__ReferralLead__c", zData.leadId);
    if (attachPath.indexOf(zData.leadId)==-1) attachPath+=","+zData.leadId;
}
if (zData.referralId) {
    arrOfPairs.push("ZPAPER__Referral__c", zData.referralId);
    if (attachPath.indexOf(zData.referralId)==-1) attachPath+=","+zData.referralId;
}
if (zData.X_ZPAPER__Phone__c) { //PV191006 UPDATED FOR PHONE
    arrOfPairs.push("ZPAPER__Phone__c", zData.X_ZPAPER__Phone__c);
   
}
var specialAuthId = X(doc, "X_Special_Authorization__c");
alert("@@@ zData.X_Special_Authorization__c " + specialAuthId);
var authDocType = X(doc, "ZPAPER__faxType__c");
if (specialAuthId) {
    arrOfPairs.push("Special_Authorization__c", specialAuthId);
    //PV191113 If we have a Special Authorization, attach this document to it
    var specialLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    attach(doc, specialLabel, specialAuthId);
}
else if ("SA" === zData.X_ZPAPER__faxType__c) { 
    var authArrOfPairs = [];
    var authLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    authArrOfPairs.push("ZPAPER__faxType__c", zData.docType, "Member_Plan__c", zData.X_Member_Plan__c , "Clinical_Services__c", zData.X_Clinical_Services__c ); 
    var authId = createAndAttach(doc, "CarePreauth", authLabel, authArrOfPairs);
    if (!authId.contains("ERROR")) {
        var authName = getSFField(doc, "CarePreauth", "Name", null, authId);
        arrOfPairs.push("Special_Authorization__c", Special_Authorization__c_Name);
        addPostExecutionScript(doc, " $(" + dq + "#Special_Authorization__c" + dq + ").val(" + dq + authId + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Special_Authorization__c_Name" + dq + ").val(" + dq + authName + dq + "); ");
    }
}

//CRN191114 Handle any passed-in physician (Should this be only for COMDR: Communication from Physician?)
alert("@@@@ zData.X_Physician__c = " + zData.X_Physician__c);
alert("@@@@ X_Physician__c = " + X(doc, "X_Physician__c"));
if (X(doc, "X_Physician__c")) {
    zData.X_Physician__c = X(doc, "X_Physician__c");
    alert("@@@@ zData.X_Physician__c now = " + zData.X_Physician__c);
    arrOfPairs.push("Physician__c", zData.X_Physician__c);
    var physicianLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    alert("@@@ Attaching to Physician__c with Id: " + zData.X_Physician__c);
    attach(doc, physicianLabel, zData.X_Physician__c);
}

//PV191008 updated new fields
if(zData.X_ZPAPER__Classification__c) arrOfPairs.push("ZPAPER__Classification__c",zData.X_ZPAPER__Classification__c);
if( zData.X_ZPAPER__Priority__c) arrOfPairs.push("ZPAPER__Priority__c",zData.X_ZPAPER__Priority__c);
if( zData.X_Sub_Category__c )  arrOfPairs.push("Sub_Category__c",zData.X_Sub_Category__c);
if( zData.X_ZPAPER__faxType__c)  arrOfPairs.push("ZPAPER__faxType__c",zData.X_ZPAPER__faxType__c);
if( zData.X_Prescription__c )  arrOfPairs.push("Prescription__c",zData.X_Prescription__c);
if( zData.X_Member_Plan__c )  arrOfPairs.push("Member_Plan__c",zData.X_Member_Plan__c);
if( zData.X_Coverage_Benefit__c )  arrOfPairs.push("Coverage_Benefit__c",zData.X_Coverage_Benefit__c);
if( zData.X_Clinical_Services__c ) {
    arrOfPairs.push("Clinical_Services__c",zData.X_Clinical_Services__c);
    //PV191113 If we have a Special Authorization, attach this document to it
    var clinicalLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    attach(doc, clinicalLabel, zData.X_Clinical_Services__c);
}
else if (("LAB"=== zData.X_ZPAPER__faxType__c || "INJR"===zData.X_ZPAPER__faxType__c
       || "MEDC" === zData.X_ZPAPER__faxType__c) && X(doc, "X_Service_Requested_Date__c")) {        //CRN191113 Create new Clinical Services record if DocType is MEDC and the Service Requested Date is filled in
    var clinicalSvcArrOfPairs = [];
    var clinicalSvcLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    clinicalSvcArrOfPairs.push("Core_Patient__c", zData.patientId); 
    if("Lab Tests"===zData.X_Clinical_Services_Record_Type__c){
        arrOfPairs.push("Clinical_Services_Record_Type__c","0125E000000K24GQAS");
    }
    if("Injection Training"===zData.X_Clinical_Services_Record_Type__c){
        clinicalSvcArrOfPairs.push("Clinical_Services_Record_Type__c","0125E000000K24LQAS");
    }
    var clinicalSvcId = createAndAttach(doc, "Core_Clinical_Service__c", clinicalSvcLabel, clinicalSvcArrOfPairs);
    if (!clinicalSvcId.contains("ERROR")) {
        zData.X_Clinical_Services__c = clinicalSvcId;
        zData.ClinicalName = getSFField(doc, "Core_Clinical_Service__c", "Name", null, zData.X_Clinical_Services__c); //PV191022
        addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c" + dq + ").val(" + dq + zData.X_Clinical_Services__c + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c_Name" + dq + ").val(" + dq + zData.ClinicalName + dq + "); ");
        arrOfPairs.push("Clinical_Services__c", zData.X_Clinical_Services__c);
    }
}
if( zData.X_Service_Requested_Date__c )  arrOfPairs.push("Service_Requested_Date__c",zData.X_Service_Requested_Date__c);
if( zData.X_Reported_Outcome__c )  arrOfPairs.push("Reported_Outcome__c",zData.X_Reported_Outcome__c);
if( zData.X_Assessment_Type__c )  arrOfPairs.push("Assessment_Type__c",zData.X_Assessment_Type__c);
if( zData.X_Outcome_Type__c )  arrOfPairs.push("Outcome_Type__c",zData.X_Outcome_Type__c);
if(zData.X_Product_Described__c) arrOfPairs.push("Product_Described__c",zData.X_Product_Described__c);
if(zData.X_ZPAPER__latestFax__c) arrOfPairs.push("ZPAPER__latestFax__c",zData.X_ZPAPER__latestFax__c);
//ERS190814 just the child #61511 updateSFRecord(doc, zData.zps, sfStackId, arrOfPairs);
//let the docSet do the work attach(doc,attachLabel, sfStackId);
//var r=updateSFRecord(doc,"ZPAPER__zStack__c",sfStackId,["ZPAPER__receivedId__c",zData.zParentId]); //ERS190814 #61511 override the save.jsp workflows
alert("@@@@ updated and attached to zStack Record, id = " + sfStackId + "?="+zData.getStackId(doc)+" data="+arrOfPairs);

var childStackId=zData.clientChildStack(doc,arrOfPairs,sfStackId); //ERS190810 create child stack for split ERS190811 clientChildStack
if (childStackId) {attachPath+=","+sfStackId+","+childStackId; attachPath=attachPath.replace("/,?","/"); } //ERS190811 #61570 clean up //parent stack too
arrOfPairs=[];//PV191023 Everytime child will attach to that particular zStack
arrOfPairs.push("X_sfStackId",childStackId);
updateDB(doc,arrOfPairs);
/* Move the split document to its processing folder */
alert("@@@@@@ Moving the indexed pages document into next processing folder: " + nextFolder);
//ERS190731 #61272 moveDocument(doc,"",nextFolder);
//ERS190731 #61272 reloadByBATES(doc, nextFolder); //ERS170413 #35291
/* Place the split document into the stack folder */
alert("@@@@@@ Moving the indexed pages document into the final stack folder: " + stackFolder);
moveDocument(doc,"",stackFolder);
unlockDocument(doc);
arrOfPairs = zData.addStage(doc,arrOfPairs,zData.stage);
var pageCount = zData.countPages(doc,pageRange);
alert("@@@@ pageCount = " + pageCount +" were "+ zData.stage);
arrOfPairs.push("X_pages",pageCount);
arrOfPairs.push("X_count",pageCount); //PV191028 updated for stack complete to use exact pages
arrOfPairs.push("db-pages",pageCount);
//ERS190620 arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + companyCode + " - " + stackId);
//arrOfPairs.push("X_attachedTo",attachPath); //CRN191028 We don't need to update the X_attachedTo because it is being set correctly during each attach. Besides, attachPath holds the parent's massaged X_attachedTo which we don't want. //ERS170628
updateDB(doc,arrOfPairs);

//PV191029 Add "Indexed" to the "Received" X_reviews added in client library above.
var origXReviews = X(doc, "X_reviews");
var now0 = getCurDateAndTime(doc);//Pv191029 check docset checkbox
arrOfPairs = [];
arrOfPairs.push("X_reviews", origXReviews + "Indexed by agent at " + now0 + "<br/>");
updateDB(doc, arrOfPairs);

track(doc, "Doc Indexed", "Document with Id: " + doc.dbID, pageCount);
addPostExecutionScript(doc, "nextPage(~ready~);updateDEStatus(~indexed:" + pageRange + "~);");

/* end of rule */
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
dmFyIERFX1BBTkVMX0ZPUk1fMkEgICAgPSAiQ2FuYWRhX1ByaW9yaXR5X0RhdGEyX1dlYl9Gb3JtIjsNCnZhciBERV9QQU5FTF9GT1JNXzJCICAgID0gIk9uZV9DUk1fQ2FuYWRhX0luZGV4X0RhdGEyX1dlYl9Gb3JtIjsNCg0KLyoNCnZhciBmb3JtMkJWYWxpZGF0aW9ucyA9IHsNCiAgICAiT1RIIjogew0KICAgICAgICAicmVxRmllbGRzIjogWw0KICAgICAgICAgICAgeyJuYW1lIjogIiIsICJsYWJlbCI6ICIifQ0KICAgICAgICBdDQogICAgfSwNCiAgICAiTUVEQyI6IG51bGwsDQogICAgIkxBQiI6IG51bGwsDQogICAgIklOSlIiOiBudWxsDQp9DQoqLw0KLy8gV2UnbGwgZmlsbCB0aGlzIGluIHdpdGggYSByZXFGaWVsZHMgbWVtYmVyIGFzIHRoZSBleGFtcGxlIGFib3ZlDQp2YXIgZm9ybTJCVmFsaWRhdGlvbnMgPSB7DQogICAgIk9USCI6IG51bGwsDQogICAgIkVOUkwiOiBudWxsLA0KICAgICJNRURPIjogbnVsbCwNCiAgICAiQ09OUyI6IG51bGwsDQogICAgIkNPTURSIjogbnVsbCwNCiAgICAiU0EiOiBudWxsLA0KICAgICJDQSI6IG51bGwsDQogICAgIkNPUEFZIjogbnVsbCwNCiAgICAiTUVEQyI6IG51bGwsDQogICAgIkxBQiI6IG51bGwsDQogICAgIklOSlIiOiBudWxsDQp9DQoNClN0cmluZy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGFwcGVuZFN0cikgew0KICAgIHJldHVybiBhcHBlbmRTdHIgPyB0aGlzICsgKHRoaXMubGVuZ3RoID4gMCA/ICIsICIgOiAiIikgKyBhcHBlbmRTdHIgOiB0aGlzOw0KfTsNCg0KZnVuY3Rpb24gZG9WYWxpZGF0aW9uKCkgew0KICAgIGRlYnVnZ2VyOw0KICAgIGNvbnNvbGUubG9nKCJDdXJyZW50IERFIFBhbmVsID0gIiArIF9jdXJERVBhbmVsKTsNCiAgICAvL0NSTjE5MTExNCBGaXJzdCBjbGVhciB0aGUgc3R5bGVzIG9mIGFsbCBpbnB1dCBmaWVsZHMgYW5kIGdhdGhlciBmaWVsZCB2YWx1ZXMNCiAgICB2YXIgZmllbGRzID0ge307DQogICAgJCgnLmJpZ0RhdGFFbnRyeScpLmVhY2goZnVuY3Rpb24oKSB7DQogICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7DQogICAgICAgIGZpZWxkc1t0aGlzLm5hbWVdID0gJHRoaXMudmFsKCk7DQogICAgICAgIGlmICgnaGlkZGVuJyAhPSAkdGhpcy5hdHRyKCd0eXBlJykpIHsNCiAgICAgICAgICAgICR0aGlzLmNzcygnYm9yZGVyJywnbWVkaXVtIG5vbmUnKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KICAgIA0KICAgIHZhciByZXFCdWZmZXIgPSAiIjsNCiAgICB2YXIgZG9jVHlwZSA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fZmF4VHlwZV9fYyJdJykudmFsKCk7DQogICAgDQogICAgaWYgKERFX1BBTkVMX0ZPUk1fMkEgPT09IF9jdXJERVBhbmVsKSB7DQogICAgICAgIC8vIFBhbmVsIEEgVmFsaWRhdGlvbnMgSGVyZQ0KICAgIH0NCiAgICBlbHNlIGlmIChERV9QQU5FTF9GT1JNXzJCID09PSBjdXJERVBhbmVsKSB7DQogICAgICAgIC8vIFBhbmVsIEIgVmFsaWRhdGlvbnMgSGVyZQ0KICAgICAgICAvLyBUZXN0IHRoZSBmaWVsZHMgdGhhdCBBTFdBWVMgcmVxdWlyZWQNCiAgICAgICAgcmVxQnVmZmVyID0gdmFsaWRhdGUyQkFsd2F5c1JlcXVpcmVkRmllbGRzKGZpZWxkcywgcmVxQnVmZmVyKTsNCiAgICAgICAgLy8gSWYgY3JlYXRpbmcgbmV3IENsaW5pY2FsIFNlcnZpY2UsIENsaW5pY2FsIFNlcnZpY2UgUmVjb3JkIFR5cGUgaXMgcmVxdWlyZWQuDQogICAgICAgIGlmICgiTUVEQyIgPT09IGRvY1R5cGUgfHwgIklOSlIiID09PSBkb2NUeXBlIHx8ICJMQUIiID09PSBkb2NUeXBlKSB7DQogICAgICAgICAgICByZXFCdWZmZXIgPSB2YWxpZGF0ZU1lZGljaWFsQ2xhcmlmaWNhdGlvbk9ySW5qZWN0aW9uUmVwb3J0KGZpZWxkcywgcmVxQnVmZmVyKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIHZhciByZXFGaWVsZHNPYmogPSBmb3JtMkJWYWxpZGF0aW9uc1tkb2NUeXBlXTsNCiAgICAgICAgICAgIHZhciByZXFGaWVsZHMgPSByZXFGaWVsZHNPYmogPyByZXFGaWVsZHNPYmoucmVxRmllbGRzIDogbnVsbDsNCiAgICAgICAgICAgIGlmIChyZXFGaWVsZHMpIHsNCiAgICAgICAgICAgICAgICByZXFCdWZmZXIgPSB2YWxpZGF0ZUZvckRvY3VtZW50VHlwZShyZXFGaWVsZHMsIGZpZWxkcywgcmVxQnVmZmVyKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKHJlcUJ1ZmZlci5sZW5ndGggPiAwKSB7DQogICAgICAgIGFsZXJ0KCJFUlJPUjogVGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIHJlcXVpcmVkOiAiICsgcmVxQnVmZmVyKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlOyAgIC8vb25lIG9yIG1vcmUgZmllbGQgaXMgbWlzc2luZywgZG9uJ3Qgc2VuZCB0byB0aGUgcnVsZXMgZW5naW5lDQogICAgfQ0KICAgIHJldHVybiB0cnVlOyAgICAgICAgLy9BbGwgcmVxdWlyZWQgZmllbGRzIGhhdmUgYmVlbiBzdXBwbGllZCwgbGV0IHRoZSBydWxlcyBlbmdpbmUgYmUgbm90aWZpZWQNCn0NCg0KZnVuY3Rpb24gaXNCbGFuayh2YWwpIHsNCiAgICByZXR1cm4gIXZhbCB8fCAiTk9ORSIgPT09IHZhbCB8fCAiRE9OT1RfU0FWRSIgPT09IHZhbDsNCn0NCg0KZnVuY3Rpb24gaXNOb3RCbGFuayh2YWwpIHsNCiAgICByZXR1cm4gdmFsICYmICJOT05FIiAhPT0gdmFsICYmICJET05PVF9TQVZFIiAhPT0gdmFsOw0KfQ0KDQpmdW5jdGlvbiBhcHBlbmRUb0J1ZmZlcihidWZmZXIsIHN0cikgew0KICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkgeyBidWZmZXIgKz0gIiwgIjsgfQ0KICAgIGJ1ZmZlciArPSBzdHI7DQogICAgcmV0dXJuIGJ1ZmZlcjsNCn0NCg0KZnVuY3Rpb24gbWFya01pc3NpbmcobmFtZSwgaWQpIHsNCiAgICB2YXIgJGVsZSA9IG5hbWUgPyAkKCdbbmFtZT0iJyArIG5hbWUgKyAnIl0nKSA6ICQoJyMnICsgaWQpOw0KICAgICRlbGUuY3NzKCdib3JkZXInLCczcHggc29saWQgcmVkJyk7DQp9DQoNCi8qKg0KICogUmVxdWlyZWQgZmllbGRzIGZvciAyQiBGb3JtczogQ2xhc3NpZmljYXRpb24sIFByaW9yaXR5LCBQYXRpZW50LCBEb2N1bWVudCBUeXBlLCBhbmQgU3ViLUNhdGVnb3J5DQogKi8NCmZ1bmN0aW9uIHZhbGlkYXRlMkJBbHdheXNSZXF1aXJlZEZpZWxkcyhmaWVsZHMsIHJlcUJ1ZmZlcikgew0KICAgIGlmIChpc0JsYW5rKGZpZWxkc1siWF9aUEFQRVJfX0NsYXNzaWZpY2F0aW9uX19jIl0pKSB7DQogICAgICAgIG1hcmtNaXNzaW5nKCJYX1pQQVBFUl9fQ2xhc3NpZmljYXRpb25fX2MiKTsNCiAgICAgICAgcmVxQnVmZmVyID0gcmVxQnVmZmVyLmFwcGVuZCgiQ2xhc3NpZmljYXRpb24iKTsNCiAgICB9DQogICAgaWYgKGlzQmxhbmsoZmllbGRzWyJYX1pQQVBFUl9fUHJpb3JpdHlfX2MiXSkpIHsNCiAgICAgICAgbWFya01pc3NpbmcoIlhfWlBBUEVSX19Qcmlvcml0eV9fYyIpOw0KICAgICAgICByZXFCdWZmZXIgPSByZXFCdWZmZXIuYXBwZW5kKCJQcmlvcml0eSIpOw0KICAgIH0gICAgDQogICAgaWYgKGlzQmxhbmsoZmllbGRzWyJYX1pQQVBFUl9fUGF0aWVudEFjY291bnRfX2MiXSkpIHsNCiAgICAgICAgbWFya01pc3NpbmcoIlhfWlBBUEVSX19QYXRpZW50QWNjb3VudF9fci5OYW1lIik7DQogICAgICAgIHJlcUJ1ZmZlciA9IHJlcUJ1ZmZlci5hcHBlbmQoIlBhdGllbnQiKTsNCiAgICB9ICAgIA0KICAgIGlmIChpc0JsYW5rKGZpZWxkc1siWF9aUEFQRVJfX2ZheFR5cGVfX2MiXSkpIHsNCiAgICAgICAgbWFya01pc3NpbmcoIlhfWlBBUEVSX19mYXhUeXBlX19jIik7DQogICAgICAgIHJlcUJ1ZmZlciA9IHJlcUJ1ZmZlci5hcHBlbmQoIkRvY3VtZW50IFR5cGUiKTsNCiAgICB9DQogICAgaWYgKGlzQmxhbmsoZmllbGRzWyJYX1N1Yl9DYXRlZ29yeV9fYyJdKSkgew0KICAgICAgICBtYXJrTWlzc2luZygiWF9TdWJfQ2F0ZWdvcnlfX2MiKTsNCiAgICAgICAgcmVxQnVmZmVyID0gcmVxQnVmZmVyLmFwcGVuZCgiU3ViLUNhdGVnb3J5Iik7DQogICAgfQ0KICAgIHJldHVybiByZXFCdWZmZXI7DQp9DQoNCmZ1bmN0aW9uIHZhbGlkYXRlRm9yRG9jdW1lbnRUeXBlKHJlcUZpZWxkcywgZmllbGRzLCByZXFCdWZmZXIpIHsNCiAgICBmb3IgKHZhciBpIGluIHJlcUZpZWxkcykgew0KICAgICAgICBpZiAocmVxRmllbGRzLmhhc093blByb3BlcnR5KGkpKSB7DQogICAgICAgICAgICB2YXIgcmVxRmllbGQgPSByZXFGaWVsZHNbaV07DQogICAgICAgICAgICBpZiAoaXNCbGFuayhmaWVsZHNbcmVxRmllbGQubmFtZV0pKSB7DQogICAgICAgICAgICAgICAgbWFya01pc3NpbmcobnVsbCwgcmVxRmllbGQubGFiZWwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiByZXFCdWZmZXI7DQp9DQoNCi8qKg0KICogVGhlIHZhbGlkYXRpb24gZm9yIHRoaXMgRG9jdW1lbnQgVHlwZSBuZWVkcyB0byBiZSB1bmlxdWUgc2luY2Ugbm90IGFsbCBmaWVsZHMgYXJlIHJlcXVpcmVkLCBqdXN0IGEgY2VydGFpbiBjb21iaW5hdGlvbi4NCiAqLw0KZnVuY3Rpb24gdmFsaWRhdGVNZWRpY2lhbENsYXJpZmljYXRpb25PckluamVjdGlvblJlcG9ydChmaWVsZHMsIHJlcUJ1ZmZlcikgew0KICAgIC8vIEFTTSAtIDIwMTktMTEtMTQgLSBXZSBubyBsb25nZXIgcmVxdWlyZSB0aGUgY2FzZS4gIA0KICAgIC8vIEl0J3MgdGhlIHlvdW5nIGFuZCB0aGUgY2FzZWxlc3MuDQogICAgLy8gUmVxdWlyZWQ6IGxvb2tlZCB1cCBDYXNlDQogICAgLy8gaWYgKGlzQmxhbmsoZmllbGRzWyJYX1pQQVBFUl9fQ2FzZV9fYyJdKSkgew0KICAgIC8vICAgICBtYXJrTWlzc2luZyhudWxsLCAiWlBBUEVSX19DYXNlX19jX0Nhc2VOdW1iZXIiKTsNCiAgICAvLyAgICAgcmVxQnVmZmVyID0gcmVxQnVmZmVyLmFwcGVuZCgiQ2FzZSIpOw0KICAgIC8vIH0NCiAgICAvLyBSZXF1aXJlZDogZWl0aGVyIGxvb2tlZCB1cCBDbGluaWNhbCBTZXJ2aWNlcyBvciBTZXJ2aWNlIFJlcXVlc3RlZCBEYXRlDQogICAgaWYgKGlzQmxhbmsoZmllbGRzWyJYX0NsaW5pY2FsX1NlcnZpY2VzX19jIl0pICYmIChpc0JsYW5rKGZpZWxkc1siWF9TZXJ2aWNlX1JlcXVlc3RlZF9EYXRlX19jIl0pIHx8IGlzQmxhbmsoZmllbGRzWyJYX0NsaW5pY2FsX1NlcnZpY2VzX1JlY29yZF9UeXBlX19jIl0pKSkgew0KICAgICAgICBtYXJrTWlzc2luZyhudWxsLCAiQ2xpbmljYWxfU2VydmljZXNfX2NfTmFtZSIpOw0KICAgICAgICBpZiAoaXNCbGFuayhmaWVsZHNbIlhfU2VydmljZV9SZXF1ZXN0ZWRfRGF0ZV9fYyJdKSkgew0KICAgICAgICAgICAgbWFya01pc3NpbmcobnVsbCwgIlNlcnZpY2VfUmVxdWVzdGVkX0RhdGVfX2NfcmVhZGFibGUiKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNCbGFuayhmaWVsZHNbIlhfQ2xpbmljYWxfU2VydmljZXNfUmVjb3JkX1R5cGVfX2MiXSkpIHsNCiAgICAgICAgICAgIG1hcmtNaXNzaW5nKCJYX0NsaW5pY2FsX1NlcnZpY2VzX1JlY29yZF9UeXBlX19jIik7DQogICAgICAgIH0NCiAgICAgICAgcmVxQnVmZmVyID0gcmVxQnVmZmVyLmFwcGVuZCgiRWl0aGVyIENsaW5pY2FsIFNlcnZpY2VzIG9yIGJvdGggU2VydmljZSBSZXF1ZXN0ZWQgRGF0ZSBhbmQgQ2xpbmljYWwgU2VydmljZXMgUmVjb3JkIFR5cGUiKTsNCiAgICB9DQogICAgcmV0dXJuIHJlcUJ1ZmZlcjsNCn0NCg0KcmV0dXJuIGRvVmFsaWRhdGlvbigpOw0K
//--- RULE VALIDATION CODE - END ---

</script>
