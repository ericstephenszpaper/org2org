<!--
// Name: Index Page
// Committer: cory.newey@zpaper.com
// Update: added debug info
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2020-05-05 19:59:24","active":true,"button":"Index","name":"Index Page","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"Index","operation":"equals"}]},"consequence":{"doit":""},"ordinal":9}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//ASM 2020-01-09 - Fixes field for birthdate
//ERS200412 TODO significant work to move customization into client library

alert("@@@@ Index Rule Fired @@@#");
//ERS190730 #61272 updated button validation in the Actions* Details area

var stackId = X(doc, "X_stack");
if (!stackId || stackId.indexOf("a") !== 0) stackId=zData.getStackId(doc); //ERS190624 HACK?
if (stackId) zData.stackId=stackId; //ERS200204 #68825 much better for client calls
var stackFolder = stackId + "-STACK";
var companyCode = doc.deliveredTo;
zData.stage="Indexed"; //ERS190620

/* Clear the trigger that invoked this rule */
//ERS170909 zData.clearTriggerCondition(doc,"X_buttonAction");
var indexInitialized = X(doc,"X_indexInitialized");
if (!indexInitialized || 0 === indexInitialized.length) {
    stackId = new Date().getTime() + "";
    stackFolder = stackId + "-STACK";
    zData.initializeStack(doc,stackFolder, companyCode, stackId);
}

saveDEPanelValues(doc);             //CRN191118 Save DE Fields to Parent Stack  //ERS200412 TODO into MP
zData.getDataEntryFields(doc);
// Does the user want to attach indexed pages to Case?
//var caseId = X(doc, "X_ZPAPER__Case__c");
//var contactId = X(doc, "X_ZPAPER__Patient__c");
//var patientId=contactId; //TODO
//var providerId = X(doc, "X_ZPAPER__Provider__c");
//var patientFirstName = X(doc, "X_ZPAPER__FirstName__c");
//var patientLastName = X(doc, "X_ZPAPER__LastName__c");
//var patientDOB = X(doc, "X_ZPAPER__Birthdate__c");

//zData.clientCopyFromDoc(doc); //ERS200309 splits fragment zippi zData
if (!zData.patientId && X(doc,"X_patientId")) zData.patientId=X(doc,"X_patientId");
if (!zData.patientId && X(doc,"X_ZPAPER__Patient__c")) zData.patientId=X(doc,"X_ZPAPER__Patient__c"); //ERS200205 keep track of IDs better
if (!zData.patientId && X(doc,"X_ZPAPER__PatientAccount__c")) zData.patientId=X(doc,"X_ZPAPER__PatientAccount__c"); //ERS200308 #70273

if (!zData.providerId && X(doc,"X_ZPAPER__Provider__c")) zData.providerId=X(doc,"X_ZPAPER__Provider__c"); //ERS200308 #70273
if (!zData.providerId && X(doc,"X_ProviderContact__c")) zData.providerId=X(doc,"X_ProviderContact__c"); //ERS200308 #70273 TODO zp+
if (!zData.providerId && X(doc,"X_ZPAPER__ProviderContact__c")) zData.providerId=X(doc,"X_ZPAPER__ProviderContact__c"); //ERS200308 #70273 TODO zp+
alert("ERS200309.38 providerId="+zData.providerId +" from "+X(doc,"X_ProviderContact__c")
   +" and patientId="+zData.patientId+" from "+X(doc,"X_ZPAPER__PatientAccount__c")); //ERS200309 get the Ids

if (!zData.caseId) zData.caseId=X(doc,"X_ZPAPER__Case__c"); ////ERS200205 zippi changes

// Get the document type (will be used to route to next folder)
//var docType = X(doc, "X_Document_Type__c");
var nextFolder = "20500Triage-S2";              // Other folder is the default
var prevIndexPages = X(doc, "X_indexedPages");
var curIndexPages = X(doc, "X_idxPages");
if (prevIndexPages && prevIndexPages.length > 0 && curIndexPages && curIndexPages.length > 0) {
    prevIndexPages += ",";
}
curIndexPages = prevIndexPages + curIndexPages;
var arrOfPairs = [];
arrOfPairs.push("X_indexedPages", curIndexPages);
//move to after updates arrOfPairs=zData.addStage(doc,arrOfPairs,"Indexed");
updateDB(doc,arrOfPairs);

//var sfStackId=zData.getStackId(doc);
var sfStackId=X(doc,'X_sfStackId');
if(!sfStackId){
  sfStackId=zData.getStackId(doc);
}

alert("@@@@@@ Currently attached to ZPAPER__zStack__c with ID: " + sfStackId);
zData.zParentId=doc.dbID; //ERS190814 to overside the save.jsp workflows

alert("@@@@ Parent zStack Snippet attached to: " + X(doc, "X_attachedTo"));

/* SPLIT OFF NEW SNIPPET HERE */
var pageRange = X(doc,"X_idxPages");
var newId=splitDocumentForIndex(doc, "index", pageRange);

alert("@@@@ AFTER SPLIT: Child zStack Snippet attached to: " + X(doc, "X_attachedTo"));

saveDEPanelValues(doc);             //CRN191118 Also Save DE Fields to Child Stack //ERS200412 TODO into MP

alert("ERS190624 newId="+newId);
//*
/* AFTER THIS POINT, THE DOC WILL HOLD DATA FOR NEW SNIPPET, NOT THE STACK SNIPPET */
//*

/* Attach the split document to a new Case record, if it wasn't passed in and if we are not handling the 2A DE Panel: Canada_Priority_Data2_Web_Form */
//var priority=X(doc,"X_ZPAPER__Priority__c"); //ERS170626
var label0="";
var triageType=doc.docType;
if (!triageType || triageType == "FAX") triageType=X(doc,"X_ZPAPER__faxType__c"); //ERS200205 doc.docType;
zData.docType=triageType; alert("Using ERS200205 docType="+zData.docType); //ERS200205 @68825

var attachPath = X(doc,"X_attachedTo");
zData.attachedToCase =false;
zData.attachedTo = X(doc, "X_Attach_To__c"); //PV191205 updated case creation
    alert("zData.attachedTo========="+zData.attachedTo);
    var attachFaxTypes =["ENRL","MEDO","OTH","COPAY"];
    //if( attachFaxTypes.indexOf(zData.X_ZPAPER__faxType__c) >-1 && (zData.attachedTo === "Care Plan" || zData.attachedTo === "All")){
    if((zData.attachedTo === "Care Plan" || zData.attachedTo === "All")){
      zData.attachedToCase = true;
    }
/* Attach the split document to Patient record if required */ //ERS190619
zData.patientType=XCustomSetting(doc,"ZPAPER__PatientRecord__c"); //ERS190806 ZPAPER__ now in MP
alert("@@@@ zData.patientType ***** "+zData.patientType+" Patient");
alert("@@@ current DE Panel name = " + X(doc, "X_lastDEPanel"));
if (!zData.patientType) zData.patientType="Contact"; //ERS190802 #61272
//if (X(doc,"X_ZPAPER__Patient__c") || zData.X_ZPAPER__LastName__c) { //ERS190803 TODO rethink use X
    var dq = zData.dq = String.fromCharCode(34); //ERS190802 TODO define better in zData
    var patientPhone = X(doc, "X_ZPAPER__Phone__c");
    alert("@@@ patientPhone = " + patientPhone);
    if (!zData.patientId) {
        alert("@@@@ creating new "+zData.patientType+" Patient");
        arrOfPairs = [];
        //ERS190730 #61272 missing the basics
        var p="";
        if ("Account"===zData.patientType) { //ERS190803
            p="Person";
            //arrOfPairs.push("Name", zData.X_ZPAPER__FirstName__c+" "+zData.X_ZPAPER__LastName__c);
            arrOfPairs.push("FirstName", zData.X_ZPAPER__FirstName__c);
            arrOfPairs.push("LastName", zData.X_ZPAPER__LastName__c);
            if (zData.X_ZPAPER__Birthdate__c) {
//                arrOfPairs.push(p+"Birthdate", zData.X_ZPAPER__Birthdate__c);
                arrOfPairs.push("Core_Birth_Date__pc", zData.X_ZPAPER__Birthdate__c); //ASM20200109 - Using the correct field. //CRN200108 abbvie wants birthdate stored in this field, not standard field
            }
            if (patientPhone) { arrOfPairs.push("Phone", patientPhone); }
        } else {
            arrOfPairs.push("FirstName", zData.X_ZPAPER__FirstName__c); //X_ZPAPER__FirstName__c //ERS190803 TODO get cleaner #61272
            arrOfPairs.push("LastName", zData.X_ZPAPER__LastName__c);
            if (zData.X_ZPAPER__Birthdate__c) {
                arrOfPairs.push("Birthdate", zData.X_ZPAPER__Birthdate__c);
            }
            if (patientPhone) { arrOfPairs.push("Phone", patientPhone); }
        }
        var attachLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
        zData.patientId=zData.clientPatient(doc,arrOfPairs, attachLabel);
        alert("Created Patient with ID: " + zData.patientId);
        if (zData.patientId == "null" || zData.patientId == "NEW") zData.patientId=null;
        else { //ERS190730 #61272 leverage the new record
            if (attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
            alert("@@@@@@@ NEW PATIENT CREATED WITH ID: " + zData.patientId); //ERS190802 zData.contactId
            // clear out the "New Patient" fields
            if (1===1) { //ERS190811 #61570 commented out so that patient info is available for DE variables in zippi
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__FirstName__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__LastName__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Phone__c" + dq + ").val(" + dq + "" + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c_readable" + dq + ").val(" + dq + "NONE" + dq + "); ");
            }
            // set the Patient lookup fields
            //ERS190803 TODO handle ZPAPER__ relationships //ERS190811 double up for safety
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c" + dq + ").val(" + dq + zData.patientId + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__PatientAccount__c" + dq + ").val(" + dq + zData.patientId + dq + "); ");
            addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__PatientAccount__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
            //CRN191118 Also save the new values to the child
            var save2DBArrOfPairs = [];
            save2DBArrOfPairs.push("X_ZPAPER__PatientAccount__c", zData.patientId);
            save2DBArrOfPairs.push("X_ZPAPER__PatientAccount__r.Name", zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c);
            updateDB(doc, save2DBArrOfPairs);
        }
    } else {
        //if (zData.X_ZPAPER__faxType__c && ("CONS" === zData.X_ZPAPER__faxType__c
         //   || "ENRL" ===zData.X_ZPAPER__faxType__c ||
         //  "MEDO" === zData.X_ZPAPER__faxType__c)) { //ERS19109 #64921 TODO many journey best proctice
            alert("@@@@ attaching to existing Patient: " + zData.patientId);
            if (zData.patientType != "Account") { //ERS190730 lookup the data TODO person account?
                var contactFlds = getSFFields(doc, zData.patientType, "FirstName,LastName,Birthdate", null, zData.patientId);
                alert("@@@@ attaching to existing contactFlds: " + contactFlds);
                zData.X_ZPAPER__FirstName__c = patientFirstName = X(doc, "FirstName", contactFlds); //PV191006 update the child stack
                zData.X_ZPAPER__LastName__c = patientLastName = X(doc, "LastName", contactFlds);
                zData.X_ZPAPER__Birthdate__c=patientDOB = X(doc, "Birthdate", contactFlds);
            } else if (zData.patientType === "Account") { //ERS190730 lookup the data TODO person account?
                var contactFlds = getSFFields(doc, zData.patientType, "Name", null, zData.patientId);
                alert("@@@@ attaching to existing AccountFlds: " + contactFlds);
                zData.X_ZPAPER__FirstName__c = patientFirstName = X(doc, "Name", contactFlds).split(" ")[0]; //ERS190803 TODO find a better way
                zData.X_ZPAPER__LastName__c = patientLastName = X(doc, "Name", contactFlds).split(" ")[1];
                //zData.X_ZPAPER__Birthdate__c=patientDOB = X(doc, "PersonBirthdate", contactFlds);

            }
            //PV191008 updated attachLabel on child stack
            attachLabel=zData.clientFile(doc,"Indexed");
            if(zData.attachedTo === "Patient" || zData.attachedTo === "All"){
                attach(doc, attachLabel, zData.patientId);
            }
      // }
    }
    if (zData.patientId && attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
//}
alert("@@@@ AFTER PATIENT: Child zStack Snippet attached to: " + attachPath);

var attachLabel=zData.clientFile(doc,"Indexed"); //"Indexed " + formatNow;
alert("ERS190624 attachLabel="+attachLabel);


/* Attach the split document to Lead record if required */ //ERS190619
// TODO ERS190624 flip the if logic
if (doc.wddata.indexOf("X_ZPAPER__ReferralLead__c")>-1) { //ERS190803 TODO rethink
    if (!leadId || 0 === leadId.length) {
        alert("@@@@ creating new Lead");
        arrOfPairs = [];
        leadId=zData.clientLead(doc,arrOfPairs);
        alert("Created Lead with ID: " + leadId);
        if (leadId == "null" || leadId == "NEW") leadId=null;
    } else {
        if (zData.attachRecords.indexOf("Lead")>-1) {
            alert("@@@@ attaching to existing Lead: " + leadId);
            attach(doc, attachLabel, leadId);
        }
    }
    if (leadId && attachPath.indexOf(leadId)==-1) attachPath+=","+leadId;
}
alert("@@@@ AFTER LEAD: Child zStack Snippet attached to: " + X(doc, "X_attachedTo"));


//ERS190620 use a setting to determine which lookups we attach to
/* Attach the split document to Case record if required */ //ERS190619
//if (doc.wddata.indexOf("X_ZPAPER__Case__c")>-1) {
  if(1===1){
    alert("ERS190624 need Case");
    if (zData.caseId) {
        if (zData.attachRecords.indexOf("Case")>-1) {
            alert("@@@@ attaching to existing Case: " + zData.caseId);
            attachLabel=zData.clientFile(doc,"Indexed");
            if(zData.attachedToCase){
                attach(doc, attachLabel, zData.caseId);
            }
        }
    }
    alert("ERS190624.78 have a case?");
    if (zData.caseId && attachPath.indexOf(zData.caseId)==-1) attachPath+=","+zData.caseId;
}

alert("@@@@ AFTER CASE: Child zStack Snippet attached to: " + X(doc, "X_attachedTo"));


//PV191022 create prescription
var stackFlds = getSFFields(doc, "ZPAPER__zStack__c", "ZPAPER__latestFax__c", null, sfStackId);
zData.X_ZPAPER__latestFax__c =  X(doc, "ZPAPER__latestFax__c", stackFlds); //PV190926 update the child stack
if( zData.X_Prescription__c){
    alert("@@@@ attaching to existing Prescription: " + zData.X_Prescription__c);
    attachLabel=zData.clientFile(doc,"Indexed");
    if( zData.attachedTo ==="Prescription" || zData.attachedTo ==="All"){
        attach(doc, attachLabel, zData.X_Prescription__c);
    }
}
if( !zData.X_Prescription__c && zData.X_ZPAPER__faxType__c &&"RX" === zData.X_ZPAPER__faxType__c ) { //ERS191109 #64921 TODO many journeys
    alert("@@@@ Creating  Prescription__c with fax Type : " + zData.X_ZPAPER__faxType__c);
    arrOfPairs = [];
    arrOfPairs.push("Core_Date_of_Prescription_Received__c",zData.X_ZPAPER__latestFax__c);
    arrOfPairs.push("Core_ProductPrescribed__c",zData.X_ZPAPER__Classification__c);
    arrOfPairs.push("Core_CarePlan__c", zData.caseId);
    arrOfPairs.push("Core_Patient__c", zData.patientId);
    if( zData.attachedTo ==="Prescription" || zData.attachedTo ==="All"){
        zData.X_Prescription__c = zData.clientRecordType(doc,"Core_Prescription__c",arrOfPairs,"Index");
    }else{
        zData.X_Prescription__c = zData.clientRecordTypeNoAttach(doc,"Core_Prescription__c",arrOfPairs,"Index");
    }
    //zData.X_Prescription__c = zData.clientRecordType(doc,"Core_Prescription__c",arrOfPairs,"Index");  CRN191213 Don't create the Prescription multiple times
    alert("@@@@ Create Prescription__c with ID: " + zData.X_Prescription__c);
    attachLabel=zData.clientFile(doc,"Indexed");
    //attach(doc, attachLabel, zData.X_Prescription__c);
    zData.PrescriptionName = getSFField(doc, "Core_Prescription__c", "Name", null, zData.X_Prescription__c); //PV191022 //ERS191109 clientIndex?
    addPostExecutionScript(doc, " $(" + dq + "#Prescription__c" + dq + ").val(" + dq + zData.X_Prescription__c + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#Prescription__c_Name" + dq + ").val(" + dq + zData.PrescriptionName + dq + "); ");

}
//CRN191118 If we also have a patient and a Prescription, associate them.
/*
if (zData.patientId && zData.X_Prescription__c) {
    alert("@@@ Associating Prescription: " + zData.X_Prescription__c + " with Patient: " + zData.patientId);
    var scriptArrOfPairs = [];
    scriptArrOfPairs.push("Core_Patient__c", zData.patientId);
    updateSFRecord(doc, "Core_Prescription__c", zData.X_Prescription__c, scriptArrOfPairs);
}
*/

//COMDR
//if( !zData.caseId && ("COMDR" === zData.X_ZPAPER__faxType__c
//     || "MEDC"=== zData.X_ZPAPER__faxType__c || "LAB"=== zData.X_ZPAPER__faxType__c
//     || "INJR"===zData.X_ZPAPER__faxType__c)){
//CRN191114 According to the Abbvie stories, all docTypes except "Consent Forms" need to have a Case created if one isn't already selected
if(!zData.caseId && "CONS" !== zData.X_ZPAPER__faxType__c && 'Canada_Priority_Data2_Web_Form' !== X(doc, "X_lastDEPanel")) {
    arrOfPairs = [];
    arrOfPairs.push("RecordTypeId","0121i000000hQo7AAE");               // CRN191114 Always use CarePlan Record Type?
    arrOfPairs.push("Core_Brand__c",zData.X_ZPAPER__Classification__c);
    if(zData.programName === "Abbvie OneCRM - Canada"){
        arrOfPairs.push("Core_CountryCode__c","CA");
    }
    if (zData.patientId) { arrOfPairs.push("AccountId", zData.patientId); }
    if(zData.attachedToCase){
        zData.caseId = zData.clientRecordType(doc,"Case",arrOfPairs,"Index");
    }else{
        zData.caseId = zData.clientRecordTypeNoAttach(doc,"Case",arrOfPairs,"Index");
    }
    zData.caseNumber = getSFField(doc, "Case", "CaseNumber", null, zData.caseId); //PV191022
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c" + dq + ").val(" + dq + zData.caseId + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c_CaseNumber" + dq + ").val(" + dq + zData.caseNumber + dq + "); "); //PV190929 updated case number in lookup
    zData.X_Clinical_Services_Record_Type__c = X(doc, "X_Clinical_Services_Record_Type__c");

/*
CRN191113 Moved below where the docType logic isn't so convoluted
    if("LAB"=== zData.X_ZPAPER__faxType__c || "INJR"===zData.X_ZPAPER__faxType__c
       || "MEDC" === zData.X_ZPAPER__faxType__c){
      arrOfPairs = [];
      if("Lab Tests"===zData.X_Clinical_Services_Record_Type__c){
        arrOfPairs.push("Clinical_Services_Record_Type__c","0125E000000K24GQAS");
      }
      if("injection Training"===zData.X_Clinical_Services_Record_Type__c){

        arrOfPairs.push("Clinical_Services_Record_Type__c","0125E000000K24LQAS");
      }

     //arrOfPairs.push("Service_Requested_date__c",zData.X_Service_Requested_Date__c);
     //arrOfPairs.push("Core_Patient__c",zData.patientId);
     if(!zData.X_Clinical_Services__c){
        associatedArrOfPairs.push("Core_Care_Plan__c", zData.caseId);
        associatedArrOfPairs.push("Core_Patient__c", zData.patientId);
        zData.X_Clinical_Services__c = zData.clientRecordType(doc,"Core_Clinical_Service__c",arrOfPairs,"Index");
     }
     attachLabel=zData.clientFile(doc,"Indexed");
     attach(doc, attachLabel,  zData.X_Clinical_Services__c);
     zData.ClinicalName = getSFField(doc, "Core_Clinical_Service__c", "Name", null, zData.X_Clinical_Services__c); //PV191022
     addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c" + dq + ").val(" + dq + zData.X_Clinical_Services__c + dq + "); ");
     addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c_Name" + dq + ").val(" + dq + zData.ClinicalName + dq + "); ");
    }
    */
}

//SHR191209 #65535 add Document Link if we have a new Case Id
if (zData.caseId) {
    zData.clientLightningFile(doc,zData.caseId); //ERS200428 move to library #70953
}

//COPAY
if ("COPAY" === zData.X_ZPAPER__faxType__c) {
    arrOfPairs = [];
    arrOfPairs.push("CA_Patient__c",zData.patientId);
    arrOfPairs.push("CA_CarePlanID__c",zData.caseId);
    zData.copayId = zData.clientRecordType(doc,"CA_Copay__c",arrOfPairs,"Index");
}


//OTH
if( !zData.caseId && ("OTH" === zData.X_ZPAPER__faxType__c || "ENRL" === zData.X_ZPAPER__faxType__c
    || "MEDO" === zData.X_ZPAPER__faxType__c || "RX" === zData.X_ZPAPER__faxType__c )){
    if(zData.createCase){
        arrOfPairs = [];
        arrOfPairs.push("RecordTypeId","0121i000000hQo7AAE");
        arrOfPairs.push("Core_Brand__c",zData.X_ZPAPER__Classification__c);
        if(zData.programName === "Abbvie OneCRM - Canada"){
            arrOfPairs.push("Core_CountryCode__c","CA");
        }

        zData.caseId = zData.clientRecordType(doc,"Case",arrOfPairs,"Index");
        zData.caseNumber = getSFField(doc, "Case", "CaseNumber", null, zData.caseId); //PV191022
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c" + dq + ").val(" + dq + zData.caseId + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c_CaseNumber" + dq + ").val(" + dq + zData.caseNumber + dq + "); "); //PV190929 updated case number in lookup
    }
}

if( zData.X_Reported_Outcome__c){
    alert("@@@@ attaching to existing Outcome: " + zData.X_Reported_Outcome__c);
    attachLabel=zData.clientFile(doc,"Indexed");
    if( zData.attachedTo ==="Reported Outcomes" || zData.attachedTo ==="All"){
        attach(doc, attachLabel, zData.X_Reported_Outcome__c);
    }
    //CRN191118 If we also have a Patient and a Reported Outcome, associate them.
    if (zData.patientId) {
        alert("@@@ Associating Reported Cutcome: " + zData.X_Reported_Outcome__c + " with Patient: " + zData.patientId);
        var outcomeArrOfPairs = [];
        outcomeArrOfPairs.push("Core_Account__c", zData.patientId);
        updateSFRecord(doc, "Core_Patient_Reported_Outcomes__c", zData.X_Reported_Outcome__c, outcomeArrOfPairs);
    }
}
else if ("CA" === zData.X_ZPAPER__faxType__c) {
    var outcomeArrOfPairs = [];
    outcomeArrOfPairs.push("Core_Entry_Date__c", getCurDate(doc));
    outcomeArrOfPairs.push("Core_Care_Plan__c", zData.caseId);
    outcomeArrOfPairs.push("Core_Account__c", zData.patientId);
    var assessmentType = X(doc, "X_Assessment_Type__c");
    if (assessmentType && "DONOT_SAVE" !== assessmentType) {
        outcomeArrOfPairs.push("Core_Assessment_Type__c", assessmentType);
    }
    var outcomeType = X(doc, "X_Outcome_Type__c");
    if (outcomeType && "DONOT_SAVE" !== outcomeType) {
        outcomeArrOfPairs.push("Core_Outcome_Type__c", outcomeType);
    }
    //CRN191118 If we also have a Patient and a Reported Outcome, associate them.
    if (zData.patientId) {
        alert("@@@ Associating New Reported Cutcome with Patient: " + zData.patientId);
        outcomeArrOfPairs.push("Core_Account__c", zData.patientId);
    }
    if( zData.attachedTo ==="Reported Outcomes" || zData.attachedTo ==="All"){
        zData.X_Reported_Outcome__c = zData.clientRecordType(doc,"Core_Patient_Reported_Outcomes__c",outcomeArrOfPairs,"Index");
    }else{
        zData.X_Reported_Outcome__c = zData.clientRecordTypeNoAttach(doc,"Core_Patient_Reported_Outcomes__c",outcomeArrOfPairs,"Index");
    }
    var outcomeName = getSFField(doc, "Core_Patient_Reported_Outcomes__c", "Name", null, zData.X_Reported_Outcome__c);
    addPostExecutionScript(doc, " $(" + dq + "#Reported_Outcome__c" + dq + ").val(" + dq + zData.X_Reported_Outcome__c + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#Reported_Outcome__c_Name" + dq + ").val(" + dq + outcomeName + dq + "); ");
}


arrOfPairs = [];
if (zData.docType) { arrOfPairs.push("ZPAPER__faxType__c", zData.docType);  } //ERS190810 PV190808 #51670
if (zData.providerId) {
    arrOfPairs.push("ZPAPER__Provider__c", zData.providerId);
    if (attachPath.indexOf(zData.providerId)==-1) attachPath+=","+zData.providerId;
}
alert("ERS190812.200 zData.patientId="+zData.patientId); //ERS190812 #61511
if (zData.patientId) {
    if (zData.patientId.indexOf("003")===0) arrOfPairs.push("ZPAPER__Patient__c", zData.patientId);
    if (zData.patientId.indexOf("001")===0) arrOfPairs.push("ZPAPER__PatientAccount__c", zData.patientId);
    if (zData.patientId.indexOf("00Q")===0) arrOfPairs.push("ZPAPER__ReferralLead__c", zData.patientId); //ERS190802 Lead
    if (attachPath.indexOf(zData.patientId)==-1) attachPath+=","+zData.patientId;
    if (1===1) { //ERS190810 PV190808 data entry for next split
        if (zData.X_ZPAPER__FirstName__c) { arrOfPairs.push("ZPAPER__FirstName__c", zData.X_ZPAPER__FirstName__c); }
        if (zData.X_ZPAPER__LastName__c) { arrOfPairs.push("ZPAPER__LastName__c", zData.X_ZPAPER__LastName__c); }
        if (zData.X_ZPAPER__Birthdate__c) { arrOfPairs.push("ZPAPER__Birthdate__c", zData.X_ZPAPER__Birthdate__c); }
        if (zData.X_ZPAPER__Status__c) {arrOfPairs.push(zp+"Status__c", "Completed"); } //PV191023 updateing status
    }
}
if (zData.caseId) {
    arrOfPairs.push("ZPAPER__Case__c", zData.caseId);
    if (attachPath.indexOf(zData.caseId)==-1) attachPath+=","+zData.caseId;
}
 alert("@@@@ zData.contactId = " + zData.contactId);
if (zData.contactId && zData.contactId.startsWith("003")) {

    arrOfPairs.push("ZPAPER__Patient__c", zData.contactId);
}
if (zData.leadId) {
    arrOfPairs.push("ZPAPER__ReferralLead__c", zData.leadId);
    if (attachPath.indexOf(zData.leadId)==-1) attachPath+=","+zData.leadId;
}
if (zData.referralId) {
    arrOfPairs.push("ZPAPER__Referral__c", zData.referralId);
    if (attachPath.indexOf(zData.referralId)==-1) attachPath+=","+zData.referralId;
}
if (zData.X_ZPAPER__Phone__c) { //PV191006 UPDATED FOR PHONE
    arrOfPairs.push("ZPAPER__Phone__c", zData.X_ZPAPER__Phone__c);

}
var specialAuthId = X(doc, "X_Special_Authorization__c");
alert("@@@ zData.X_Special_Authorization__c " + specialAuthId);
var authDocType = X(doc, "ZPAPER__faxType__c");
if (specialAuthId) {
    arrOfPairs.push("Special_Authorization__c", specialAuthId);
    //PV191113 If we have a Special Authorization, attach this document to it
    var specialLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    if( zData.attachedTo ==="Special Authorization" || zData.attachedTo ==="All"){
        attach(doc, specialLabel, specialAuthId);
    }
}
else if ("SA" === zData.X_ZPAPER__faxType__c) {
    var authArrOfPairs = [];
    var authLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    authArrOfPairs.push("MemberPlanId", zData.X_Member_Plan__c , "CA_Coverage_Benefit__c", zData.X_Coverage_Benefit__c );
    authArrOfPairs.push("CA_Patient__c", zData.patientId);
    authArrOfPairs.push("Name", "anyValue");
    var specialAuthId ="";
    if( zData.attachedTo ==="Special Authorization" || zData.attachedTo ==="All"){
        specialAuthId = createAndAttach(doc, "CarePreauth", authLabel, authArrOfPairs);
    }else{
        specialAuthId = createSFRecord(doc, "CarePreauth", authLabel, authArrOfPairs);
    }

    if (!specialAuthId.contains("ERROR")) {
        var authName = getSFField(doc, "CarePreauth", "Name", null, specialAuthId);
        arrOfPairs.push("Special_Authorization__c", specialAuthId);
        addPostExecutionScript(doc, " $(" + dq + "#Special_Authorization__c" + dq + ").val(" + dq + specialAuthId + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Special_Authorization__c_Name" + dq + ").val(" + dq + authName + dq + "); ");
    }
}
//CRN191118 If we also have a Patient and a Special Authorization, associate them.
if (zData.patientId && specialAuthId) {
    alert("@@@ Associating Special Authorization: " + specialAuthId + " with Patient: " + zData.patientId);
    var scriptArrOfPairs = [];
    scriptArrOfPairs.push("CA_Patient__c", zData.patientId);
    updateSFRecord(doc, "CarePreauth", specialAuthId, scriptArrOfPairs);
}

//CRN191114 Handle any passed-in physician (Should this be only for COMDR: Communication from Physician?)
alert("@@@@ zData.X_Physician__c = " + zData.X_Physician__c);
alert("@@@@ X_Physician__c = " + X(doc, "X_Physician__c"));
if (X(doc, "X_Physician__c")) {
    zData.X_Physician__c = X(doc, "X_Physician__c");
    alert("@@@@ zData.X_Physician__c now = " + zData.X_Physician__c);
    arrOfPairs.push("Physician__c", zData.X_Physician__c);
    var physicianLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    alert("@@@ Attaching to Physician__c with Id: " + zData.X_Physician__c);
    attach(doc, physicianLabel, zData.X_Physician__c);
}

//PV191008 updated new fields
if(zData.X_ZPAPER__Classification__c) arrOfPairs.push("ZPAPER__Classification__c",zData.X_ZPAPER__Classification__c);
if( zData.X_ZPAPER__Priority__c) {
    if (!zData.X_ZPAPER__faxType__c) {
        arrOfPairs.push("ZPAPER__Priority__c",zData.X_ZPAPER__Priority__c);
    }
    else {
        arrOfPairs.push("ZPAPER__Priority__c", "");
    }
}
//if( zData.X_Sub_Category__c )  arrOfPairs.push("Sub_Category__c",zData.X_Sub_Category__c);
alert("@@@@@ Calling X to pull X_Sub_Category__c => " + X(doc, "X_Sub_Category__c"));
//CRN200504 #71054 -- What the heck? zData doesn't seem to have been initialized
if( X(doc, "X_Sub_Category__c") ) { arrOfPairs.push("Sub_Category__c",X(doc, "X_Sub_Category__c")); }
if( zData.X_ZPAPER__faxType__c)  arrOfPairs.push("ZPAPER__faxType__c",zData.X_ZPAPER__faxType__c);
if( zData.X_Prescription__c )  arrOfPairs.push("Prescription__c",zData.X_Prescription__c);
if( zData.X_Member_Plan__c )  arrOfPairs.push("Member_Plan__c",zData.X_Member_Plan__c);
if( zData.X_Coverage_Benefit__c )  arrOfPairs.push("Coverage_Benefit__c",zData.X_Coverage_Benefit__c);
if( zData.X_Clinical_Services__c ) {
    arrOfPairs.push("Clinical_Services__c",zData.X_Clinical_Services__c);
    //PV191113 If we have a Clinical Services, attach this document to it
    var clinicalLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    if( zData.attachedTo ==="Clinical Services" || zData.attachedTo ==="All"){
        attach(doc, clinicalLabel, zData.X_Clinical_Services__c);
    }
}
else if (("LAB"=== zData.X_ZPAPER__faxType__c || "INJR"===zData.X_ZPAPER__faxType__c
       || "MEDC" === zData.X_ZPAPER__faxType__c) && X(doc, "X_Service_Requested_Date__c")) {        //CRN191113 Create new Clinical Services record if DocType is MEDC and the Service Requested Date is filled in
    var clinicalSvcArrOfPairs = [];
    var clinicalSvcLabel = zData.X_ZPAPER__FirstName__c +" " + zData.X_ZPAPER__LastName__c + " - " + getCurDateAndTime(doc);
    clinicalSvcArrOfPairs.push("Core_Care_Plan__c", zData.caseId);
    clinicalSvcArrOfPairs.push("Core_Patient__c", zData.patientId);
    if("Lab Tests"===zData.X_Clinical_Services_Record_Type__c){
        arrOfPairs.push("Clinical_Services_Record_Type__c","0121i000000Y9DRAA0");
    }
    clinicalSvcArrOfPairs.push("Service_Requested_date__c", X(doc, "X_Service_Requested_Date__c"));
    if("Injection Training"===zData.X_Clinical_Services_Record_Type__c){
        clinicalSvcArrOfPairs.push("Clinical_Services_Record_Type__c","0121i000000Y9DQAA0");
    }
    var clinicalSvcId="";
    if( zData.attachedTo ==="Clinical Services" || zData.attachedTo ==="All"){
        clinicalSvcId = createAndAttach(doc, "Core_Clinical_Service__c", clinicalSvcLabel, clinicalSvcArrOfPairs);
    }else{
        clinicalSvcId = createSFRecord(doc, "Core_Clinical_Service__c", clinicalSvcLabel, clinicalSvcArrOfPairs);
    }

    if (!clinicalSvcId.contains("ERROR")) {
        zData.X_Clinical_Services__c = clinicalSvcId;
        zData.ClinicalName = getSFField(doc, "Core_Clinical_Service__c", "Name", null, zData.X_Clinical_Services__c); //PV191022
        addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c" + dq + ").val(" + dq + zData.X_Clinical_Services__c + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#Clinical_Services__c_Name" + dq + ").val(" + dq + zData.ClinicalName + dq + "); ");
        arrOfPairs.push("Clinical_Services__c", zData.X_Clinical_Services__c);

        //CRN191118 If we also have a Patient and a Clinical Service, associate them.
        if (zData.patientId) {
            alert("@@@ Associating Clinical Service: " + clinicalSvcId + " with Patient: " + zData.patientId);
            var scriptArrOfPairs = [];
            scriptArrOfPairs.push("Core_Patient__c", zData.patientId);
            updateSFRecord(doc, "Core_Clinical_Service__c", clinicalSvcId, scriptArrOfPairs);
        }
    }
}

if( zData.X_Service_Requested_Date__c )  arrOfPairs.push("Service_Requested_Date__c",zData.X_Service_Requested_Date__c);
if( zData.X_Reported_Outcome__c )  arrOfPairs.push("Reported_Outcome__c",zData.X_Reported_Outcome__c);
if( zData.X_Assessment_Type__c && "DONOT_SAVE" !== zData.X_Assessment_Type__c)  arrOfPairs.push("Assessment_Type__c",zData.X_Assessment_Type__c);
if( zData.X_Outcome_Type__c && "DONOT_SAVE" !== zData.X_Outcome_Type__c)  arrOfPairs.push("Outcome_Type__c",zData.X_Outcome_Type__c);
if(zData.X_Product_Described__c) arrOfPairs.push("Product_Described__c",zData.X_Product_Described__c);
if(zData.X_ZPAPER__latestFax__c) arrOfPairs.push("ZPAPER__latestFax__c",zData.X_ZPAPER__latestFax__c);
//ERS190814 just the child #61511 updateSFRecord(doc, zData.zps, sfStackId, arrOfPairs);
//let the docSet do the work attach(doc,attachLabel, sfStackId);
var r=updateSFRecord(doc,"ZPAPER__zStack__c",sfStackId,["ZPAPER__Status__c","Split"]); //PV191216
alert("@@@@ updated and attached to zStack Record, id = " + sfStackId + "?="+zData.getStackId(doc)+" data="+arrOfPairs);

var childStackId=zData.clientChildStack(doc,arrOfPairs,sfStackId); //ERS190810 create child stack for split ERS190811 clientChildStack
if (childStackId) {attachPath+=","+sfStackId+","+childStackId; attachPath=attachPath.replace("/,?","/"); } //ERS190811 #61570 clean up //parent stack too
arrOfPairs=[];//PV191023 Everytime child will attach to that particular zStack
arrOfPairs.push("X_sfStackId",childStackId);
//CRN191118 Clear out these values from parent stack
arrOfPairs.push("X_indexedPages","");
arrOfPairs.push("X_ignoredPages","");
arrOfPairs.push("X_rejectedPages","");
updateDB(doc,arrOfPairs);
/* Move the split document to its processing folder */
alert("@@@@@@ Moving the indexed pages document into next processing folder: " + nextFolder);
//ERS190731 #61272 moveDocument(doc,"",nextFolder);
//ERS190731 #61272 reloadByBATES(doc, nextFolder); //ERS170413 #35291
/* Place the split document into the stack folder */
alert("@@@@@@ Moving the indexed pages document into the final stack folder: " + stackFolder);
moveDocument(doc,"",stackFolder);
unlockDocument(doc);
arrOfPairs = zData.addStage(doc,arrOfPairs,zData.stage);
var pageCount = zData.countPages(doc,pageRange);
alert("@@@@ pageCount = " + pageCount +" were "+ zData.stage);
arrOfPairs.push("X_pages",pageCount);
arrOfPairs.push("X_count",pageCount); //PV191028 updated for stack complete to use exact pages
arrOfPairs.push("db-pages",pageCount);
//ERS190620 arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + companyCode + " - " + stackId);
//arrOfPairs.push("X_attachedTo",attachPath); //CRN191028 We don't need to update the X_attachedTo because it is being set correctly during each attach. Besides, attachPath holds the parent's massaged X_attachedTo which we don't want. //ERS170628
updateDB(doc,arrOfPairs);

//PV191029 Add "Indexed" to the "Received" X_reviews added in client library above.
var origXReviews = X(doc, "X_reviews");
var now0 = getCurDateAndTime(doc);//Pv191029 check docset checkbox
arrOfPairs = [];
arrOfPairs.push("X_reviews", origXReviews + "Indexed by agent at " + now0 + "<br/>");
updateDB(doc, arrOfPairs);

track(doc, "Doc Indexed", "Document with Id: " + doc.dbID, pageCount);
addPostExecutionScript(doc, "nextPage(~ready~);updateDEStatus(~indexed:" + pageRange + "~);");

/* end of rule */
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---

//--- RULE VALIDATION CODE - END ---

</script>
