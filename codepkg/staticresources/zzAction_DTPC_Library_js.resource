<!--
// Name: DTPC Library
// Committer: Prathyusha.vasireddy@zpaper.com
// Update: Creating a lightning file for incoming PV210827
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2021-08-27 16:44:39","evalContinue":"true","active":true,"button":"","name":"DTPC Library","conditions":{"logic":"and","arguments":[{"name":"doc.status","value":"DoNotDTPC","operation":"ne"}]},"consequence":{"doit":""},"ordinal":1}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
/* BEGIN DTPC Library zAction */
alert("@@@ Initializing DTPC_Library LINE 1"); //ERS210527 testing with Cory

zData.PCpackage = "PatientConnect__";
zData.SFDCtype = zData.PCpackage + "PC_Document__c";
zData.SFDCconnector = zData.PCpackage + "PC_Document_Log__c";
zData.zPaperIdField = "zPaper_Fax_Unique_Id__c"; //CRN180706 This isn't in a managed package
zData.DocumentLookupField = zData.PCpackage + "PC_Document__c";
zData.PC_attachmentIdField = zData.PCpackage + "PC_Attachment_Id__c";
//MSH180816 #51641 zData.PC_lookupField = zData.PCpackage + "PC_Program__c"; //"Case__c";
zData.PC_lookupField = "spc_Program_Case_Id__c";
zData.caseId = "";
zData.programName = "DTPC Program";
//MSH190212 use deployment record info
//zData.inboundFaxRecordType = "0123B000000LUcYQAW"; //MSH181004 updated record type for Full
//zData.outboundFaxRecordType = "0123B000000LUcZQAW"; //MSH181004 updated record type for Full
//zData.inboundEmailRecordType = "0123B000000LUcWQAW"; //MSH181004 updated record type for Full
//zData.outboundEmailRecordType = "0123B000000LUcXQAW"; //MSH181004 updated record type for Full
/*
Email - Inbound == 0125Y000002HlDqQAK
Email - Outbound == 0125Y000002HlDrQAK
Fax - Inbound == 0125Y000002HlDsQAK
Fax - Outbound == 0125Y000002HlDtQAK
*/



var cs = (doc.kbData.deploymentInfo + "");
alert("MSH190212 cs = " + cs);
if (cs) {
    if (cs.indexOf("zCustomSettings") > -1) {
        cs = X(doc, "zCustomSettings", cs);
    }
    if (cs !== "") {
        eval(cs);
    }
}

//ERS190418 use SFDC settings instead
var org2orgCS=doc.kbData.customSettings; //ERS190411 #57881

try { //ERS210527 TODO link to custom setting docs
    alert("Missing CS="+org2orgCS);
    if (org2orgCS && 1===1) { //ERS210529 HACK TODO CS //ERS210619 done by CRN
        zData.inboundFaxRecordType=""+XCustomSetting(doc,"inboundFaxRecordType__c"); //"0121D0000002GKNQA2";
        zData.outboundFaxRecordType=""+XCustomSetting(doc,"outboundFaxRecordType__c"); //"0121D0000002GKOQA2";
        zData.inboundEmailRecordType=""+XCustomSetting(doc,"inboundEmailRecordType__c"); //0121D0000002GKLQA2";
        zData.outboundEmailRecordType=""+XCustomSetting(doc,"outboundEmailRecordType__c"); //"0121D0000002GKMQA2";
        //CLIENT SPECIFIC //ERS210527 zData.BREXinboundFaxLine=""+XCustomSetting(doc,"BREXinboundFaxLine__c"); //16787270698";
        zData.inboundFaxLine=""+XCustomSetting(doc,"ZPAPER__Channel1__c"); //ERS210527 TODO rework into zChannel setup
        zData.inboundFaxLine=doc.deliveredTo;
        //alert("Setup for: "+zData.BREXinboundFaxLine);
        zData.test="done";
    } else {
        alert("SETTINGS ARE ERS190411 CS a "+ (typeof org2orgCS) +" has "+org2orgCS);
    }
} catch(e) {
    alert("FAILED TO INITIALIZE");
    alert("error: "+e);
}

    if (1===0) { //ERS210618 done above //ERS210529 TODO move into custom settings from the accelerator
        zData.inboundFaxRecordType="0125Y000002HlDsQAK";
        zData.outboundFaxRecordType="0125Y000002HlDtQAK";
        zData.inboundEmailRecordType="0125Y000002HlDqQAK"; //ERS210529 HACK for demo
        zData.outboundEmailRecordType="0125Y000002HlDrQAK";
        zData.inboundFaxLine=doc.deliveredTo;
        zData.test="done";
    }
       
if (!zData.test || !zData.inboundFaxLine || !zData.inboundFaxRecordType || !zData.outboundFaxRecordType
  || !zData.outboundEmailRecordType || !zData.outboundEmailRecordType) {
    //email someone that the org is not setup
    var msg="CUSTOM SETTINGS ARE MISSING";
    var body="zPaper Actions Failed to Initialize\n\n"+org2orgCS+"";
    alert("email "+ doc.kbData.userEmail+"\n"+msg);
    var se=sendEmail(doc, "support@zpaper.com", doc.kbData.userEmail, msg, body);
    rool.evalContinue=false; //stops the bus!
    return;
}

//ERS170621 attaching to a Case should create a Document and DocumentLog
zData.newDocument = function(doc, arrOfPairs, SFDCtype, programName, sfParentId, SFDCfield, status) { //CRN171028 Added status //ERS170626 added parent type
    var formatNow = getCurDateAndTime(doc); //CRN170621 This is fixed now so we don't need the lines below

    if (1===1) {
        var deliveredFrom = doc.deliveredFrom;
        //MSH190213 debugging
        alert("deliveredFrom == " + deliveredFrom);
        //if (deliveredFrom.indexOf(".") > -1 || deliveredFrom.length != 11) {
            //deliveredFrom = "17705551212"; //ERS170729 #40447
        //}
//CRN210611 We need to set the RecordTypeId correctly.
var isRecordTypeIdSet = false;
for(var i = 0; i < arrOfPairs.length; i=i+2) {
   if(arrOfPairs[i].toLowerCase() == "recordtypeid") {
       isRecordTypeIdSet = true;
       break;
   }
}
if(!isRecordTypeIdSet) {
    var recordTypeId = zData.inboundFaxRecordType; // assume incoming fax
            if (deliveredFrom.indexOf("@") >= 0) {
    recordTypeId = zData.inboundEmailRecordType; // it's actually an email
            }
   
    arrOfPairs.push("RecordTypeId", recordTypeId); //CRN210611 now setting the record type
}
        arrOfPairs.push(zData.PCpackage + "PC_From_Fax_Number__c", deliveredFrom); //was "Incoming_Fax_Number__c"
        //use record type //arrOfPairs.push("Channel__c", "Fax - Inbound");
        arrOfPairs.push(zData.PCpackage + "PC_To_Fax_Number__c", zData.inboundFaxLine);
        arrOfPairs.push(zData.PCpackage + "PC_Inbound_Fax_Date_Time__c", formatNow); //was Fax_Received_Date_Time__c
        if (status) {
            alert("ERS180904.40 PC_Document_Status__c is "+ status); //#51604
           arrOfPairs.push(zData.PCpackage + "PC_Document_Status__c", status); //was alway New
        } else {
            alert("ERS180904.43 PC_Document_Status__c is "+ status); //#51604
            arrOfPairs.push(zData.PCpackage + "PC_Document_Status__c", "New"); //was Status__c
        }
        arrOfPairs.push(zData.zPaperIdField, doc.dbID);
        arrOfPairs.push(zData.PCpackage + "PC_Document_Category__c", X(doc, "X_docType"));
        arrOfPairs.push(zData.PCpackage + "PC_Page_Count__c", X(doc, "X_pages"));
        var qrCode = X(doc,"X_barCode0");
        alert("123qrCode" + qrCode);
        if(qrCode.endsWith ("ENRL2")){
            alert("ENRL2");
        }
        else if(qrCode.endsWith ("ENRL")){
            alert("ENRL");
        }
       //var faxType = X(doc, "X_ZPAPER__faxType__c");
       if (qrCode == "ENRL"){ //PV210824
        //var enjId = "a1R18000001XiICEA0";
        var enjId= getSFField(doc, "PatientConnect__PC_Engagement_Program__c", "Id", "PatientConnect__PC_Program_Code__c = 'ENJ'", null);
        arrOfPairs.push("PatientConnect__PC_Engagement_Program__c",enjId);
        arrOfPairs.push("PatientConnect__PC_EngagementProgramCode__c", "ENJ");
        arrOfPairs.push("PatientConnect__PC_Document_Category__c", "Enrollment Form");
        alert("@@@Faxtype" + faxType );
        }
         else if (qrCode == "ENRL2" || "ENJIAP"){
        //var rbgId = "a1R18000001XkpNEAS"; //PV210826
        var rbgId= getSFField(doc, "PatientConnect__PC_Engagement_Program__c", "Id", "PatientConnect__PC_Program_Code__c = 'RBG'", null);
        alert("rbgId" + rbgId);
        arrOfPairs.push("PatientConnect__PC_Engagement_Program__c",rbgId);
         arrOfPairs.push("PatientConnect__PC_EngagementProgramCode__c", "RBG");
         arrOfPairs.push("PatientConnect__PC_Document_Category__c", "Enrollment Form");
         }
         else if(qrCode =="ENJENR"){
         var rbgId2= getSFField(doc, "PatientConnect__PC_Engagement_Program__c", "Id", "PatientConnect__PC_Program_Code__c = 'RBG'", null);
         arrOfPairs.push("PatientConnect__PC_Engagement_Program__c",rbgId2);
         arrOfPairs.push("PatientConnect__PC_EngagementProgramCode__c", "RBG");
         arrOfPairs.push("PatientConnect__PC_Document_Category__c", "IAP Enrollment Form");
         }
        else{
        //var rbgId1 = "a1R18000001XkpNEAS";
        var rbgId1= getSFField(doc, "PatientConnect__PC_Engagement_Program__c", "Id", "PatientConnect__PC_Program_Code__c = 'RBG'", null);
         arrOfPairs.push("PatientConnect__PC_Engagement_Program__c",rbgId1);
         arrOfPairs.push("PatientConnect__PC_EngagementProgramCode__c", "RBG");
         arrOfPairs.push("PatientConnect__PC_Document_Category__c", "FAX");
        }
        alert(arrOfPairs);
    }

    //ERS170322 TODO check for split and set Parent_Document__c
    var parentID = X(doc, "X_attachedTo");
    var type = ""; //ERS170325
    type = X(doc, "X_ZPAPER__faxType__c"); //ERS170729 #40447 in attachment name
    if (sfParentId) {
        parentID = sfParentId;
    }
    if (parentID !== "") {
        parentID = parentID.substring(1 + parentID.lastIndexOf("/"));
        alert("parentID = " + parentID);
    }

    var sfId = zData.PcDocId;
    if (!zData.PcDocId) {
        sfId = "" + createAndAttach(doc, SFDCtype, "New " + type + programName + " PC Document received on " + formatNow, arrOfPairs);
    }

    if (1===1) { //ERS210529 TODO more ways to connect than just Cases
        if (!zData.caseId && parentID.indexOf("500")===0) { zData.caseId=parentID; }
        if (!zData.caseId && X(doc,"sfID").indexOf("500")===0) { zData.caseId=X(doc,"sfID"); }
    }
    zData.PcDocId = sfId.length > 4 ? sfId : null;
    alert("@@@ ERS170913 caseId = " + zData.caseId + ": Created " + SFDCtype + ":" + sfId + " @@@");
    alert("zData.SFDCconnector = " + zData.SFDCconnector);
    if(zData.PcDocId && !zData.doNotCreateLightningFile){ // Creating a lightning file for incoming PV210827
        zData.clientLightningFile(doc, [zData.PcDocId], zData);
    }
    if (zData.caseId && 1===1 && sfId !== "" && sfId != "NEW") { //ERS170708 added NEW test //ERS170621 make the Document_Log and connect to case
        var arrOfPairs2 = []; //ERS170708 {} now []
        arrOfPairs2.push("PatientConnect__PC_Program__c", zData.caseId); //ERS170830
        arrOfPairs2.push(zData.DocumentLookupField, sfId); //ERS170830
        var sfIdConnector = "" + createSFRecord(doc, zData.SFDCconnector, null, arrOfPairs2);  //ERS210529 null not ""
        zData.sfIdConnector = sfIdConnector; //PV210629 added for DL File
        alert("@@@ Created type " + zData.SFDCconnector + ":" + sfIdConnector + " to " + sfId + " and " + zData.caseId + " @@@");
        if (sfIdConnector !== "" && sfIdConnector !== "null") {
            return sfId + "," + sfIdConnector;
        } else {
            alert("Failed to create " + zData.SFDCconnector);
        }
    } else {
        alert("Failed to create " + SFDCtype);
    }
    return sfId;
};
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
