<!--
// Name: DTPC Library
// Committer: eric.stephens@zpaper.com
// Update: ERS190418 use SFDC settings instead
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-04-18 21:05:54","evalContinue":"true","active":true,"button":"","name":"DTPC Library","conditions":{"logic":"and","arguments":[{"name":"doc.status","value":"DoNotDTPC","operation":"ne"}]},"consequence":{"doit":""},"ordinal":2}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
/* BEGIN DTPC Library zAction */
alert("@@@ Initializing DTPC_Library LINE 1");

zData.PCpackage = "PatientConnect__";
zData.SFDCtype = zData.PCpackage + "PC_Document__c";
zData.SFDCconnector = zData.PCpackage + "PC_Document_Log__c";
zData.zPaperIdField = "zPaper_Fax_Unique_Id__c"; //CRN180706 This isn't in a managed package
zData.DocumentLookupField = zData.PCpackage + "PC_Document__c";
zData.PC_attachmentIdField = zData.PCpackage + "PC_Attachment_Id__c";
//MSH180816 #51641 zData.PC_lookupField = zData.PCpackage + "PC_Program__c"; //"Case__c";
zData.PC_lookupField = "spc_Program_Case_Id__c";
zData.caseId = "";
zData.programName = "Brexanolone Engagement Program";
//MSH190212 use deployment record info
//zData.inboundFaxRecordType = "0123B000000LUcYQAW"; //MSH181004 updated record type for Full
//zData.outboundFaxRecordType = "0123B000000LUcZQAW"; //MSH181004 updated record type for Full
//zData.inboundEmailRecordType = "0123B000000LUcWQAW"; //MSH181004 updated record type for Full
//zData.outboundEmailRecordType = "0123B000000LUcXQAW"; //MSH181004 updated record type for Full



var cs = (doc.kbData.deploymentInfo + "");
alert("MSH190212 cs = " + cs);
if (cs) {
    if (cs.indexOf("zCustomSettings") > -1) {
        cs = X(doc, "zCustomSettings", cs);
    }
    if (cs !== "") {
        eval(cs);
    }
}

//ERS190418 use SFDC settings instead
var org2orgCS=doc.kbData.customSettings; //ERS190411 #57881

try {
    if (org2orgCS) {
        zData.inboundFaxRecordType=""+XCustomSetting(doc,"inboundFaxRecordType__c"); //"0121D0000002GKNQA2";
        zData.outboundFaxRecordType=""+XCustomSetting(doc,"outboundFaxRecordType__c"); //"0121D0000002GKOQA2"; 
        zData.inboundEmailRecordType=""+XCustomSetting(doc,"inboundEmailRecordType__c"); //0121D0000002GKLQA2"; 
        zData.outboundEmailRecordType=""+XCustomSetting(doc,"outboundEmailRecordType__c"); //"0121D0000002GKMQA2"; 
        zData.BREXinboundFaxLine=""+XCustomSetting(doc,"BREXinboundFaxLine__c"); //16787270698"; 
        alert("Setup for: "+zData.BREXinboundFaxLine);
        zData.test="done";
    } else {
        alert("SETTINGS ARE ERS190411 CS a "+ (typeof org2orgCS) +" has "+org2orgCS);
    }
} catch(e) {
    alert("FAILED TO INITIALIZE");
    alert("error: "+e);
}

if (!zData.test || !zData.BREXinboundFaxLine || !zData.inboundFaxRecordType || !zData.outboundFaxRecordType 
  || !zData.outboundEmailRecordType || !zData.outboundEmailRecordType) {
    //email someone that the org is not setup
    var msg="CUSTOM SETTINGS ARE MISSING";
    var body="zPaper Actions Failed to Initialize\n\n"+org2orgCS+"";
    alert("email "+ doc.kbData.userEmail+"\n"+msg);
    var se=sendEmail(doc, "support@zpaper.com", doc.kbData.userEmail, msg, body);
    rool.evalContinue=false; //stops the bus!
    return;
}

//ERS170621 attaching to a Case should create a Document and DocumentLog
zData.newDocument = function(doc, arrOfPairs, SFDCtype, programName, sfParentId, SFDCfield, status) { //CRN171028 Added status //ERS170626 added parent type
    //MSH180820 if (!SFDCfield) {
    //SFDCfield = zData.PC_lookupField;
    //}

    var formatNow = getCurDateAndTime(doc); //CRN170621 This is fixed now so we don't need the lines below




    if (1===1) {
        //Fax_Category__c is "Patient Authorization","Patient Consent","Patient Insurance Information"
        //Channel__c is "Fax","Fax - Inbound","Fax - Outbound"
        //ERS170906 SF User not allowed


        //MSH180817 #51641 put in arrOfPairs before calling this function arrOfPairs.push("RecordTypeId", zData.inboundFaxRecordType);
        //MSH190213 change 'from' to 'deliveredFrom' because 'from' is a keyword

        var deliveredFrom = doc.deliveredFrom;
        //MSH190213 debugging
        alert("deliveredFrom == " + deliveredFrom);
        //if (deliveredFrom.indexOf(".") > -1 || deliveredFrom.length != 11) {
            //deliveredFrom = "17705551212"; //ERS170729 #40447
        //}

        arrOfPairs.push(zData.PCpackage + "PC_From_Fax_Number__c", deliveredFrom); //was "Incoming_Fax_Number__c"
        //use record type //arrOfPairs.push("Channel__c", "Fax - Inbound");


        //PV190411 to update the fax number on incoming documents
        //var to = doc.deliveredTo;
          //  to = "16787270698";
        //arrOfPairs.push(zData.PCpackage + "PC_To_Fax_Number__c", to);
        arrOfPairs.push(zData.PCpackage + "PC_To_Fax_Number__c", zData.BREXinboundFaxLine);



        arrOfPairs.push(zData.PCpackage + "PC_Inbound_Fax_Date_Time__c", formatNow); //was Fax_Received_Date_Time__c
        if (status) {
            alert("ERS180904.40 PC_Document_Status__c is "+ status); //#51604
            //MSH180905 a little test arrOfPairs.push(zData.PCpackage + "PC_Document_Status__c", status); //was alway New
        } else {
            alert("ERS180904.43 PC_Document_Status__c is "+ status); //#51604
            arrOfPairs.push(zData.PCpackage + "PC_Document_Status__c", "New"); //was Status__c
        }
        arrOfPairs.push(zData.zPaperIdField, doc.dbID);
        arrOfPairs.push(zData.PCpackage + "PC_Document_Category__c", X(doc, "X_docType"));
        arrOfPairs.push(zData.PCpackage + "PC_Page_Count__c", X(doc, "X_pages"));
    }

    //ERS170322 TODO check for split and set Parent_Document__c
    var parentID = X(doc, "X_attachedTo");
    var type = ""; //ERS170325
    type = X(doc, "X_ZPAPER__faxType__c"); //ERS170729 #40447 in attachment name
    if (sfParentId) {
        parentID = sfParentId;
    }
    if (parentID !== "") {
        parentID = parentID.substring(1 + parentID.lastIndexOf("/"));
        alert("parentID = " + parentID);
    }

    var sfId = zData.PcDocId;
    if (!zData.PcDocId) {
        sfId = "" + createAndAttach(doc, SFDCtype, "New " + type + programName + " PC Document received on " + formatNow, arrOfPairs);
    }

    zData.PcDocId = sfId.length > 4 ? sfId : null;
    //MSH180816 #51641 set this in calling zAction
    /*
    if (zData.caseId.length === 0 || zData.caseId.indexOf("500") !== 0) {
        if (parentID.indexOf("500") === 0) {
            zData.caseId = parentID; //ERS170722
        } else {
            //MSH180816 #51641 zData.caseId = ""; //ERS170906
            var pcDocFlds = getSFFields(doc, zData.SFDCtype, zData.PC_lookupField, null, parentID);
            zData.caseId = X(doc, zData.PC_lookupField, pcDocFlds);
        }
    }
    */
    alert("@@@ ERS170913 caseId = " + zData.caseId + ": Created " + SFDCtype + ":" + sfId + " @@@");
    alert("zData.SFDCconnector = " + zData.SFDCconnector);

    if (zData.caseId && 1===1 && sfId !== "" && sfId != "NEW") { //ERS170708 added NEW test //ERS170621 make the Document_Log and connect to case
        var arrOfPairs2 = []; //ERS170708 {} now []
        //if (parentID.indexOf("500")===0) arrOfPairs2.push("Case__c", parentID); //ERS170708 sfParentId now parentID
        //if ((SFDCfield==="Program_Enrollment__c")) arrOfPairs2.push("Program_Enrollment__c", parentID); //ERS1707022
        //arrOfPairs2.push(zData.PC_lookupField, zData.caseId); //ERS170830
        arrOfPairs2.push("PatientConnect__PC_Program__c", zData.caseId); //ERS170830
        arrOfPairs2.push(zData.DocumentLookupField, sfId); //ERS170830
        var sfIdConnector = "" + createSFRecord(doc, zData.SFDCconnector, "", arrOfPairs2);  //ERS170708 added zData to SFDCconnector
        alert("@@@ Created type " + zData.SFDCconnector + ":" + sfIdConnector + " to " + sfId + " and " + zData.caseId + " @@@");
        if (sfIdConnector !== "" && sfIdConnector !== "null") {
            return sfId + "," + sfIdConnector;
        } else {
            alert("Failed to create " + zData.SFDCconnector);
        }
    } else {
        alert("Failed to create " + SFDCtype);
    }
    return sfId;
};
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
