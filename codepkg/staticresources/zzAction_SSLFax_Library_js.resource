<!--
// Name: SSLFax Library
// Committer: eric.stephens@zpaper.com
// Update: ERS230729 HACk qr.md on zp50; ERS230729 need some clear documentation on BATES for qr.md, latest zippi has null
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2023-07-29 16:35:40","evalContinue":"true","active":true,"button":"Stamp","name":"SSLFax Library","conditions":{"logic":"or","arguments":[{"name":"doc.status","value":"NoSSLFax","operation":"not-contains"},{"name":"doc.X(\"X_buttonAction\")","value":"ADD_STAMP","operation":"equals"},{"name":"doc.X(\"X_buttonAction\")","value":"NOTIFY","operation":"starts-with"}]},"consequence":{"doit":""},"ordinal":3}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//ERS210605 create QR code and Blockchain contract to enable faster, digital access
if (doc.X("X_buttonAction") == "ADD_STAMP") {
    rool.evalContinue=false; //stops the bus!
}
if (doc.X("X_buttonAction").indexOf("NOTIFY")===0) { //ERS220409 #90882
    rool.evalContinue=false; //stops the bus!
}

//make a REDIRECT snippet
//create the  blockchain smart contract
//1st URL is open then require a PIN
//return a URL for the QR code
alert("ERS230615 made from "+X(doc,"KBinPrint"));
alert("ERS230615 made from "+X(doc,"ContactFax"));
zData.alreadyStamped=X(doc,"ContactFax"); //ERS230616 TODO save the existing stamp into KBinPrint
if (zData.alreadyStamped.toUpperCase().indexOf("PDF")>-1) { zData.sslFax=false; alert("ERS230615 do not restamp "+zData.alreadyStamped); } //ERS230615
alert("ERS230615 doc.kbData="+doc.kbData);
alert("ERS230615 zData="+zData.toString()); //ERS230615 need to see if the stamp on the incoming sendTo PDF already exists
if (!zData || !zData.docType) zData.docType="ZTAMPZ"; //ERS230513
alert("ERS230513 zData.docType="+zData.docType);
if ((""+zData.docType).indexOf("ZCARD") != -1) {zData.stampY=50; zData.stampX=17; } 
//TODO in template set -1 for no stamps or use zData.docType
if (!zData.stampX) { zData.stampX=17; }
if (!zData.stampY) { zData.stampY=750; }
//zData.stampX=37; //ERS230318 testing movement #96822
var SY=zData.stampY/1; var SX=zData.stampX/1;
zData.stampMarkup=""; //ERS210731 #83767 might need to be different for signature invite
zData.stampMarkup+="kbm('IMGZSTAMP_REALPDFCOORDS','PAGE1IMGZSTAMP','/kb/jsp/qr.jsp?code={!qr}',55,55,10,10,'','12',45,45,"+SX+","+SY+");";
//ERS221129 #91552 zData.stampMarkup+="kbm('IMG1627149318038_REALPDFCOORDS','PAGE1IMG1627149318038','addText',93,22,10,83,'faxMD.org','10',70,16,7,750);";
zData.stampMarkup+="kbm('IMG1627149318038_REALPDFCOORDS','PAGE1IMG1627149318038','addText',93,22,10,83,'qr.md/','7',70,16,"+SX+","+SY+");"; //ERS230216 just qr.md not zqr.md
zData.stampMarkup+="kbm('IMG1627149318039_REALPDFCOORDS','PAGE1IMG1627149318039','addText',93,22,10,83,'{!zzz[0,4]}','7',70,16,"+SX+","+(SY-15)+");";
zData.stampMarkup+="kbm('IMG1627149318040_REALPDFCOORDS','PAGE1IMG1627149318040','addText',93,22,10,83,'{!zzz[5,10]}','7',70,16,"+SX+","+(SY-30)+");"; //ERS230104
if (zData.stampX<0 || zData.stampY<0) { zData.stampMarkup=""; zData.sslFax=false; alert("ERS230318.21 turned off stamps for this pdf"); }

zData.addStamp=function(doc,req) {
    var stampMarkup="get from zData"; //ERS211120 cleaning up
    //ERS211120 faxmd to faxMD and looking for place for ZQR url to keep forever
    stampMarkup=zData.stampMarkup; //ERS210731
    if (!zData.sslFax) { alert("ERS230318 not stamping!"); } //ERS230318 #96822 need another case
    //BAD BAD testing ERS230616
    if (!zData.sslFax) { alert("ERS230615 not stamping!"); return ""; } //ERS230615 perhaps an existing stamped document
    var userEmail=doc.XOrg("X_crmUser");
    if (userEmail.indexOf("@")==-1) userEmail="support+sign@zpaper.com";
    //track(doc,"invite sent","inviting "+X(doc,"X_inviteEmail"+n).replace(/ /g,"+"), 0);
    alert("ERS201207.09 zpServer="+doc.kbData.HOST);
    zData.zpServer=(""+doc.kbData.HOST).replace("http://","").replace(":8080","").replace("https://",""); //ERS201204 #77302 //ERS201206 more engine replaces
    if (!zData.zpServer) zData.zpServer="edge.zpaper.com"; //ERS191110 #64160 TODO get a server
    zData.zpServer=zData.zpServer.replace("a.zpaper.com",".zpaper.com").replace("b.zpaper.com",".zpaper.com"); //ERS230729 HACk qr.md on zp50
    if ((""+zData.zpServer).indexOf("zpaper.com")==-1) { //ERS TODO doc.zpServer needed for zippi
        zData.zpServer="edge.zpaper.com";
        alert("ERS230212.32 ZIPPI BUSTED!!!");
        doc.kbData.HOST=zData.zpServer;
    }
    alert("ERS201204.11 zpServer is "+zData.zpServer);
    var markupXML=""+X(doc,"X_markup"); //ERS210611 added "" for NPE
    alert("ERS210612 mXML="+markupXML);
    if (markupXML.indexOf("ZSTAMP")!=-1) {
        alert("ALREADY ZSTAMPED!");
        var zstamp=""+X(doc,"X_deliverStamp");
        if (zstamp.indexOf(".com/") == -1) {
            alert("REDIRECT broken? "+zstamp);
        } else {
            return zstamp; //probably should be stampMarkup.replace("{!qr}",zstamp);
        }
    }
    
    var n=1;
    var arrOfPairs=[];
    var PIN=X(doc,"X_invitePIN"+n); //ERS210118 TODO support inline in INVITEn:SMS:email:PIN values
    PIN=""+X(doc,"ContactFax"); //TODO clean up to 10 digits
    var to=PIN; //fax or SMS number
    if (PIN != "PDF") { PIN=X(doc,"X_invitePIN"+n); } //ERS230407 not sure why we ever did the ContactFax thing!  Do NOT stamp PDF delivery
    if (!PIN || (""+PIN).indexOf("PDF") != -1 || (""+PIN).indexOf(":") != -1) { //make one up //ERS211120 PDF //ERS230212 check string & ":"
        PIN="30076";
        if (1===1) { PIN=0;	while (PIN<10000) { PIN=Math.floor(100000*Math.random()); } } //ERS210912 PIN back on
    }
    arrOfPairs.push("X_invitePIN"+n, (""+PIN));
    var signHints="<X_invitePIN"+n+">"+PIN+"</X_invitePIN"+n+">";
    arrOfPairs.push("X_signIt", signHints);

    //create a one time use redirect (A) to download or view the PDF or embedded data
    //stamp contains the A link as a QR code
    //create a contract redirect (B) with a PIN to view / sign / markup the PDF afterwards
    //after the 1st time A is used change the forward from A to goto B
    //ERS210612 once a redirect is out of views if there is a ; then forward to it
    
    alert("ERS210612.54 doc.BATES may be null");
    //ERS221107 var nId=""+X(doc,"X_zItemId"); if (!nId && (""+doc.BATES).indexOf("_Form")==-1) nId=doc.dbID; //ERS210611 204007e4Z1dkjni2il
    var nId=""+X(doc,"X_zItemId");  if (!nId) nId=doc.dbID; //ERS210611 TODO check if zData.sslFax then  (""+doc.BATES).indexOf("_Form")==-1
    alert("ERS221107.66 check zData.sslFax="+zData.sslFax +" zData.zippiMode="+zData.zippiMode);
    if (!nId) { return "ERROR: Templates do not need stamps"; }
    
    var linkA="https://"+zData.zpServer+"/kb/pdf/"+nId+"/zitem.pdf"; //ERS201014
    var linkB="https://"+zData.zpServer+"/kb/jsp/docChat.jsp?invite="+n+"&dbID="+nId; //ERS201014
    var moreData="&pages="+doc.numPages+"&sendTo="+X(doc,"ContactFax"); //ERS210703 #83767
    moreData+="&zId="+doc.dbID+"&zItemId="+nId; //ERS230401 #98116 connect to zHCprod record
    moreData+="&who="+doc.kbData.sfOrganizationID; //ERS230408 might need to update the attachedTo on the REDIRECT with the patient Id
    alert("ERS210703 moreData="+moreData);

    /* TODO call zRedirect.jsp to get short URL */
    var resultsB="", i=-1, shortB="", sURL="", results="";
    var template=X(doc,"templateURL1"); //<templateURL1>00005dc0Z1glv3cji4:AcctCard_Form</templateURL1> 
    template=""+doc.BATES; //0014x00001k1mNzAAI-at-00D4x000005Qx59-AcctCard_Form //ERS230406 "" to keep defined #98116
    i=template.lastIndexOf("-"); if (i>-1 && template.indexOf("_Form")>-1) {
        zData.docType=template.substring(i+1).replace("_Form","");
        if (zData.docType.indexOf("Card")>-1) zData.docType="ZCARD"; //ERS230107 TODO not such a hack
        alert("ERS230107 now zData.docType is "+zData.docType);
        arrOfPairs.push("X_docType",zData.docType);
    } else {
        alert("ERS230107 no joy with "+template+" in "+doc.BATES+" or "+doc.wddata);
    }
    var stampUrl="http://localhost:18800/red/stamp";
    stampUrl="https://qr.md/red/stamp"; //ERS230313 #96822 enable qa90 and client stamping
    if (1==1 &&  (""+zData.docType).indexOf("ZCARD") == -1) { //ERS230107 #96822 ZCARD 1==0 test
        //ERS230213 resultsB=wget(doc, "http://localhost:8080/kb/jsp/zRedirect.jsp?views=-1&X_invitePIN1="+PIN+moreData+"&save="+linkB.replace("&","%26")); //ERS201013 TODO other zRedirect controls more than just the PIN
        resultsB=wget(doc, stampUrl+"?views=-1&X_invitePIN1="+PIN+moreData+"&save="+linkB.replace("&","%26")); //ERS201013 TODO other zRedirect controls more than just the PIN
 
        i=resultsB.indexOf("URL"); 
        //ERS230107 if (i==-1) i=resultsB.indexOf("Url"); //ERS230104 zippi is Url not URL and wget is not a pure string?
        shortB=resultsB.substring(i+6,resultsB.length()-3+1); //ERS230111 +1 for some strange reason
        
        if (shortB.indexOf(",")>-1) shortB=shortB.substring(0,shortB.indexOf(",")); //ERS230308 blockchain and new patients TODO JSON resultsB.URL
        alert("ERS230401.110 destId in resultsB="+resultsB+" shortB="+shortB);
        if (1==1) {
            shortB=resultsB.substring(i+6,resultsB.length()-3+2); //now +2
            if (shortB.indexOf(",")>-1) shortB=shortB.substring(0,shortB.indexOf(",")); //ERS230308 blockchain and new patients TODO JSON resultsB.URL
            shortB=shortB.replace("&","").replace("\"","");
            alert("ERS230211.98 resultsB="+resultsB+" shortB="+shortB);
        }
        shortB=shortB.replace("http://localhost:8080:8080/","https://"+zData.zpServer+"/");
        shortB=shortB.replace("https://localhost:8080/","https://"+zData.zpServer+"/");
        shortB=shortB.replace(zData.zpServer+"/kb/zzz/","qr.md/kb/zzz/"); //ERS230313 all stamps on qr.md TODO /r/z/ or /
        var expire=new Date(); expire.setTime(expire.getTime()+1000*3600*24*7); //2021-06-10
        var expired=formatDate(expire, "YYYY-MM-DD");
        alert("ERS230104 shortB="+shortB+" from "+results);
        //ERS230213 sURL="http://localhost:8080/kb/jsp/zRedirect.jsp?until="+expired+moreData+"&views=1&save="+(linkA+";"+shortB).replace("&","%26");
        sURL=stampUrl+"?until="+expired+moreData+"&views=1&save="+(linkA+";"+shortB).replace("&","%26");
        sURL+="&save0="+linkB.replace("&","%26"); //ERS230213 for smarter contracts
        alert("ERS230104 sURL="+sURL);
        results=wget(doc, sURL);
        i=results.indexOf("URL");
        //ERS230107 if (i==-1) i=results.indexOf("Url"); //ERS230104 zippi is Url not URL
    } else { //ERS230107 ZCARD is a QR code that always has a public landing page
        //ERS230216 sURL="http://localhost:8080/kb/jsp/zRedirect.jsp?views=-1&save="+(linkA+";"+linkA).replace("&","%26");
        sURL=stampUrl+"?views=-1&save="+(linkA+";"+linkA).replace("&","%26");
        sURL+=moreData; //ERS230401 for sendTo and zItem
        alert("ERS230107 docType="+zData.docType+" sURL="+sURL);
        results=wget(doc, sURL);
        i=results.indexOf("URL");
        resultsB=results; //ERS230408 best guess for destId
    }
    alert("ERS201014 i="+i+" results="+results); //ERS210211 #77032 added X_invitePIN1 to redirect
    alert("ERS210609 i="+i+" resultsB="+resultsB);
    
    var destId=""; //ERS230401 #98116 destination patient or provider record in zHC org to save into zItem
    //ERS230408 get the destId to the patient or provider and store it in the contract
    destId=JSON.parse(resultsB).patientId; //ERS230408 make or update and connect
    arrOfPairs.push("X_stampData",results); //ERS230408 loosing data?
    
    var stampXML="";
    if (i>-1 && results.indexOf("ERROR")==-1) {
       link=results.substring(i+6,results.length()-3+1);  //ERS230111 +1 for some strange reason
       if (link.indexOf(",")>-1) link=link.substring(0,link.indexOf(",")); //ERS230308 blockchain and new patients TODO JSON resultsB.URL
        alert("ERS230211.122 results="+results+" link="+link);
        if (1==1) {
            link=results.substring(i+6,results.length()-3+2); //now +2
            if (link.indexOf(",")>-1) link=link.substring(0,link.indexOf(",")); //ERS230308 blockchain and new patients TODO JSON resultsB.URL
            link=link.replace("&","").replace("\"","");
            alert("ERS230211.98 results="+results+" link="+link);
        }
       link=link.replace("http://localhost:8080:8080/","https://"+zData.zpServer+"/"); //ERS201014 HACK JOKING!!!!
       link=link.replace("https://localhost:8080/","https://"+zData.zpServer+"/"); 
       //TODO save the link into SF field so that communication template can access it 50-80 chars use ZPAPER__outboundFaxTemplate__c
       //TODO might need to be the invited person's Id stored in +X(doc,"X_inviteId"+n)
       //var markupXML=X(doc,"X_markup");
       var qr=link; //ERS230123 #96822
       
       if (markupXML.indexOf("ZSTAMP")==-1) { //code=https://edge.zpaper.com/kb/zzz/0X1eu8se1sb&w=16
            qr=link; //"https://"+zData.zpServer+"/kb/zzz/"+shortID+"&w=16";
            //REALPDF in page_pdf.jsp but markup.jsp prefers 1st set
            if ((""+zData.docType).indexOf("ZCARD") != -1) { //ERS230107 ZCARD #96822
                var SMS=X(doc,"ContactFax"); //ERS210118 TODO support inline in INVITEn:SMS:email:PIN values
                var fax=X(doc,"ContactFax");
                alert("ERS230107 ContactFax="+fax+ " from "+doc.wddata);
                //TODO ERS230318 maybe get from sendTo if ContactFax is empty
                if (1==0) { //ERS230408 /red/stamp now manages new records
                    /*
                    if (fax.indexOf("1")==0) { //ERS230107 TODO CMA ideas or push to NodeRed
                        var newProvider=wpost(doc,"https://qr.md/red/zqr/provider?fax="+fax+"&zItem="+doc.dbID);
                        alert("ERS230107 made or found "+newProvider);
                        destId=JSON(newProvider).id; //ERS230401 make and connect
                    }
                    if (SMS.indexOf("INVITE")==0) { //ERS230107 TODO CMA ideas or push to NodeRed
                        SMS=SMS.split(":")[1];
                        var newPatient=wpost(doc,"https://qr.md/red/zqr/patient?sms="+SMS+"&zItem="+doc.dbID);
                        alert("ERS230401.175 made or found patient "+newPatient);
                        destId=JSON.parse(newPatient).id; //ERS230401 make or update and connect
                        alert("ERS230401 patient "+destId);
                    }
                    */
                }

                stampMarkup=""; //ERS210731 #83767 might need to be different for signature invite
                var SY1=50;
                stampMarkup+="kbm('IMGZSTAMP_REALPDFCOORDS','PAGE1IMGZSTAMP','/kb/jsp/qr.jsp?code={!qr}',55,55,10,10,'','12',45,45,"+SX+","+SY1+");";
                //ERS221129 #91552 zData.stampMarkup+="kbm('IMG1627149318038_REALPDFCOORDS','PAGE1IMG1627149318038','addText',93,22,10,83,'faxMD.org','10',70,16,7,750);";
                stampMarkup+="kbm('IMG1627149318038_REALPDFCOORDS','PAGE1IMG1627149318038','addText',93,22,10,83,'qr.md/','7',70,16,"+SX+","+SY1+");"; //ERS230216 just qr.md not zqr.md
                stampMarkup+="kbm('IMG1627149318039_REALPDFCOORDS','PAGE1IMG1627149318039','addText',93,22,10,83,'{!zzz[0,4]}','7',70,16,"+SX+","+(SY1-15)+");";
                stampMarkup+="kbm('IMG1627149318040_REALPDFCOORDS','PAGE1IMG1627149318040','addText',93,22,10,83,'{!zzz[5,10]}','7',70,16,"+SX+","+(SY1-30)+");"; //ERS230104

            }
            if (1==1) { //ERS230216 all zPaper stamps come from qr.md
                var rz=""; //DONOT put a / in a docTitle EVER - "red/z/"; //could not get empty to work downstream
                var zs=zData.zpServer; if (!zs || (zs.indexOf("zpaper.com")==-1 && zs != "qr.md")) alert("ERS230406 zData.zpServer still wrong!");
                qr=qr.replace(zs+"/kb/zzz/","qr.md/"+rz); // "/red/z/" ERS230318 next 3 lines too
                link=link.replace(zs+"/kb/zzz/","qr.md/"+rz); //ERS230111 #96822 might not be needed
                linkA=linkA.replace(zs+"/kb/zzz/","qr.md/"+rz);
                linkB=linkB.replace(zs+"/kb/zzz/","qr.md/"+rz);
            }
                
            alert("ERS230111 qr="+qr); ///https://qr.md/2X1grrfjtks
            stampXML=stampMarkup.replace("{!qr}",qr);
            var zzz=qr.toUpperCase(); 
            zzz=zzz.substring(1+zzz.lastIndexOf("/")); //ERS230318 /red/z/ to /
            
            stampXML=stampXML.replace("{!zzz}",zzz); //ERS221129 #91552
            stampXML=stampXML.replace("{!zzz[0,4]}",zzz.substring(0,5)); //ERS230104 #91552
            stampXML=stampXML.replace("{!zzz[5,10]}",zzz.substring(5)); //ERS230104 #91552
            
            if (1==1) arrOfPairs.push("X_markup",markupXML+stampXML); //ERS230110 in zippi _Form is not a risk but not sure in kb HACK EOJ
            if ((""+doc.BATES).indexOf("_Form")==-1) { //ERS230110 moved below ZCARD but expecting the calling code to save the markup
                arrOfPairs.push("X_markup",markupXML+stampXML);
                //ERS210911 TODO set BATES of new document to be an interactive one {!sfID}@{!sfOrg}-{formId}
                arrOfPairs.push("db-BATES","NEEDS TO BE {!sfID}@{!sfOrg}-{formId}");
            }
            if (1==1) { //TODO ERS230408 only makes sense on ZHCP need on REDIRECT records instead
                if (destId) { //ERS230401 #98116 attach to delivery
                    var v=X(doc,"X_attachedTo");
                    if (v) v+=","+destId; else v=destId;
                    alert("ERS230408.228 destId to X_attachedTo "+v);
                    arrOfPairs.push("X_attachedTo",v);
                } else {
                    destId="0014x00001ObsvcAAB"; //zUsers in zHCProd for lost sheep
                    var v=X(doc,"X_attachedTo");
                    if (v) v+=","+destId; else v=destId;
                    alert("ERS230401.217 Forcing X_attachedTo "+v);
                    arrOfPairs.push("X_attachedTo",v);
                }
            }
            if (!doc.BATES) { doc.BATES=destId; } //ERS230729 need some clear documentation on BATES for qr.md, latest zippi has null
       
           if (1==1) {  //ERS230216 #96822 only if stamp added
               arrOfPairs.push("X_deliverStamp",linkA); //ERS210609 #83767
               arrOfPairs.push("X_retrieveStamp",linkB);
               arrOfPairs.push("X_sentStamp",qr); //ERS230123 #96822 https://qr.md/red/z/2X1gnfol1sm
               arrOfPairs.push("X_zQR",qr); //ERS230123 #96822 https://qr.md/red/z/2X1gnfol1sm
               if (doc.label.indexOf("1DD") > -1 || doc.BATES.indexOf("NO_TEMPLATE") > -1) { //ERS230216 1DD hack //ERS230325 #98116 NO_T
                   arrOfPairs.push("BATES",doc.BATES.replace("@","--at--")); 
               } else {
                   arrOfPairs.push("BATES",doc.BATES.replace("-at-","@")); 
               }
               alert("ERS230212.179 ALWAYS add stamp this way X_zQR="+qr+" in "+doc.dbID+" fixed "+doc.BATES);
           }
       }
       
       
       //save the REDIRECT ID back into the original
        //ERS230212 updateDB(doc,arrOfPairs);
        if (1==1 && doc.dbID != "DUMMY" && doc.label.indexOf("DUMMY") == -1) updateDB(doc,arrOfPairs);//HACK TO DEMO
        else alert("ERS230212.186 do not save zQR for "+doc.label+" ("+doc.dbID+") trust the flow to do it");
        
        alert("ERS201110.23 signIt="+signHints + " PIN"+n+"="+PIN);
        //ERS211120 added link to track
        track(doc, "STAMP.CREATE",link+" to "+ to +":"+ X(doc,"X_inviteEmail"+n).replace(/ /g,"+"), 0); //ERS210112 invites too
        //ERS210605 return link
        return stampXML; //ERS210611 SF_sendFax.jspf calls this action and needs the additional markup XML to add to the PDF not yet stored
    } else {
        alert("Something went wrong creating the secure link.");
        //return ERROR
    }
};

zData.notify=function(doc,req) { //ERS220409 #90882 if (doc.X("X_buttonAction").indexOf("NOTIFY"))
    var n=1;
    var to=X(doc,"X_invitePhone"+n);
    var PIN=X(doc,"X_invitePIN"+n);
    var link=X(doc,"X_zQR");
    link=link.replace(zData.zpServer,"qr.md"); //ERS230316 demo #96822
    to=X(doc,"X_invitePhone"+n);
    var from="+15712972737";
    var channel=X(doc,"X_notifyChannel");
    var sendTo=X(doc,"X_sendTo");
    if (!sendTo) sendTo=X(doc,"sendTo"); //ERS230123 #96822
    if (sendTo && sendTo != to) {
        if (sendTo.indexOf(":")>-1) { to=sendTo.split(":")[1]; } //ERS230123
        else to=sendTo;
        alert("Notify dbID="+doc.dbID+" TODO see if sendTo of "+sendTo+" is approved for "+channel);
        //to=sendTo;
    } else alert("ReNotify dbID="+doc.dbID+" to "+to+" is already approved for "+channel);
    
    if (!channel) channel="SMS";
    if (channel == "SMS") {
        var body="Use PIN of "+PIN+ " to sign " + doc.label;
        body+=" using your email or "+link;
        if (1==1) sendSMS(doc, from, to, body);
        track(doc, "SIGN.INVITE", to +":"+ X(doc,"X_inviteEmail"+n).replace(/ /g,"+"), 0); //ERS210112 invites too
        alert("sendSMS and TRACK for SIGN.INVITE to "+to); //ERS230216 sendSMS seems to be ignored
    }
    if (channel == "FAX") {
        alert("Find the old fax with KBinPrint and resend it to the new number");
        //TODO new envelope with same PDF creating new zItem
    }
    return to;
}; //ERS230330 removed the stray -

if (doc.X("X_buttonAction") == "ADD_STAMP") { 
    var res=zData.addStamp(doc,""); 
    //put it in the output
    addPostExecutionScript(doc, res);
    if (1==1) { //ERS230212 not sure if updateDB is really working
        alert("End of "+doc.dbID+" addStamp: "+res);
        if (1==1 && doc.dbID != "DUMMY" && doc.label.indexOf("DUMMY") == -1) {
            zData.notify(doc,""); //HACK TO DEMO
            //TODO send the email for INVITE calls //ERS230217 EOJ work #96822
            var link=X(doc,"X_zQR");
            link=link.replace(zData.zpServer,"qr.md"); //ERS230316 demo #96822
            var body="Check your phone for the PIN needed to sign this document.  Once you receive it then click "+link
            +" from any web browser or mobile device to view or sign the document.";
            var sendTo=X(doc,"X_sendTo");
            if (!sendTo) sendTo=X(doc,"sendTo");
            var toEmail=sendTo.split(":")[2]; 
            if (toEmail) { //ERS230407 just faxing no email needed
                toEmail=toEmail.replace(/ /g,"+");
                var userEmail="support+qrmd@zpaper.com";
                if (toEmail.indexOf("@")>-1) {
                    var r1=sendEmail(doc,userEmail,toEmail,"zPaper Share and Signing",body);
                    alert("Email for "+r1);
                } else {
                    alert("Missing email in "+sendTo);
                }
            } else {
                alert("ERS230406.314 just faxing to "+sendTo);
            }
        } else alert("ERS230212 do not stamp-notify for "+doc.label+" ("+doc.dbID+")");
        return res;
    }
}

if (doc.X("X_buttonAction").indexOf("NOTIFY")===0) { //ERS220409 #90882
    var res=zData.notify(doc,"");
    alert("End of Notify: "+res);
    return res;
    //addPostExecutionScript(doc, res);
}
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---

//--- RULE VALIDATION CODE - END ---

</script>
