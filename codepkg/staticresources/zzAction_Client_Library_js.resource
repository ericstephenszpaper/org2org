<!--
// Name: Client Library
// Committer: Prathyusha.vasireddy@zpaper.com
// Update: PV220110
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2022-01-10 17:58:26","evalContinue":"true","active":true,"button":"","name":"Client Library","conditions":{"logic":"and","arguments":[{"name":"doc.status","value":"DoNotClient","operation":"not-contains"}]},"consequence":{"doit":""},"ordinal":1}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
alert("start client library"); //ERS190803 #52661 from OccFit
//ERS201117 TODO get rid off these keywords and use a document journey wizard from KPS and Jake

//CRN201025 #76788 Moved from zStack Library so that it can be used in multiple rules.
var keywordMap={};
var keywords=["NEW:Document Stack~","ENRL:Enrollment~","ENRL:ENROLLMENT~","CON:Consent~","CON:consent~","FAC:Setting~","FAC:Distribution~","START:Start Form~","CHK:Checklist~","HIPAA:AUTHORIZATION~","HIPAA:HIPAA~","HIPAA:PORTABILITY~","REF:REFERRAL","REF:Referral","FIN:W2~","IC:Member ID~","FAX:"];
//keywordMap["TENR"] ="TENR:Start Form";
keywordMap["NEW"] ="NEW:Document Stack";
keywordMap["ENRL"] ="ENRL:Enrollment Form";
keywordMap["FAC"] ="FAC:Facility Enrollment Form";
keywordMap["FAX"] ="NEW:Document Stack";
//keywordMap["START"] ="NEW:Document Stack";
keywordMap["CON"] ="CON:Consent Form";
keywordMap["HIPAA"] ="HIPAA:HIPAA Authorization";
keywordMap["REF"] ="REF:Referral";
keywordMap["FW2"] ="FW2:W-2"; //JPB201023 a dded
keywordMap["I9"] ="I9:I-9"; //JPB201023 added
keywordMap["W4"] ="W4:W-4"; //JPB201023 added
keywordMap["DEM"] ="DEM:Demographics"; //CRN201026 added
keywordMap["CLIN"] ="CLIN:Clinical Notes"; //CRN201026 added
keywordMap["FIN"] ="FIN:Financial Info"; //CRN201026 added
keywordMap["IC"] ="IC:Insurance Card"; //CRN201026 added

zData.maxChannels=3; //ERS190731 #61272 zippi is strongly typed
zData.makeStack=true; //ERS190814 #61511

zData.watermark=""+XCustomSetting(doc,"watermark__c"); //ERS190618 best practice
//alert("ERS190411 wm="+zData.watermark+" ZPAPER__server__c="+XCustomSetting(doc,"ZPAPER__server__c"));
zData.uploadDir = ""+XCustomSetting(doc,"uploadDir__c"); //"alkermesRoot";
zData.patEnrollQueueId = ""+XCustomSetting(doc,"patientQueueId__c"); //'00G4C000000LkmZ'; //insert the Queue ID of the desired ownership queue. Update when migrating between environments. Need to add this queue in Setup
zData.recTypeRequest = ""+XCustomSetting(doc,"recTypeRequest__c"); //'0124C000000Cj5Y'; //ID of the Case Record Type Request_PS_MVN
//TODO zData.keywordMap["ENRL"] ="ENRL:Enrollment Form"; //TODO get from zStack picklists
//TODO zData.keywordMap["FAC"] ="FAC:Facility Enrollment Form";
//ERS200205 deleted demo data - do with custom settings

//PV210102 data entry pannel 2
zData.X_ZPAPER__Priority__c = X(doc, "X_ZPAPER__Priority__c");
zData.X_Baptist_Heart_Specialist_Order__c= X(doc, "X_Baptist_Heart_Specialist_Order__c");//PV210119
zData.X_Attestation_Included__c= X(doc, "X_Attestation_Included__c");//PV211220
zData.X_Ready_for_Scheduling__c= X(doc, "X_Ready_for_Scheduling__c");
zData.X_ZPAPER_To_Facility__c= X(doc, "X_ZPAPER_To_Facility__c");
zData.X_ZPAPER_Primary_Payer_Name__c= X(doc, "X_ZPAPER_Primary_Payer_Name__c");
zData.X_ZPAPER_Primary_Member_ID__c= X(doc, "X_ZPAPER_Primary_Member_ID__c");
zData.X_ZPAPER_Secondary_Payer_Name__c= X(doc, "X_ZPAPER_Secondary_Payer_Name__c");
zData.X_ZPAPER_Secondary_Member_ID__c= X(doc, "X_ZPAPER_Secondary_Member_ID__c");
zData.X_zPaper_Procedure_Code_1__c= X(doc, "X_zPaper_Procedure_Code_1__c");
zData.X_zPaper_Procedure_Code_2__c= X(doc, "X_zPaper_Procedure_Code_2__c");
zData.X_zPaper_Procedure_Code_3__c= X(doc, "X_zPaper_Procedure_Code_3__c");
zData.X_ZPAPER_Diagnosis_Code_1__c= X(doc, "X_ZPAPER_Diagnosis_Code_1__c");
zData.X_ZPAPER_Diagnosis_Code_2__c= X(doc, "X_ZPAPER_Diagnosis_Code_2__c");
zData.X_ZPAPER_Diagnosis_Code_3__c= X(doc, "X_ZPAPER_Diagnosis_Code_3__c");
zData.X_ZPAPER__PatientAccount__c= X(doc, "X_ZPAPER__PatientAccount__c");
zData.X_ZPAPER__ProviderContact__c= X(doc, "X_ZPAPER__ProviderContact__c");
zData.X_zPaper_Reason_for_Visit__c= X(doc, "X_zPaper_Reason_for_Visit__c");
zData.X_zPaper_AUC_DSN__c=X(doc, "X_zPaper_AUC_DSN__c");
zData.X_zPaper_AUC_G_Code__c=X(doc, "X_zPaper_AUC_G_Code__c");
zData.X_zPaper_AUC_Modifier__c=X(doc, "X_zPaper_AUC_Modifier__c");
zData.X_zPaper_AUC_Score__c=X(doc, "X_zPaper_AUC_Score__c");
zData.X_HealthCloudGA__Gender__pc=X(doc, "X_HealthCloudGA__Gender__pc");
//PV210102 data entry pannel 2 - end

var cs=XDeploymentInfo(doc, "Business_Process__c"); //ERS200222 need both deployment info and cs
//alert("cs="+cs);
if (cs) {
 if (cs.indexOf("zCustomSettings")>-1) cs=X(doc,"zCustomSettings",cs);
 alert("ERS200225 EVAL on "+cs);
 if (cs !== "") eval(""+cs); //ERS200222 TODO JSON.parse() //ERS200225 beeds to be eval but also needs to work!!!
 alert("No try just do!");
}

if (1===0 && !zData.childStackRecordType) { //TODO custom setting or deployment? //ERS201129 DONE in zChildFields
 alert("ERS201128 should be in custom settings zChildFields");
 zData.childStackRecordType="01211000001gBs3AAE"; //ERS201128 should be in custom settings zChildFields "0120R000001N2oI";
}

zData.clientImportSOQL=function(doc,fromFile) { //ERS190706 customize imports used by Create Stack
 zData.importer=XCustomSetting(doc,zData.zp+"Importer__c").trim();
 var sfId="";
 var parts=fromFile.split("_");
 //sfId = getSFRecordID(doc, "Account", { "Fax" : parts[3] } );
 zData.makeStack=true; //do all the work there by default
 return sfId;
};

//alert("zData.clientStack");
zData.clientStack=function(doc,arrOfPairs) { //zData or this?
 var zp=zData.zp; if (!zp) zp="ZPAPER__"; //ERS190805
if (zData.received) arrOfPairs.push("zStack_Received__c", zData.formatNow); //ERS190617 TODO save way to do this
if (zData.ownerId) arrOfPairs.push("OwnerId",zData.ownerId); // zCharta Queue "00G36000002CyTK"
if (zData.callerId) arrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //MSH170817 added
if (zData.patEnrollQueueId) arrOfPairs.push("OwnerId",zData.patEnrollQueueId);

 arrOfPairs.push("ZPAPER__faxType__c", zData.docType);
 arrOfPairs.push("ZPAPER__Classification__c", zData.classification);
 var pageRange = X(doc,"X_idxPages");
 if (!pageRange) pageRange="1-"+X(doc,"X_pages");
 var pageCount = zData.countPages(doc, pageRange);
 arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID); //ERS190814
 //ERS190810 TODO? arrOfPairs.push("ZSTACK__Received__c", zData.formatNow);
 alert("ERS200213.51 pageRage="+pageRange + " but pageCount="+pageCount); //ERS200213 also called in new incoming stack
 if (!X(doc,"X_idxPages")) pageCount=X(doc,"X_pages"); //ERS200213 TODO fix zData.countPages()
 arrOfPairs.push("ZPAPER__Pages__c", pageCount);
 
 //ERS200204 TODO zStack.Program?

 if (zData.programName === zData.PROGRAM_ZCHARTA) { //JPB201023 changed from classification to programName
 arrOfPairs.push(zp+"Priority__c", "Urgent"); //JPB190426 changed to classification from program
 } else if (zData.programName === zData.PROGRAM_ZPAPYRUS) { //JPB201023 changed from classification to programName
 arrOfPairs.push(zp+"Priority__c", "Other");
 } else if (zData.programName === zData.PROGRAM_ZCARTA) { //JPB201023 changed from classification to programName
 arrOfPairs.push(zp+"Priority__c", "Stat");
 } else {
 arrOfPairs.push(zp+"Priority__c", "Routine"); //PV210119 updated value
 }
 
 arrOfPairs.push(zp+"sentFaxTo__c", ("Community" === zData.channel ? zData.channel : doc.deliveredTo)); //JPB190529 added so Community shows up in Master Intake List
 arrOfPairs.push(zp+"From__c",doc.deliveredFrom);
 if (zData.reviewedStatus) {arrOfPairs.push(zp+"Stage__c", zData.reviewedStatus); }
 else { arrOfPairs.push(zp+"Stage__c", "Received"); }
 zData.stackPairs=arrOfPairs; //ERS190810 #61570 for child stack later
 arrOfPairs=zData.clientFields(doc,arrOfPairs,XCustomSetting(doc,"ZPAPER__zStackFields__c")); //ERS190803 #52661 using JSON
return arrOfPairs;
};

//alert("zData.clientFile");
zData.clientFile=function(doc,stage) { //ERS170829 #41298 returns a label to be used in any attaches and fixes the doc
 //Document attachment label should be "Patient Name - Doc Type - Date". Confirmed for zPaper File and SFDC Attachment
 var MMddYYYY = zData.formatTodayMMddYYYY();
 //CRN201025 #76788 Fixed to match the current demo.
 var patientName = X(doc,"X_ZPAPER__PatientAccount__r.Name");
 if (!patientName) {
 patientName = X(doc,"X_ZPAPER__FirstName__c") + " " + X(doc, "X_ZPAPER__LastName__c");
 }
 var faxType = keywordMap[X(doc,"X_ZPAPER__faxType__c")];
 if (!faxType) { faxType = X(doc,"X_ZPAPER__faxType__c"); }
 if (!faxType.indexOf(':') >= 0) { faxType = faxType.split(':')[1]; }
 // doc.label = patientName + " - " + faxType + " - " + MMddYYYY;
 //doc.label = patientName + " - " + faxType;
 doc.label = patientName ; //PV210104 updating label
 if (!patientName || patientName.length<5) { //ERS201129 #78830
 doc.label="Split from "+X(doc,"X_splitPages")+" of "+ X(doc,"X_fromPages") +" - "+MMddYYYY;
 doc.label="Document Indexed "+ X(doc,"X_fromPages") +" - "+MMddYYYY; //PV210626
 }
 alert("ERS170829 dbID="+doc.dbID+" label="+doc.label);
 if (zData.sfID && zData.sfID.indexOf("500")===0) {
 zData.provider = getSFField(doc, "Case", "Account.Name", null, zData.sfID);
 label = "Received from " + zData.provider;
 if (zData.facility) {
 zData.facility = getSFField(doc, "Case", "Account.Facility__r.Name", null, zData.sfID);
 doc.label+=" at "+zData.facility;
 }
}
var arrOfPairs = [];
 arrOfPairs.push("db-label", doc.label);
updateDB(doc,arrOfPairs);
 return doc.label;
};

zData.clientValue=function(doc,val) {//ERS190803 #52661 using JSON
 val=val.replace("{!formatNow}",zData.formatNow);
 return val;
}

zData.clientFields=function(doc,arrOfPairs,jd,zd) { //ERS190803 #52661 using JSON in setting to configure new record
 if (!zd) zd=zData;
if (jd && jd.indexOf("{")===0) {
 //{"Type":"Eligibility","OwnerId":"00Gc0000003vgqw","RecordTypeId":"0126A000000JEKeQAO"};
 //NOT A GOOD IDEA jd=jd.replaceAll("\"","'"); //ERS190811 #61570 HACK?
 jd=jd.replace("};","}"); //ERS201129 SHR to work out design on channel wizard for zStack child set ASAP
 try {
 var jdata=JSON.parse(jd); //ERS190805 better than eval
 for (var n in jdata) {
 var v0=jdata[n];
 var v=zData.clientValue(doc,v0); //ERS190811 ,v now ,v0
 alert("ERS190803.97 "+n+"="+v0+"="+v);
 arrOfPairs.push(n,v); //ERS190811 added .push
 zd[n]=v; //ERS201129 #78830 TODO review arrOfPairs access using for RecordTypeId
 }
 } catch (e) {
 alert("JSON not in "+jd+" Exception: "+e); //ERS190811 added e
 }
}
return arrOfPairs;
}


zData.clientCase=function(doc,arrOfPairs,label,zd) {
if (!zd) zd=zData;
if (!zd.triageType && X(doc,"X_ZPAPER__faxType__c")) zd.triageType=X(doc,"X_ZPAPER__faxType__c"); //ERS200308
if (!label) { label="Indexed-" + "-" + zd.triageType + "-" + zd.stackId;}

alert("ERS200308.128 new Case providerId="+zd.providerId+" patientId="+zd.patientId);
alert("zData.patientContactId : " + zData.patientContactId);
//arrOfPairs.push("Custom_Procedure__c",zData.X_zPaper_Procedure_Code_1__c);//ahs - commented
//arrOfPairs.push("AccountId",zData.X_ZPAPER__PatientAccount__c);
arrOfPairs.push("Referring_Provider__c",zData.X_ZPAPER__ProviderContact__c);
arrOfPairs.push("ContactId",zData.patientContactId);
arrOfPairs.push("Primary_Payer_Name__c",zData.X_ZPAPER_Primary_Payer_Name__c); //PV210111 updated
arrOfPairs.push("Primary_Member_ID__c",zData.X_ZPAPER_Primary_Member_ID__c);
arrOfPairs.push("Secondary_Payer_Name__c",zData.X_ZPAPER_Secondary_Payer_Name__c);
arrOfPairs.push("Secondary_Member_ID__c",zData.X_ZPAPER_Secondary_Member_ID__c);
arrOfPairs.push("Source__c","Fax");
arrOfPairs.push("To_Facility_Name__c",zData.X_ZPAPER_To_Facility__c);
arrOfPairs.push("AUC_DSN__c",zData.X_zPaper_AUC_DSN__c);
arrOfPairs.push("AUC_G_Code__c",zData.X_zPaper_AUC_G_Code__c);
arrOfPairs.push("AUC_Modifier__c",zData.X_zPaper_AUC_Modifier__c);
arrOfPairs.push("AUC_Score__c",zData.X_zPaper_AUC_Score__c);
//ERS170520 arrOfPairs.push("OwnerId", queuesMapKludge[X(doc,"X_Assign_to_Queue__c")]);
//if (zd.contactId) arrOfPairs.push("ContactId", zd.contactId);
arrOfPairs.push("ZPAPER__newFax__c", "true"); //JPB 170512 added these workflow fields
arrOfPairs.push("ZPAPER__latestFax__c", zd.formatNow); //JPB 170512 added these workflow fields
arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID); //ERS190814 //JPB 170512 added these workflow fields
arrOfPairs.push("Status", X(doc,"X_Status"));
arrOfPairs.push("ZPAPER__faxType__c",zd.triageType); //ERS200308
alert("X_ZPAPER__Priority__c : " + zData.X_ZPAPER__Priority__c);
if(zData.X_ZPAPER__Priority__c){
 arrOfPairs.push("Priority", zData.X_ZPAPER__Priority__c); //PV210119
 }
if(zData.X_Baptist_Heart_Specialist_Order__c){
 arrOfPairs.push("Baptist_Heart_Specialist_Order__c", zData.X_Baptist_Heart_Specialist_Order__c);
 }
 if(zData.X_Attestation_Included__c){
 arrOfPairs.push("Attestation_Included__c", zData.X_Attestation_Included__c);
 }
if(zData.X_Ready_for_Scheduling__c){
 arrOfPairs.push("Ready_for_Scheduling__c", zData.X_Ready_for_Scheduling__c);
 }
//ERS200205 arrOfPairs.push("Type", "New "+zd.classification); //JPB 170512 added these workflow fields
//ERS200308 arrOfPairs.push("Type", "New "+zd.docType);
if (1==1) { //ERS170523 #37162 after dryrun
 alert("@@@ zd.priority => *" + zd.priority + "*");
//arrOfPairs.push("RecordTypeId","012Q00000005Ahj"); //ERS170523 Prior Auth
//if (zd.priority != "Stat") { arrOfPairs.push("Priority",zd.priority); } //ERS170524 #37162 priority on Case
//else { arrOfPairs.push("Priority","Routine"); } //PV211901
arrOfPairs.push("Origin","Fax"); //ERSa200205 rrOfPairs.push("Origin",zd.channel);
}
 arrOfPairs=zData.clientFields(doc,arrOfPairs,XCustomSetting(doc,"ZPAPER__CaseFields__c")); //ERS190803 #52661 using JSON
 
 alert("ERS200308.143 new Case providerId="+zd.providerId+" patientId="+zd.patientId);
 //ahs - commented start - to fix overwriting contact/account
 //if (zd.providerId && zd.providerId.indexOf("001")==0) { arrOfPairs.push("AccountId", zd.providerId); } //ERS200308
 //if (zd.providerId && zd.providerId.indexOf("003")==0) { arrOfPairs.push("ContactId", zd.providerId); } //ERS200308
 //if (zd.patientId && zd.patientId.indexOf("001")==0) { arrOfPairs.push("AccountId", zd.patientId); } //ERS200308
 //if (zd.patientId && zd.patientId.indexOf("003")==0) { arrOfPairs.push("ContactId", zd.patientId); } //ERS200308
 //ahs - commented end - to fix overwriting contact/account
 //if (zd.zchannel.owner) { arrOfPairs.push("OwnerId", zData.zchannel.owner); } //ERS200308 PV210102 commented we are not using queue on case
 
 if(X(doc,"db-comments"))
    arrOfPairs.push("Order_Notes__c",X(doc,"db-comments"));
 
var caseId = createAndAttach(doc, "Case", label, arrOfPairs);
return caseId;
};

zData.clientPatient=function(doc,arrOfPairs,label,zd) {
if (!zd) zd=zData;
if (!label) { label=zd.stage + "-" + zd.triageType + "-" + zd.stackId;}
if (zd.patientId) { //ERS200205 #68825 Program Members
 alert("Patient already exists in "+zd.patientId);
 return zd.patientId; //TOOD get from X_patientId ????
}
//ERS170520 arrOfPairs.push("OwnerId", queuesMapKludge[X(doc,"X_Assign_to_Queue__c")]);
var p="ZPAPER__"; //ERS200202 assume workflow on related record types
if (zData.patientType.indexOf("__c") > -1) { p=""; } //ERS200203 typo
if (1==0) { //ERS200202 see if workflow enabled
 arrOfPairs.push(p+"newFax__c", "true"); //JPB 170512 added these workflow fields
 arrOfPairs.push(p+"latestFax__c", zd.formatNow); //JPB 170512 added these workflow fields
 arrOfPairs.push(p+"receivedId__c", doc.dbID); //ERS190814 //JPB 170512 added these workflow fields
}

 var rt=XCustomSetting(doc,"PatientRecordType__c"); //TODO into MP ERS190802 like 0126A000000JE8yQAG or empty to use default
 //if (rt) { arrOfPairs.push("RecordTypeId", rt); } //ERS190803
 //TODO Contact or Account ERS190624 DONE!! ERS190802
 arrOfPairs=zData.clientFields(doc,arrOfPairs,XCustomSetting(doc,"ZPAPER__PatientFields__c")); //ERS190803 #52661 using JSON
 alert("arrOfPairs : " + arrOfPairs);
 alert("patientfields custom setting : " + XCustomSetting(doc,"ZPAPER__PatientFields__c"));
 arrOfPairs=[]; //ERS200204 testing to get it going
 
 //ERS200202 need to make the Account with Patient recordType first
 //01246000000NGFYAA4 is .zpaper for Patient
 //alert("@@** account rt val : " + rt);
 var ar = [];
 //if (rt) { ar.push("RecordTypeId", rt); } //ERS190803 //ERS200222 #69149 moved down and added else
 //else { ar.push("RecordTypeId","01261000000QgmTAAS"); alert("@@@ Error record type is not picked up from custom setting") }
 ar.push("FirstName",zData.X_ZPAPER__FirstName__c);
 ar.push("LastName",zData.X_ZPAPER__LastName__c);
 ar.push("PersonHomePhone", zData.X_ZPAPER__Phone__c);
 alert("X_HealthCloudGA__Gender__pc===" + zData.X_HealthCloudGA__Gender__pc);
 alert("Gender__c===" + zData.X_Gender__c);
 if(zData.X_Gender__c){
 //ar.push("HealthCloudGA__Gender__pc",zData.X_Gender__c ); //PV210402 added
   ar.push("HealthCloudGA__Gender__pc",zData.X_Gender__c );
 } //PV210402 added
 if(zData.X_Gender__c){
   ar.push("Gender__pc",zData.X_Gender__c );
 }
 var patientName=zData.X_ZPAPER__LastName__c+", "+zData.X_ZPAPER__FirstName__c;
 ar=zData.clientFields(doc,ar,XCustomSetting(doc,"ZPAPER__PatientFields__c")); //PV201229 added to pass value from Custom settings
 if (zData.X_ZPAPER__Birthdate__c) ar.push("PersonBirthDate",zData.X_ZPAPER__Birthdate__c);
 //if (zData.X_ZPAPER__Phone__c) ar.push("PersonPhone",zData.X_ZPAPER__Phone__c); //PV210111 added phone
 alert("@@ar : " + ar);
 var aId = createSFRecord(doc, "Account", null, ar); //ERS200204 person account so do not set patientName
 
 if (aId && aId != "NEW" && aId.indexOf("ERROR")==-1) {
 var sfId = "";
 
 //ERS190803 specific to client data entry
 var dq = zData.dq;
 addPostExecutionScript(doc, " $(" + dq + "#Person_Account__c" + dq + ").val(" + dq + sfId + dq + "); ");
 addPostExecutionScript(doc, " $(" + dq + "#Person_Account__c_Name" + dq + ").val(" + dq + zData.X_ZPAPER__FirstName__c + " " + zData.X_ZPAPER__LastName__c + dq + "); ");
 return aId; //PV201229 to create Personaccount
 }
 return {'ERROR': 'patient not created'}
};

zData.clientAccount=function(doc,arrOfPairs,label,zd) {
if (!zd) zd=zData;
if (!label) { label=zd.stage + "-" + zd.triageType + "-" + zd.stackId;}
//ERS170520 arrOfPairs.push("OwnerId", queuesMapKludge[X(doc,"X_Assign_to_Queue__c")]);
arrOfPairs.push("ZPAPER__newFax__c", "true"); //JPB 170512 added these workflow fields
arrOfPairs.push("ZPAPER__latestFax__c", zd.formatNow); //JPB 170512 added these workflow fields
arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID); //ERS190814 //JPB 170512 added these workflow fields

var accountId = createAndAttach(doc, "Account", label, arrOfPairs);
return accountId;
};

zData.clientRecord=function(doc,sfType,arrOfPairs,label,zd) { //ERS190620 clientRecord generic
if (!zd) zd=zData;
if (!label) { label=zd.stage + "-" + zd.triageType + "-" + zd.stackId;}
//ERS170520 arrOfPairs.push("OwnerId", queuesMapKludge[X(doc,"X_Assign_to_Queue__c")]);
var zp="";
if (",Case,Contact,Account,Lead,Opportunity,ZPAPER__zStack__c,".toLowerCase().indexOf(","+sfType.toLowerCase()+",")>-1) zp=zData.zp;
//only do this if the fields exist
arrOfPairs.push(zp+"newFax__c", "true"); //JPB 170512 added these workflow fields
arrOfPairs.push(zp+"latestFax__c", zd.formatNow); //JPB 170512 added these workflow fields
arrOfPairs.push(zp+"receivedId__c", doc.dbID); //JPB 170512 added these workflow fields

//TODO put client specific data updates here

var newId = createAndAttach(doc, sfType, label, arrOfPairs);
return newId;
};

zData.clientComplete=function(doc,arrOfPairs,zd) {return arrOfPairs;}; //ERS190625
zData.clientDelivery=function(doc,arrOfPairs) { //ERS200202 TODO consider new Document_MVN
 return arrOfPairs;
}; //ERS190711 #60900 PAOS

zData.clientChildStack=function(doc,arrOfPairs,parentId) { //ERS190810 #61570 be sure to call on new child doc
 if(zData.X_ZPAPER__Priority__c && zData.X_ZPAPER__Priority__c != "DONOT_SAVE") arrOfPairs.push("ZPAPER__Priority__c", zData.X_ZPAPER__Priority__c);
 if(zData.X_ZPAPER_To_Facility__c && zData.X_ZPAPER_To_Facility__c != "DONOT_SAVE") arrOfPairs.push("ZPAPER_To_Facility__c", zData.X_ZPAPER_To_Facility__c);
 
 if(zData.X_ZPAPER_Primary_Payer_Name__c && zData.X_ZPAPER_Primary_Payer_Name__c != "DONOT_SAVE") arrOfPairs.push("ZPAPER_Primary_Payer_Name__c", zData.X_ZPAPER_Primary_Payer_Name__c);
 if(zData.X_ZPAPER_Primary_Member_ID__c) arrOfPairs.push("ZPAPER_Primary_Member_ID__c", zData.X_ZPAPER_Primary_Member_ID__c);
 
 if(zData.X_ZPAPER_Secondary_Payer_Name__c && zData.X_ZPAPER_Secondary_Payer_Name__c != "DONOT_SAVE") arrOfPairs.push("ZPAPER_Secondary_Payer_Name__c", zData.X_ZPAPER_Secondary_Payer_Name__c);
 if(zData.X_ZPAPER_Secondary_Member_ID__c) arrOfPairs.push("ZPAPER_Secondary_Member_ID__c", zData.X_ZPAPER_Secondary_Member_ID__c);
 
 if(zData.X_ZPAPER_Provider_Phone__c){
 arrOfPairs.push("ZPAPER_Provider_Phone__c", zData.X_ZPAPER_Provider_Phone__c); //PV210112
 }
 if(zData.X_ZPAPER_Provider_First_Name__c){
 arrOfPairs.push("ZPAPER_Provider_First_Name__c", zData.X_ZPAPER_Provider_First_Name__c); //PV210112
 }
 if(zData.X_ZPAPER_Provider_Last_Name__c){
 arrOfPairs.push("ZPAPER_Provider_Last_Name__c", zData.X_ZPAPER_Provider_Last_Name__c); //PV210112
 }
 if(zData.X_ZPAPER__NPI__c){
 arrOfPairs.push("ZPAPER__NPI__c", zData.X_ZPAPER__NPI__c); //PV210112
 }
 if(zData.X_ZPAPER__Priority__c){
 arrOfPairs.push("ZPAPER__Priority__c", zData.X_ZPAPER__Priority__c); //PV210119
 }
 if(zData.X_zPaper_Reason_for_Visit__c) arrOfPairs.push("zPaper_Reason_for_Visit__c", zData.X_zPaper_Reason_for_Visit__c); //PV210104
 if(zData.X_Baptist_Heart_Specialist_Order__c) arrOfPairs.push("Baptist_Heart_Specialist_Order__c", zData.X_Baptist_Heart_Specialist_Order__c);
 if(zData.X_Attestation_Included__c) arrOfPairs.push("Attestation_Included__c", zData.X_Attestation_Included__c); //PV211220
 if(zData.X_Ready_for_Scheduling__c) arrOfPairs.push("Ready_for_Scheduling__c", zData.X_Ready_for_Scheduling__c);
 
 if(zData.X_zPaper_AUC_DSN__c)arrOfPairs.push("zPaper_AUC_DSN__c",zData.X_zPaper_AUC_DSN__c);
 if(zData.X_zPaper_AUC_G_Code__c)arrOfPairs.push("zPaper_AUC_G_Code__c",zData.X_zPaper_AUC_G_Code__c);
 if(zData.X_zPaper_AUC_Modifier__c)arrOfPairs.push("zPaper_AUC_Modifier__c",zData.X_zPaper_AUC_Modifier__c);
 if(zData.X_zPaper_AUC_Score__c)arrOfPairs.push("zPaper_AUC_Score__c",zData.X_zPaper_AUC_Score__c);
 //if(zData.X_Case_Notes__c)arrOfPairs.push("Case_Notes__c",zData.X_Case_Notes__c);
 
 var pairs=arrOfPairs;
 //no memory of stack creation var pairs=zData.stackPairs;
 //CRN201026 #76788 We need reviewedStatus to be "Indexed" for the index rule, so only set the field if it isn't already set.
 if (!zData.reviewedStatus) { zData.reviewedStatus="Split"; }
 //pairs.push("ZPAPER__Status__c", "Child Stack"); //ERS190810 TODO? //PV210201
 alert("debug pairs : " + pairs);
 
 pairs=zData.clientStack(doc,pairs);
 if (XCustomSetting(doc,"ZPAPER__zChildFields__c")) { //ERS190811 not in all MPs
 pairs=zData.clientFields(doc,pairs,XCustomSetting(doc,"ZPAPER__zChildFields__c")); //ERS190803 #52661 using JSON child record type id
 }
 alert("debug pairs : " + pairs);
 pairs.push("ZPAPER__Parent__c", parentId);
 //ERS201128 should be in zChildFields if (zData.childStackRecordType) pairs.push("RecordTypeId",zData.childStackRecordType);
 
 pairs.push(zData.zp+"Program__c",zData.programName); //ERS200205 TODO in package and into base call //PV201229 added zp
 //ERS200229 if (zData.patientId) pairs.push("Program_Member_MVN__c",zData.patientId); //ERS200205 Program_Member_MVN__c was the TICKET!!!
 alert("ERS190811.191 ZPAPER__Parent__c"+ parentId+" child zData.childStackRecordType="+zData.childStackRecordType);
 alert("debug pairs : " + pairs);
if (!zData.docType && !X(doc,"X_ZPAPER__faxType__c")) { //PV210318
	zData.docType=getSFField(doc, "ZPAPER__zStack__c", "ZPAPER__faxType__c", null, parentId);
	pairs.push("ZPAPER__faxType__c", zData.docType);
 }
 if (zData['RecordTypeId']) { zData.childStackRecordType=zData['RecordTypeId']; } //ERS201129 #78830 TODO not sure where this is used elsewhere
 alert("ERS201129.292 ZPAPER__Parent__c"+ parentId+" child RecordTypeId="+zData['RecordTypeId']);
 var childStackSFId = createAndAttach(doc, "ZPAPER__zStack__c", "zStack "+zData.reviewedStatus+" on " + zData.formatNow, pairs) + ""; // PV210208 "zStack split on " 
 
 if (!zData.patientId && X(doc,"X_ZPAPER__PatientAccount__c") ){ //ERS200308 HACK
 zData.patientId=X(doc,"X_ZPAPER__PatientAccount__c");
 alert("ERS200308 WHY NOT in zData?");
 }
 if (zData.patientId) { //ERS200308 create an Activity Event related to the Patient (Account) for the Timeline
 if (!zData.docType && X(doc,"X_ZPAPER__faxType__c")) zData.docType=X(doc,"X_ZPAPER__faxType__c");
 var arr=[];
 //NOT SELECT AccountId,ActivityDate,CreatedDate,Status,Subject,TaskSubtype,WhatId,WhoId FROM Task where ActivityDate > 2020-02-01
 //SELECT Id,AccountId,ActivityDate,CreatedDate,Subject,WhatId,WhoId FROM Event where Id = '00U4T000002vChrUAE'
 //arr.push("WhoId",zData.patientId); //ERS200310 timeline trick
 if (zData.patientId.indexOf("001")==0) {
 arr.push("WhatId",zData.patientId); //ERS200310 timeline trick
 //arr.push("AccountId",zData.patientId); //ERS200310 timeline trick
 } else if (zData.caseId) arr.push("WhatId",zData.caseId);
 else if (zData.providerId) arr.push("WhatId",zData.providerId);
 else arr.push("WhatId",childStackSFId);
 //arr.push("TaskSubtype","Task");
 arr.push("Subject",zData.stage + " "+zData.docType);
 arr.push("Description","Check out "+doc.dbID);
 //arr.push("ActivityDateTime",zData.formatNow); //ERS200309 hacking away!
 arr.push("ActivityDate",zData.formatNow.substring(0,10));
 //arr.push("RecordTypeId","01261000000j3PaAAI"); //ERS200310 HACK for Task on CarePlan //PV200218 updated record type idof TASK
  
 if (XCustomSetting(doc,"TaskFields__c")) { //ERS190811 not in all MPs
 arr=zData.clientFields(doc,arr,XCustomSetting(doc,"TaskFields__c")); //ERS190803 #52661 using JSON child record type id
 }
 //arr.push("DurationInMinutes","5");
 //arr.push("Status","Completed");
 
 var label="Timeline "+zData.docType;
 //var actId = createSFRecord(doc, "Task", null, arr); //ERS200309 null means no Name field //PV201229 we don't need to create atsk
 //var actId = createSFRecord(doc, "Event", null, arr); //ERS200309 null means no Name field
 //alert("ERS200308.262 timeline activity "+actId);
 } else { alert("ERS200308.263 be worried there is no patient!"); }
 if (1===1 && zData.clientReceivedDocument) { zData.recDocId=zData.clientReceivedDocument(doc,childStackSFId); } //ERS201018 #77252
 return childStackSFId;
};


zData.updateStackIdOnCases=function(caseIds, stackId) {
    alert("@caseIds" + caseIds);
    alert("@stackId" + stackId);
    var zStckIdOnCase = "";
	if(!caseIds)
		caseIds = [];
	if(caseIds.indexOf(zData.caseId) == -1 && zData.caseId) {
	    caseIds.push(zData.caseId);
	    zStckIdOnCase = getSFField(doc, "case", "zStack__c", null, zData.caseId);//PV211006 //PV211130
	}

	for(var i = 0; i < caseIds.length; i++) {
	    if (!zStckIdOnCase){
	        var caseArrOfPairs = [];
		    caseArrOfPairs.push("zStack__c", stackId);
		    updateSFRecord(doc, "case", caseIds[i], caseArrOfPairs); //PV220110
	    }
	}
}
zData.clientStackComplete=function(doc,arrOfPairs,zd) { //ERS200314 #70336
 if (!zd) zd=zData; //ERS200406 #71156
 arrOfPairs.push("Time_Complete_Date__c",zd.formatNow); //for dashboard
 return arrOfPairs;
}; //ERS190625

zData.clientCasesForProcedureCode=function(doc,arrOfPairs) {
    zData.attachPathIds = "";//store reference to ids that are to be added to attachPath
    //PV210102 data entry pannel 2
    var Diagnosis_Code__c="";
    if(zData.X_ZPAPER_Diagnosis_Code_1__c){
    	arrOfPairs.push("ZPAPER_Diagnosis_Code_1__c", zData.X_ZPAPER_Diagnosis_Code_1__c);
    	healthCareDiagnosis = getSFField(doc, "HealthCareDiagnosis", "Code", null, zData.X_ZPAPER_Diagnosis_Code_1__c);
    	Diagnosis_Code__c+=healthCareDiagnosis +  ","; //PV210112 updated Name to Code
    }
    
    if(zData.X_ZPAPER_Diagnosis_Code_2__c) {
    	arrOfPairs.push("ZPAPER_Diagnosis_Code_2__c", zData.X_ZPAPER_Diagnosis_Code_2__c);
    	healthCareDiagnosis = getSFField(doc, "HealthCareDiagnosis", "Code", null, zData.X_ZPAPER_Diagnosis_Code_2__c);
    	Diagnosis_Code__c+= healthCareDiagnosis +  ","; //PV210112 updated Name to Code
    }
    if(zData.X_ZPAPER_Diagnosis_Code_3__c) {
    	arrOfPairs.push("ZPAPER_Diagnosis_Code_3__c", zData.X_ZPAPER_Diagnosis_Code_3__c);
    	healthCareDiagnosis = getSFField(doc, "HealthCareDiagnosis", "Code", null, zData.X_ZPAPER_Diagnosis_Code_3__c);
    	Diagnosis_Code__c+= healthCareDiagnosis +  ","; //PV210112 updated Name to Code
    }
    
    var caseIds = [];
    arrOfPairsCase=[];
    arrOfPairsCase.push("Diagnosis_Code__c",Diagnosis_Code__c);
    //var sfStackId=zData.getStackId(doc);
    //arrOfPairsCase.push("zStack__c",sfStackId); //PV211202
    if(zData.patientId)
        zData.patientContactId=getSFField(doc, 'Contact', 'Id', 'AccountId=\'' + zData.patientId + '\'', null);
    //alert("patient contact id : " + zData.patientContactId); //PV210126 commented
    if(zData.X_zPaper_Procedure_Code_1__c){
        arrOfPairs.push("zPaper_Procedure_Code_1__c", zData.X_zPaper_Procedure_Code_1__c);
        arrOfPairsCase.push("Custom_Procedure__c",zData.X_zPaper_Procedure_Code_1__c);
        var caseId = zData.clientCase(doc,arrOfPairsCase);
        zData.attachPathIds+=","+caseId;
        caseIds.push(caseId);
        arrOfPairs.push("Case1__c", caseId); //PV210119 added to update caselookup field on zstack
       
    }
    if(zData.X_zPaper_Procedure_Code_2__c){
        arrOfPairs.push("zPaper_Procedure_Code_2__c", zData.X_zPaper_Procedure_Code_2__c);
        arrOfPairsCase.push("Custom_Procedure__c",zData.X_zPaper_Procedure_Code_2__c);
        var caseId = zData.clientCase(doc,arrOfPairsCase); //PV210105 for attchment on docset
        zData.attachPathIds+=","+caseId;
        caseIds.push(caseId);
        arrOfPairs.push("Case2__c", caseId);
    }
    if(zData.X_zPaper_Procedure_Code_3__c) {
        arrOfPairs.push("zPaper_Procedure_Code_3__c", zData.X_zPaper_Procedure_Code_3__c);
        arrOfPairsCase.push("Custom_Procedure__c",zData.X_zPaper_Procedure_Code_3__c);
        var caseId =zData.clientCase(doc,arrOfPairsCase);
        zData.attachPathIds+=","+caseId;
        caseIds.push(caseId);
        arrOfPairs.push("Case3__c", caseId);
    }
    //PV210119 added case creation logic if there is no procedure code
    //if(zData.X_ZPAPER__Priority__c && !zData.X_zPaper_Procedure_Code_1__c && !zData.X_zPaper_Procedure_Code_2__c && !zData.X_zPaper_Procedure_Code_3__c  ){
    if(!zData.caseId && zData.X_ZPAPER__Priority__c && !zData.X_zPaper_Procedure_Code_1__c && !zData.X_zPaper_Procedure_Code_2__c && !zData.X_zPaper_Procedure_Code_3__c  ){
        var caseId =zData.clientCase(doc,arrOfPairsCase);
        zData.attachPathIds+=","+caseId;
        caseIds.push(caseId);
        arrOfPairs.push("ZPAPER__Case__c", caseId);
    }
    
    zData.caseIds = caseIds;
};

zData.clientProvider=function(doc, arrOfPairs) {
    //label will be auto populated
    alert("debugging provider data : ");
    alert("zData.X_ZPAPER_Provider_First_Name__c : " + zData.X_ZPAPER_Provider_First_Name__c + "; ZPAPER_Provider_First_Name__c : " + zData.ZPAPER_Provider_First_Name__c);
    alert("zData.X_ZPAPER_Provider_Last_Name__c : " + zData.X_ZPAPER_Provider_Last_Name__c + "; ZPAPER_Provider_Last_Name__c : " + zData.ZPAPER_Provider_Last_Name__c);
    alert("zData.X_ZPAPER_Provider_Phone__c : " + zData.X_ZPAPER_Provider_Phone__c + "; ZPAPER_Provider_Phone__c : " + zData.ZPAPER_Provider_Phone__c);
    alert("zData.X_ZPAPER__NPI__c : " + zData.X_ZPAPER__NPI__c + "; ZPAPER__NPI__c : " + zData.ZPAPER__NPI__c);

    arrOfPairs.push("FirstName", zData.X_ZPAPER_Provider_First_Name__c);
    arrOfPairs.push("LastName", zData.X_ZPAPER_Provider_Last_Name__c);
    arrOfPairs.push("Phone", zData.X_ZPAPER_Provider_Phone__c);
    arrOfPairs.push("NPI__c", zData.X_ZPAPER__NPI__c);

    var providerFields = XCustomSetting(doc,"zPaper_ProviderFields__c");
    alert("providerFields - " + providerFields);
    
    arrOfPairs=zData.clientFields(doc,arrOfPairs,XCustomSetting(doc,"zPaper_ProviderFields__c"));
    alert("arrOfPairs : " + arrOfPairs);
    
    zData.providerId = zData.clientRecord(doc,zData.providerType, arrOfPairs, '', zData);
    providerName =zData.X_ZPAPER_Provider_First_Name__c+" "+zData.X_ZPAPER_Provider_Last_Name__c; //PV201229 added this to show newly created contact on lookup
    var dq = zData.dq = String.fromCharCode(34);
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__ProviderContact__c" + dq + ").val(" + dq + zData.providerId + dq + "); ");
    addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__ProviderContact__c_Name" + dq + ").val(" + dq + providerName + dq + "); ");
};



zData.clientLightningFile=function(doc,sfIds,zd) {
	if (!zd) zd = zData;
	if (!doc.kbData.sfServer) {
		//ERS200428 HACK
		alert("doc.kbData.sfServer was empty. Ideally should NOT come here");
		doc.kbData.sfServer = "takedapatientservices--tkdev2.lightning.force.com";
	}
	var zserver = doc.kbData.sfServer.indexOf("https://") == 0 ? doc.kbData.sfServer : "https://" + doc.kbData.sfServer;
	// Salesforce REST API endpoint
	var docurl = zserver + "/services/data/v46.0/sobjects/ContentVersion/";
	var pdfurl = "https://gw.zpaper.com/kb/jsp/SF_find.lightning.jsp?go=SF_files.jsp&dbID=" + doc.dbID + "&SForg=" + doc.kbData.sfOrganizationID;

	// Generate PDF file from zStack
	var formatNow = getCurDateAndTime(doc, false, true); // e.g. "20210210-052132"?
	var arrOfPairs = [];
	var nowTimeStamp = new Date().getTime() + "";
    //var fileName = !accname && !faxtype ? doc.label : accname + " - " + faxtype + " - " + datestr;
    var accname = X(doc, "X_ZPAPER__PatientAccount__r.Name");
    var faxtype = X(doc, "X_ZPAPER__faxType__c");
    var datestr = getCurDate(doc);
    if(!faxtype)//PV210318
	 faxtype = zData.docType; //PV210318 added it for to update doctype on Lightning files
	 if(!accname)
		accname = X(doc, "X_ZPAPER__FirstName__c") + " " + X(doc, "X_ZPAPER__LastName__c"); //PV210318
		
    var fileName = !accname && !faxtype ? doc.label : accname + " - " + faxtype + " - " + datestr;
    fileName += ".pdf";
	//var fileName = getCurDate(doc) + " New Fax.pdf"; // e.g - "20210210 New Fax.pdf"?
	alert("@@@fileName = " + fileName);

	zData.uploadDir = 'zStackUploadRoot'; //setting root directory for file creation

	// create directory to place generated PDF file
	createDirectory(doc, zData.uploadDir, nowTimeStamp);

	var xPages = X(doc, "X_position"); //get X_position - page range selected; default = all pages
	alert("@@@@@ Calling splitPDF to split off pages to upload as PDF, pages = " + xPages + ", nowTimeStamp = " + nowTimeStamp);
	var response = splitPDF(doc, xPages, zData.uploadDir, nowTimeStamp, fileName);
	alert("@@@@ response from splitPDF = " + response);
	var newPDFName = X(doc, "newPDF", response); // set value of newPDF

	alert("@@@@ split PDF FileName = " + newPDFName);

	// Cannot directly Append PDF file to multipart formdata
	// JS does not allow reading a file from the file system (normally applies to client side for security reasons)
	// We dont have a Node.js container, so no luck there.. have to do this another way
	// Eric suggested we use uploadToCloud.jsp approach to create Lightning File (probably ContentDocument) in Salesforce

	//var uploadURL = "http://localhost:8080/myfileforce/uploadToCloud.jsp?SFtype=ContentVersion&SFid=NEW&SFpid=" + sfIds[0] + "&SForg=" + doc.kbData.sfOrganizationID + "&label=" + fileName + "&serverFile=" + newPDFName + "&Description=File attached as PDF";//PV210423 updated URL
     var uploadURL = "http://localhost:8080/myfileforce/uploadToCloud.jsp?SFtype=ContentVersion&SFid=NEW&SFpid=" + sfIds[0] + "&SFServer=" + doc.kbData.sfServer + "&SFSession=" + doc.kbData.sfSessionID + "&label=" + fileName + "&serverFile=" + newPDFName + "&Description=File attached as PDF";//PV210511 updated URL
	alert("#### Upload native PDF with " + uploadURL);

	var r = wget(doc, uploadURL); // ????? will r contain the ContentDocument id?

	alert('value from wget response >>> ' + r);

	var idxBegin = r.indexOf("<sfID>");
	var idxEnd = r.indexOf("</sfID>");
	var sfdocId;
	if (idxEnd > idxBegin) {
		sfdocId = r.substring(idxBegin + 6, idxEnd);
		alert("sfDocId extracted from r : " + sfdocId);
	}

	// Finally, delete the folder and all contents.
	cleanupDirectory(doc, zData.uploadDir, nowTimeStamp);
	
	var headers = [
        "Authorization", "Bearer " + doc.kbData.sfSessionID,
        "Content-Type", "application/json"
    ];
	docurl = zserver + '/services/data/v49.0/sobjects/ContentDocumentLink/';
	for (var index = 1; index < sfIds.length; index++) {
	    //sharing files with other records
        try {
            var currentContentDocumentLinkRecord = {
                "ContentDocumentId": sfdocId,
                "LinkedEntityId": sfIds[index],
                "ShareType": "I"
            };
            body = JSON.stringify(currentContentDocumentLinkRecord);
            res = wpost(doc, docurl, [], headers, body);
        } catch (errs) {
            alert(errs);
        }
    }
	
	return null;
}

zData.clientUpdateCase=function(doc,sfId,zd) {
    var existingCaseNotes = getSFField(doc, "Case", "Order_Notes__c", null, sfId);
    if(existingCaseNotes) {
        existingCaseNotes += '\\n';
    } else {
        existingCaseNotes = "";
    }
    
    if(X(doc,"db-comments")) {
        var newCaseNotes = existingCaseNotes + X(doc,"db-comments");
        var arrOfPairs = ["Order_Notes__c", newCaseNotes];
        updateSFRecord(doc, "Case", sfId, arrOfPairs);
    }
}
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
