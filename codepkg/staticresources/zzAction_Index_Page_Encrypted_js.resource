<!--
// Name: Index Page Encrypted
// Committer: Prathyusha.vasireddy2zpaper.com
// Update: updated
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-05-29 17:44:47","active":true,"button":"Index","name":"Index Page Encrypted","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"Index","operation":"equals"}]},"consequence":{"doit":""},"ordinal":7}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//this is a copy and update of the existing Index Page rule. Temp use for Shield Encryption testing
alert("@@@@ Index Encrypted Rule Fired @@@#");
/* double-quote, newline characters */
var dq = String.fromCharCode(34);
var nl = String.fromCharCode(10);
var formatNow = getCurDateAndTime(doc);

//here is another silly comment

/* MSH171130 #43649 created date for original doc */
var docCreatedDate = gmtFormatted(doc, "created");
var attachPath = X(doc, "X_attachedTo");
var patientFirstName = "";
var patientLastName = "";
var patientDOB = "";
var patientId = "";
var tiffSfId="";
var stackId = X(doc, "X_stack"); //zPaper dbID
var sfStackId = X(doc, "X_sfStackId");
var orgDocId = doc.dbID;  //PV022618
if (sfStackId === "") { //ERS170731 #40593
    /* MSH170814 this doesn't do anything useful X(doc, "X_attachedTo"); */
    /* MSH171129 we already got attachPath, use it sfStackId = X(doc, "X_attachedTo"); */
    sfStackId = attachPath;
    if (sfStackId.lastIndexOf('/') >= 0) {
        sfStackId = sfStackId.substring(sfStackId.lastIndexOf('/') + 1);
        if (sfStackId.indexOf(',') >= 0) { sfStackId = sfStackId.substring(0, sfStackId.indexOf(',')); }
    }
}
alert("@@@ Currently attached to ZPAPER__zStack__c with sfStackId: " + sfStackId);

//AN20180716 for code review - are these variables and IF statement still needed, since we are no longer user folders?
var originalSfStackId = sfStackId;
alert("@@@ originalSfStackId = " + originalSfStackId);
var stackFolder = stackId + "-STACK";
/* Clear the trigger that invoked this rule */
zData.clearTriggerCondition(doc, "X_buttonAction");
var indexInitialized = X(doc, "X_indexInitialized");
if (!indexInitialized || 0 === indexInitialized.length) {
    stackId = new Date().getTime() + "";
    stackFolder = stackId + "-STACK";
    /* MSH170814 mismatched param list */
    /* zData.initializeStack(doc, stackFolder, companyCode, stackId); */
    zData.initializeStack(doc, stackFolder, stackId);
}

var personAccountId = X(doc, "X_Person_Account__c");
var caseId = X(doc, "X_ZPAPER__Case__c");
alert("@@@ caseId = " + caseId);
alert("@@@ personAccountId = " + personAccountId);
if (!personAccountId) {
    alert("@@@ creating PersonAccount @@@");
    var accountFirstName = X(doc, "X_ZPAPER__FirstName__c");
    var accountLastName = X(doc, "X_ZPAPER__LastName__c");
    var accountBirthDate = X(doc, "X_ZPAPER__Birthdate__c");
    var zpArrOfPairs =[];
    zpArrOfPairs.push("RecordTypeId", "0126A000000JE8yQAG");
    zpArrOfPairs.push("FirstName",accountFirstName);
    zpArrOfPairs.push("PS_PatientFirstName__c",accountFirstName);
    zpArrOfPairs.push("PS_PatientLastName__c",accountLastName);
    zpArrOfPairs.push("LastName",accountLastName);
    zpArrOfPairs.push("PersonBirthdate",accountBirthDate);

    personAccountId = createSFRecord(doc, "Account", "Person - Account", zpArrOfPairs);
}
alert("@@@ AFTER CREATING PERSONACCOUNT");
var caseFlds = getSFFields(doc, "Case", "RecordTypeId,ContactId,AccountId", null, caseId); //AN20180718 get the fields from the Case that we will need

var recTypeId = X(doc, "RecordTypeId", caseFlds);
var recTypeName = getSFField(doc, "RecordType", "Name", null, recTypeId); //AN20180718 get the name of the current Case record type

patientId =  X(doc, "ContactId", caseFlds); //get the Contact ID since PAP uses the Contact object for Patients
   
    var contactFlds = getSFFields(doc, "Account", "PS_PatientFirstName__c,PS_PatientLastName__c,PersonBirthdate", null, personAccountId); //MSH170818 added Birthdate
    alert("@@@ calling SF for contactFlds :: " + contactFlds);
    patientFirstName = X(doc, "PS_PatientFirstName__c", contactFlds);
    patientLastName = X(doc, "PS_PatientLastName__c", contactFlds);
    patientDOB = X(doc, "PersonBirthdate", contactFlds);


var MMddYYYY = zData.formatTodayMMddYYYY();
/*MSH171129 we already got docType, use it attachLabel = patientFirstName + patientLastName + " - " + X(doc,"X_ZPAPER__faxType__c") + " - " + MMddYYYY;*/
attachLabel = patientFirstName + patientLastName + " - " + docType + " - " + MMddYYYY;

/* Get the document type (will be used to route to next folder) */
var docType = X(doc, "X_docType");
var attachLabel = ""; /* MSH170818 format should be "Patient Name - Doc Type - Date" */

var prevIndexPages = X(doc, "X_indexedPages");
var curIndexPages = X(doc, "X_idxPages");
if (prevIndexPages && prevIndexPages.length > 0 && curIndexPages && curIndexPages.length > 0) {
    prevIndexPages += ",";
}
curIndexPages = prevIndexPages + curIndexPages;
var arrOfPairs = [];
arrOfPairs.push("X_indexedPages", curIndexPages);
updateDB(doc, arrOfPairs);

/* SPLIT OFF NEW SNIPPET HERE */
var pageRange = X(doc, "X_idxPages");
alert("@@@ pageRange = " + pageRange);
var arrOfPairs1 = []; //PV280319 updated for copy on split
var pageCount =zData.countPages(doc, pageRange);
//var pageRange = "1-" + pageCount;
    alert("@@@ pageRange === " + pageRange);
   
var newDbId = splitDocumentForIndex(doc, "index", pageRange,arrOfPairs1);
alert("@@@ after splitDocumentForIndex");
/* alert("@@@ Case '" + caseId + "' and len = " + caseId.length); */
//*
/* AFTER THIS POINT, THE DOC WILL HOLD DATA FOR NEW SNIPPET, NOT THE STACK SNIPPET */
//*

/* MSH171115 #43613 */
/*alert("@@@ newDbId = " + newDbId);
 setDocumentContext(doc, newDbId);*/

docType = X(doc, "X_ZPAPER__faxType__c");
zData.docType = docType;
attachLabel = zData.nameFile(doc); //ERS170829 #41298
alert("@@@ patientId from X_ZPAPER__Patient__c = " + patientId);

alert("@@@ X_ZPAPER__Patient__r.Name :: " + X(doc, "X_ZPAPER__Patient__r.Name"));

/*MSH171129 we already got docType, use it attachLabel = patientFirstName + patientLastName + " - " + X(doc,"X_ZPAPER__faxType__c") + " - " + MMddYYYY;*/
attachLabel = patientFirstName + patientLastName + " - " + docType + " - " + MMddYYYY;

//MSH170829 clear out the "New Patient" fields
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__FirstName__c" + dq + ").val(" + dq + patientFirstName + dq + "); ");
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__LastName__c" + dq + ").val(" + dq + patientLastName + dq + "); ");
//addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c" + dq + ").val(" + dq + "" + dq + "); ");
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c_readable" + dq + ").val(" + dq + patientDOB + dq + "); ");

//MSH170829 set the Patient lookup fields
addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c_Name" + dq + ").val(" + dq + patientFirstName + " " + patientLastName + dq + "); ");

// update stack
alert("@@@ ready to update StackID = " + stackId); //MSH170926
alert("@@@ setting patient field on StackID = " + stackId + ", Patient = " + patientId);
arrOfPairs = [];

arrOfPairs.push("ZPAPER__FirstName__c", patientFirstName);
arrOfPairs.push("ZPAPER__LastName__c", patientLastName);
if (patientDOB && patientDOB.length > 0) {
    arrOfPairs.push("ZPAPER__Birthdate__c", patientDOB);
}

arrOfPairs.push("Drug_Type__c", X(doc, "X_Drug_Type__c"));
arrOfPairs.push("Missing_Information__c", X(doc, "X_Missing_Information__c"));
arrOfPairs.push("ZPAPER__faxType__c", docType);
arrOfPairs.push("Attributes_Last_Modified__c", formatNow);
arrOfPairs.push("Attributes_Modified_By__c", doc.kbData.remoteUser);
alert("@@@ updating new stack with :: " + arrOfPairs);
updateSFRecord(doc, "ZPAPER__zStack__c", sfStackId, arrOfPairs);


/* Attach the split document to a new Case record, if it wasn't passed in */
var priority = X(doc, "X_ZPAPER__Priority__c"); //ERS170626
var caseNumber = "";

/* MSH171129 #43649 */
/* this is used for all cases, either created or existing */
arrOfPairs = [];

alert("@@@@ attaching to existing Case: " + caseId);
var missingInfo = X(doc, "X_Missing_Information__c");
if (missingInfo && missingInfo == "true") {
    //MSH170828 if missingInfo == true, set status to Information Received
    arrOfPairs.push("Status", "Information Received");
    arrOfPairs.push("PS_Missing_Info_received__c", formatNow); //MSH170912
}
arrOfPairs.push("zPaper_Is_available_for_upstream__c", 'true'); // updated filed for TIBCO PV022718
alert("@@@ zPaper_Is_available_for_upstream__c" + arrOfPairs );
attach(doc, attachLabel, personAccountId);
attachPath = X(doc, "X_attachedTo");
arrOfPairs = [];
if (attachPath.indexOf(caseId) == -1) {
    attachPath += "," + caseId;
}
//if (providerId && providerId.length > 0) {
    //arrOfPairs.push("ZPAPER__Provider__c", providerId);
    //if (attachPath.indexOf(providerId)==-1) { attachPath+=","+providerId; }
//}
if (patientId && patientId.length > 0) {
    arrOfPairs.push("ZPAPER__Patient__c", patientId);
    if (attachPath.indexOf(patientId) == -1) { attachPath += "," + patientId; }
}
if (caseId && caseId.length > 0) {
    arrOfPairs.push("ZPAPER__Case__c", caseId);
}

if (personAccountId && personAccountId.length > 0) {
    arrOfPairs.push("Person_Account__c", personAccountId);
} 

updateSFRecord(doc, "ZPAPER__zStack__c", sfStackId, arrOfPairs);
attach(doc, attachLabel, sfStackId);
alert("@@@ updated and attached to zStack Record, id = " + sfStackId);

// lets create tiff image for pdf here
alert("@@@ tiff flag ### = " + zData.generateTiff);
alert("@@@ pageRange ### = " + pageRange);
tiffSfId = personAccountId;
if (zData.generateTiff) {
    var attachmentName = attachLabel; //PV022618
    var childDocId = doc.dbID; //PV022618
    setDocumentContext(doc, orgDocId);
    /*  create and attach tif */
    /* Attach file in addition to envelope */
    var nowTimeStamp = new Date().getTime() + "";
    //found in /zpdata/conf/workflow.props
    //a directory in which to do the work
    //integrationDir=/zpdata/agents/mck/integration/
    createDirectory(doc, zData.uploadDir, nowTimeStamp);
   
    //Page Range can contain non-numeric characters from Page Rotation eg:### pageRange ###1u,2,8,7,6,5,4,3
    //make sure page range array is cleared of all non-numeric chars
    //MSH180924 don't need min & max, just strip out alpha chars.
    //      parsing is handled downstream in com.knowledgebin.Utils public static Collection<Integer> parsePages(String pages)
 
    //regex: find all alpha chars ([a-z]), globally (g), and case-insensitive (i)
    var noAlphaPages = pageRange.replace(/[a-z]/gi, "");
    alert("@@@@@ Calling split, pages = " + noAlphaPages + ", nowTimeStamp = " + nowTimeStamp);

    //MSH180924 #52440 var response = splitPDF(doc, minPage + "-" + maxPage, zData.uploadDir, nowTimeStamp, doc.dbID);
    var response = splitPDF(doc, noAlphaPages, zData.uploadDir, nowTimeStamp, doc.dbID);
    alert("@@@@ response from splitPDF = " + response);
    var newPDFName = X(doc, "newPDF", response);
    alert("@@@@ split PDF FileName = " + newPDFName);
    var newTIFFName = pdf2tiff(doc, newPDFName);
    alert("@@@@ pdf2tiff FileName = " + newTIFFName);
    var label = attachmentName + ".tif";
    if (newTIFFName.indexOf("ERROR") !== 0) {
        var uploadURL = "http://localhost:8080/myfileforce/uploadToCloud.jsp?SFid=NEW&SFpid=" + tiffSfId + "&SForg=" + doc.sfOrg + "&label=" + label + "&serverFile=" + newTIFFName + "&Description=File attached by zPaper.";
        alert("@@@# Upload native PDF with " + uploadURL);
        var r = wget(doc, uploadURL);
        alert("@@@# tiff created and attached to: " + caseId);
        cleanupDirectory(doc, zData.uploadDir, nowTimeStamp);
        /* Finally, delete the work folder and all contents. */
        //MSH170222 ERS wants to keep cleanupDirectory(doc, "integrationDir", nowTimeStamp);
    }
    //MSH181008 since we changed the doc context, change it back
    setDocumentContext(doc, childDocId);
}

addPostExecutionScript(doc, " $(" + dq + "#Person_Account__c" + dq + ").val(" + dq + personAccountId + dq + "); ");
addPostExecutionScript(doc, " $(" + dq + "#Person_Account__c_Name" + dq + ").val(" + dq + patientFirstName +" " +patientLastName + dq + "); ");
arrOfPairs = [];
arrOfPairs.push("X_reviewedStatus", "Indexed");
/* CRN160825 Set the page count so that it does not have the parent page count */
 pageCount = zData.countPages(doc, pageRange);
alert("@@@@ pageCount = " + pageCount);
arrOfPairs.push("X_pages", pageCount);
arrOfPairs.push("X_docType", docType); /* MSH170927 get all the docTypes aligned */
arrOfPairs.push("db-pages", pageCount);
if (!patientFirstName || 0 === patientFirstName.length) { patientFirstName = "Unknown"; }
if (!patientLastName || 0 === patientLastName.length) { patientLastName = "Name"; }
/* MSH170818 arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + companyCode + " - " + stackId); */
/* ERS170829 nameFile does it arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + doc.deliveredTo + " - " + stackId); */
arrOfPairs.push("X_attachedTo", attachPath); //ERS170628
arrOfPairs.push("X_ZPAPER__Case__c", caseId); //MSH170828
arrOfPairs.push("Person_Account__c", personAccountId);
arrOfPairs.push("X_ZPAPER__Case__r.CaseNumber", caseNumber); //MSH170828
arrOfPairs.push("X_ZPAPER__Patient__c", patientId); //MSH170828
arrOfPairs.push("X_ZPAPER__Patient__r.Name", patientFirstName + " " + patientLastName); //MSH170828
arrOfPairs.push("db-label", attachLabel); //CRN171102

//CRN180726 Case #50469 -- Set the "Indexed" checkbox
var ba = "Indexed"; //JPB180605 because we changed the name of the button from Indexed to Save
var now0 = getCurDateAndTime(doc,false,true);
arrOfPairs.push("X_reviewedStatus",ba);
//arrOfPairs.push("X_reviews",X(doc,"X_reviews")+ba+" by "+doc.kbData.remoteUser+" at "+now0+"<br/>"); //ERS170909 #40592
arrOfPairs.push("X_reviews","Received by "+doc.kbData.remoteUser+" at "+now0+"<br/>"+ba+" by "+doc.kbData.remoteUser+" at "+now0+"<br/>"); //PV190420 updated for doc set components to check
updateDB(doc, arrOfPairs);

track(doc, "Doc Indexed ", "Document with Id: " + doc.dbID, pageCount);
addPostExecutionScript(doc, "nextPage(~ready~);updateDEStatus(~indexed:" + pageRange + "~);");
/* end of rule */

//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---

//--- RULE VALIDATION CODE - END ---

</script>
