<!--
// Name: Run OCR on Fax Page
// Committer: eric.stephens@zpaper.com
// Update: PA and DEM for data too
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2020-02-14 20:34:29","evalContinue":"true","active":true,"button":"RunOCR","name":"Run OCR on Fax Page","conditions":{"logic":"or","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"RunOCR","operation":"equals"},{"name":"doc.X(\"X_attachedTo\")","value":"","operation":"equals"}]},"consequence":{"doit":""},"ordinal":15}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//TDDO detect button and then return
if (1===0 || doc.X("X_buttonAction")=="RunOCR") {rool.evalContinue=false; alert("OCR ALL DONE!");} //conditional library?
alert("BUTTON "+doc.X("X_buttonAction") +" status="+doc.status);

var t0=new Date();
zData.docTypeOCR="FAX";
//ERS190831 just new work zData.docTyper2017(doc,{"PAPP":"Patient~ Assistance~","PAUTH":"Prior~ Authorization~","ENRL":"Enrollment~","FAX":""});
var t1=new Date();
alert("docType was "+doc.docType+" now "+ zData.docTypeOCR);
//ERS181123 #47408 zData.docTyper(doc,confidence,targets)
//var someTemplates=["TENR:TecideraEnrollment_Form","ENRL:zChartamEnrollmentCapture_Form","CON:zChartamConsent_Form"]; //qa01
//var someTemplates=["DEMO:PatientDemoForm_Form","ENRL:Enrollment_Form","TENR:TBW_Form","ENRL:zChartamEnrollmentCapture_Form","CON:zChartamConsent_Form","DEMO:PatientDemoSheet_Form","HIPAA:HIPAA_Form"]; //pap
var someTemplates=["CONS:CosentyxServiceReq_Form","HIPPA:HIPPAconsent_Form"]; //dv19 ERS181207 #54331
someTemplates=["DEMO:PatientDemoForm_Form","ENRL:Enrollment_Form","TENR:TBW2019_Form","ENRL:zChartamEnrollmentCapture_Form",
    "CON:zChartamConsent_Form","DEMO:PatientDemoSheet_Form","HIPAA:HIPAA_Form"];  //ERS181211 updated from dv19
    //JPB190117 changed formId to have 2019
    //ERS200214 #69326 added PA:PennMedicaidPA_Form to top of template list  SEE BELOW!!!
someTemplates.push("ENRL:zCARTaEnrollment_Form"); //ERS181217
someTemplates.push("SENR:SBW_Form"); //ERS190115
//ERS190318 #57090 get the O2O settings for which forms to compare with
//someTemplates=["PA:00005014Z1d488eev6","PA:MRXPA_Form"]; //,"DEMO:PatientDemoForm_Form","ENRL:Enrollment_Form","TENR:TBW2019_Form"]; //ERS190228 #53000 TODO teach Judson
var org2orgCS=doc.kbData.customSettings;
var coryToDo=XCustomSetting(doc,"AutoDrive__c");
//CRN190320 I have updated the zippi code to support the doc.kbData.customSettings as the legacy code expects.
// As soon as my change is merged into the develop branch, we can make a new WAR file and test this out.
alert("ERS190318 coryToDo="+coryToDo+" org2orgCS="+org2orgCS);
if (1===0 && org2orgCS && org2orgCS.AutoDrive__c && org2orgCS.AutoDrive__c.indexOf(":")>-1 ) { //ERS190318 #57196
    someTemplates=org2orgCS.AutoDrive__c.split(",");
} else if (1===1 && coryToDo && coryToDo.indexOf(":")>-1 ) { //ERS190318 #57196
    someTemplates=coryToDo.split(",");
} else {
    alert("ERS190318 OVERRIDE NOT IN CUSTOM SETTING");
    someTemplates="TENR:TBW2019_Form,DEMO:PatientDemoForm_Form,HIPAA:MakanaHealthHIPAA_Form,ENRL:Enrollment_Form,ENRL:zChartamEnrollmentCapture_Form,CON:zChartamConsent_Form".split(",");
}
zData.pages=X(doc,"X_pages"); if (!zData.pages) {zData.pages=1;} //ERS181124 TODO CRN to add to doc
zData.confidence=0.75;
zData.confidence=0.80; //SHR181206 lowered the confidence level for testing was .9
if (1===1) { //ERS190831 #61196 zp08 tests
    someTemplates=["DEMO:PatientDemoForm_Form","ENRL:Enrollment_Form","TENR:TBW2019_Form"]; 
    someTemplates=["INS:MissingInsuranceReferral_Form", "ENRL:zChartamEnrollment_Form", "CON:zCARTaHIPAA_Form"]; //ERS190831 test for 00005014X1d9d95jvj
    someTemplates=["INS:MakanaMissingInsurance_Form", "ENRL:zCARTaEnrollment_Form", "CON:zCARTaHIPAA_Form"]; //ERS190909 edge test
    someTemplates=["HIPAA:zCARTaHIPAA_Form","ENRL:zCARTaEnrollment_Form","DEM:PatientDemoTemp_Form"]; //ERS190912 testing CON not CONS
    someTemplates=["HIPAA:zCARTaHIPAA19_Form","ENRL:AutoDriveEnrollment_Form","DEM:PatientDemoTemp_Form","CON:zCARTaConsent19_Form"]; //ERS190914 //SHR190916 unique Consent19 form
    //ERS200214 #69326 added PA:PennMedicaidPA_Form 
    someTemplates=["PA:PennMedicaidPA_Form","HIPAA:zCARTaHIPAA19_Form","ENRL:AutoDriveEnrollment_Form","DEM:PatientDemoTemp_Form","CON:zCARTaConsent19_Form"];
    zData.pages=6;
    zData.confidence=0.70; //ERS190912 for ENR with word changes
}
alert("ERS190318 someTemplate="+someTemplates);

//zData.confidence=0.40; //JPB190116 lowered the confidence level for testing was .8 //ERS190118
if (1===1) { //ERS190909 ensure we have the PNGs until lambda service is ready TODO ASM@190913
    var now3=new Date();
    zURL=getURL(doc);
    zData.filename=zURL.substring(1+zURL.lastIndexOf("/")); //ERS190909 #61196
    var PNGs="http://localhost:8080/kb/allfiles/"+doc.dbID+"/"+zData.filename+"-s01.png";
    alert("zData.filename="+zData.filename+" has "+PNGs);
    //CRN190909 converted s01.png to p02.png; we need the large images
    var getPNGs="";
    try {
        getPNGs=""+wget(doc,PNGs); //ERS190909 #61196
    } catch (e) {
        alert("wget "+PNGs+" failed:"+e);
    }
    var now4=new Date();
    alert("PNGs ready for "+doc.dbID+" "+getPNGs.length+" in "+(now4.getTime()-now3.getTime())+" ms");
}

zData.zippiCompare=zData.docTyperAD(doc,zData.confidence,someTemplates,zData.pages); //ERS190118 AD was missing //ERS190831 added pages
alert("Stack has "+zData.zippiCompare.length+" documents in "+zData.pages+" pages");
alert("DocTyper results array:\n" + JSON.stringify(zData.zippiCompare));
zData.reviews=X(doc,"X_reviews"); zData.reviewedStatus=""; //ERS190118 #53000 TODO CRN to check
var zp="ZPAPER__"; //ERS190118 #53000 TODO ASM to move to Library
var t2=new Date();
zData.zippiData=[]; zData.zippiData[0]=null; //ERS190914 hold the data details
for (var p=1; p<=zData.pages; p++) {
    alert("@@@ Examining Page " + p);   //JPB190226 Debugging...
    zData.zippiData[p]=null;
    var zd=zData.zippiCompare[p];
    alert("@@@ zippiCompare = " + zd);
    if (zd) {
        alert("page "+zd.page+" confidence="+(100.0*zd.confidence).toFixed(1)+"% sure it is a "+zd.template); //SHR190916 print 0-100 percent
        if (+zd.confidence >= zData.confidence) {
            zData.docTypeOCR=zd.docType;
            // SHR181206 try to extract fields for ENR, HIPAA, and DEMO types
            var ADtypes=",PA,ENRL,HIPAA,DEM,CON,"; //ERS190228 #53000 a bit smarter TODO Template tag //ERS190912 DEM not DEMO
            var ADdata=",ENRL,"; //ERS190914 get the field data too
            ADdata+"PA,DEM,"; //ERS200214 #69326
            if(ADtypes.indexOf(","+zd.docType+",")>-1 || zd.docType.indexOf("ENR")>-1 || zd.docType.indexOf("CONS")>-1 || zd.docType.indexOf("CONS")>-1) {
                zData.reviews+="</br>Page "+zd.page+" a "+zd.docType; //ERS190916 show in reviews
                var mode="signature"; if (ADdata.indexOf(","+zd.docType+",")>-1) { mode="all";} //ERS190914
                zData.zippiSignatures={};
                try {
                    zData.zippiSignatures=zData.extractData(doc,mode,zd.template,zd.page); //{"sign1",{wewewe}
                } catch (e) {
                    alert("SHR190916 error in extractData:"+e);    //SHR190916 on error, return an empty object
                }
                zData.zippiData[zd.page]=zData.zippiSignatures; //ERS190914
                //TODO find a confidence that it is signed
                for (var s in zData.zippiSignatures) {
                    if (zData.zippiSignatures[s].filled > 0.028 && zData.zippiSignatures[s].type=="signature") {
                        zData.reviewedStatus="Signed";
                        if (zData.reviews.indexOf(zd.docType+" "+zData.reviewedStatus) == -1) { //ERS190118 #53000 //ERS190914 reordered
                            var now0 = getCurDateAndTime(doc,false,true); //ERS190119 docSet is very picky
                            var historyParser=" by agent or patient a "; //ERS190121 #53000 CRN to explain
                            zData.reviews+=" "+zData.reviewedStatus+historyParser+" at "+now0+""; //ERS190119 #53000 make docSet happy
                        }
                        //alert("signed16 "+JSON.stringify(zData.zippiSignatures));
                        alert("Page "+zd.page+" Signed");
                        break; //ERS190916 TODO decide how to work on multiple signatures
                    }
                }
                //ERS190118 TODO set the ZStack.stage__c=Signed
                var sfStackId = X(doc,"X_sfStackId");
                if (sfStackId !== "" && zData.reviewedStatus!=="") { //ERS190118 #53000
                    var arr=[zp+"Stage__c",zData.reviewedStatus,zp+"outboundFaxTemplate__c",zData.reviews];
                    updateSFRecord(doc, zp+"zStack__c", sfStackId, arr);
                }
            }
        }
    }
}
var t3=new Date();
alert("OCR race "+zData.docTypeOCR+" in "+(t1.getTime()-t0.getTime())+" then "+ (t2.getTime()-t1.getTime())+" then "+ (t3.getTime()-t2.getTime()));
var zType=doc.X("X_docType");
if (1===1 || doc.docType != zData.docTypeOCR) {
    var arrOfPairs0 = [];
    arrOfPairs0.push("X_docTypeOCR",zData.docTypeOCR);
	arrOfPairs0.push("X_docType",zData.docTypeOCR);
	arrOfPairs0.push("X_reviewedStatus",zData.reviewedStatus);
	if (zData.reviews !== "") { arrOfPairs0.push("X_reviews",zData.reviews); } //ERS190118 for the docSet checkboxes
	arrOfPairs0.push("X_zippiCompare",JSON.stringify(zData.zippiCompare)); //ERS181123 TODO JSON in XML?
	arrOfPairs0.push("X_zippiData",JSON.stringify(zData.zippiData)); //ERS190914 has all dota from all recognized pages
    zType=zData.docTypeOCR; //ERS170330 saved below into SF faxType__c field
    updateDB(doc, arrOfPairs0);
}


//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---

//--- RULE VALIDATION CODE - END ---

</script>
