<!--
// Name: HCW21 Received Documents Library
// Committer: Prathyusha.vasireddy@zpaper.com
// Update: PV230119 Updated for static resource; PV230119
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2023-01-20 05:22:43","evalContinue":"true","active":true,"button":"","name":"HCW21 Received Documents Library","conditions":{"logic":"and","arguments":[{"name":"doc.status","value":"DoNotHCW21","operation":"not-contains"}]},"consequence":{"doit":""},"ordinal":1}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//ERS210208 getting the static resource written //ERS210424 where is the static resource?
//ERS201018 HCW21 supports v50 test with othder MFF//PV230119 Updated for static resource
if (1===0) zData.recDocId=zData.clientReceivedDocument(doc,childStackSFId);

zData.connectFile=function(doc,sfId) { //ERS210424 #82081
        //ERS210805 TODO handle DUPLICATE exception and recover from ../allfiles/0695e000000OqauAAC-00005eecX1fcbghl1j/
        alert("//ERS210424 connect the PDF to 0io");
        alert("Creating Link to ReceivedDocument with id => " + sfId);
        //CRN201026 #76788 Link the zStack (or whatever parentId that is passed in) to the ContentDocument/ContentDocumentVersion
        // created above.
        zData.fileId=doc.URL.substring(doc.URL.lastIndexOf("s/")+2);  // ../allfiles/0694T000003qmZwQAI-00004fb0X1f42tce48/eric
        zData.fileId=zData.fileId.split("-")[0];
        alert("ERS210424 connect "+sfId +" to "+zData.fileId+" from "+doc.URL);
        var linkId="";
        if (zData.fileId.indexOf("069")===0) {
            var docArrOfPairs = [];
            docArrOfPairs.push("ContentDocumentId", zData.fileId);
            // docArrOfPairs.push("ContentDocumentId", recDocId);   // this doesn't work
            docArrOfPairs.push("LinkedEntityId", sfId);
            docArrOfPairs.push("Visibility", "Allusers");
            try { //ERS210823.43 
                linkId = createSFRecord(doc, "ContentDocumentLink", null, docArrOfPairs);
            } catch(ex) {
                alert("ERS210823.46 exception making CDL for "+zData.fileId+" not fatal.");
                linkId=zData.fileId; //TODO might need the real one
            }
            alert("ContentDocumentLink created with Id => " + linkId);
        } else {
            alert("Can not connect "+sfId+" to "+doc.URL);
            return zData.fileId; //TODO210425 should have the 00P until we get that fixed
        }
        return linkId;
}


//ERS200928 #76788 create ReceivedDocument then add a LF pointing to zpoper PDF or the PDF itself
zData.clientReceivedDocument=function(doc,parentId, defaultLabel) { //new one
    var label = doc.deliveredFrom+" sent " +zData.docType;
    if (doc.deliveredFrom.startsWith("0io")) {  //CRN201024 Case #76788 fix label if this came from a Salesforce Received Document
        label = "ReceivedDocument " + zData.docType;
        if (doc.URL.indexOf("0io")>-1) { //ERS210206 #81014 loop back from uploaded Received Document and AutoDrive too
            alert("ERS210206.8 Already in ReceivedDocument "+doc.URL);
            var i=doc.URL.indexOf("0io");
            var oldId=doc.URL.substring(i,doc.URL.indexOf("-",i+1));
            return oldId;
        }
    }
    var arr=[];
    arr.push("Name", defaultLabel || label);        //CRN201024 Case #76788 allow the default label to be supreme
    arr.push("Source",zData.programName);
    arr.push("Status","Draft");
    arr.push("Direction","Incoming");
    arr.push("isActive",true);
    arr.push("DocumentNumber","z:"+doc.dbID);
    
    if (1===1) { //ERS210320 #81327 connect RecDoc to zStack
        var stackId = parentId; //X(doc, "X_stack");
        if (!stackId || stackId.indexOf("a") !== 0) stackId=zData.getStackId(doc);
        if (stackId) zData.stackId=stackId;
        if (zData.stackId) arr.push("zStack__c",zData.stackId); //ERS210320 #81327 connect RecDoc to zStack
        else alert("ERS210320.29 WARNING: could not determine zStackId!");
    }
    
    var recDocId=createSFRecord(doc, "ReceivedDocument", null, arr);
    alert("ERS200929 Made NRD="+recDocId);
    if (recDocId) {
        zData.fileId=zData.clientLightningFile(doc,recDocId,zData,zData.label);
        //zData.fileId="NEW";
        alert("ERS200929 Made RDLF="+zData.fileId);

        alert("Creating Link to ReceivedDocument with id => " + recDocId);
        //CRN201026 #76788 Link the zStack (or whatever parentId that is passed in) to the ContentDocument/ContentDocumentVersion
        // created above.
        var docArrOfPairs = [];
        docArrOfPairs.push("ContentDocumentId", zData.fileId);
        // docArrOfPairs.push("ContentDocumentId", recDocId);   // this doesn't work
        docArrOfPairs.push("LinkedEntityId", parentId);
        docArrOfPairs.push("Visibility", "Allusers");
        //var linkId = createSFRecord(doc, "ContentDocumentLink", null, docArrOfPairs);
        alert("ContentDocumentLink created with Id => " + linkId);

        //CRN201026 #76788 DO NOT call uploadToCloud (what the call to zData.clientUploadPDF() calls). It is not only
        // uploading the pdf bytes to Salesforce, it is creating the ReceivedDocument, ContentDocument, etc. that we are
        // already doing above.
        // if (1===1 && zData.fileId) {
        //     // var nativePDF=zData.clientUploadPDF(doc,recDocId,zData.fileId,zData); //fileId is 068B0000008n2Z0IAI
        //     var nativePDF = zData.clientUploadPDF(doc, recDocId, parentId, zData); //fileId is 068B0000008n2Z0IAI
        // }
    }
    return recDocId;
};

zData.clientUploadPDF=function(doc,sfId,fileId,zd,pagesRange,pdfLabel) { //ERS200929 #76788 fileId="NEW" for new one
    var nowTimeStamp = new Date().getTime() + "";
    if (!pagesRange) pagesRange="1-99";
    if (!pdfLabel) pdfLabel=doc.label;
    if (pdfLabel.indexOf(".pdf")==-1) pdfLabel+=".pdf";
    createDirectory(doc, "integrationDir", nowTimeStamp);
    var response = splitPDF(doc, pagesRange, "integrationDir", nowTimeStamp, doc.dbID);
    alert("newPDF from "+response);
    var newPDFName = X(doc, "newPDF", response);
    //TODO upload to LightningFile vs Attachment 
    var moreURL="fromURL="+fileId;
    //if (fileId.indexOf("068")==0) { sfId=fileId; fileId="NEW"; } //ERS200929 uploading to LF?
    moreURL="fromURL="+"068"; moreURL=""; fileId="NEW"; //force a new LF with native PDF
    var uploadURL = "http://localhost:8080/myfileforce/uploadToCloud.jsp?"+moreURL+"&SFid="+fileId+"&SFpid=" + sfId + "&SForg=" + doc.kbData.sfOrganizationID
      + "&label=" + pdfLabel + "&serverFile=" + newPDFName + "&Description=File attached by zPaper.";
    alert("#### Upload native PDF with " + uploadURL);
    var r = wget(doc, uploadURL);
    alert("UploadedPDF "+newPDFName+" into "+ r);
    cleanupDirectory(doc, "integrationDir", nowTimeStamp);
}

//ERS200928 see cases #65535, #72010, 
zData.clientLightningFile=function(doc,sfId,zd,desiredTitle) { //CRN200605 Supporting the title being sent in. //ERS200428 #70953 use in Index if caseId and DELIVERY_COMPLETE
    if (!zd) zd=zData;
    if (!doc.kbData.sfServer) { alert("doc.kbData.sfServer was empty."); doc.kbData.sfServer="abbvieonecrm--v3dev.lightning.force.com"; } //ERS200428 HACK
    var zserver = doc.kbData.sfServer.indexOf("https://")==0 ? doc.kbData.sfServer : "https://" + doc.kbData.sfServer; //ERS200428 was startsWith only nashorn
    //var zserver = doc.kbData.sfServer.startsWith("https://") ? doc.kbData.sfServer : "https://" + doc.kbData.sfServer;
    var docurl = zserver + "/services/data/v46.0/sobjects/ContentVersion/";
    var pdfurl = "https://gw.zpaper.com/kb/jsp/SF_find.lightning.jsp?go=SF_files.jsp&dbID=" + doc.dbID + "&SForg=" + doc.kbData.sfOrganizationID;
    //pdfurl="https://files.zpaper.com/mssa/MSSA.pdf"; //ERS200927 HACK TO SEE IF SOLID PDF will work
    var ContentVersionCategories = {
        "OTH": "Other Documents",
        "MINFO": "Missing Information", //JPB210305 changed to MINFO
        "ENRL": "Enrollment Form",
        "MEDO": "Medical - Other",
        "CON": "Consent Forms", //JPB210305 changed to CON
        "COMDR": "Communication from Physicians",
        "RX": "Prescription",
        "SA": "SA Documents",
        "MEDC": "Medical Clarification",
        "LAB": "Lab Documents",
        "INJR": "Injection Report",
        "CA": "Clinical Assessment",
        "COPAY": "Copay"
    }
    var datestr = getCurDate(doc);
    var accname = X(doc, "X_ZPAPER__PatientAccount__r.Name");
    var faxtype = X(doc, "X_ZPAPER__faxType__c");
    var revstat = X(doc, "X_reviewedStatus");
    var cattype = ContentVersionCategories[faxtype] || faxtype;
    //CRN200604 For outgoing, the accname and/or faxtype are blank so just use the Snippet label
    var docTitle = !accname && !faxtype  ? (desiredTitle ? desiredTitle : doc.label) : accname + " - " + faxtype + " - " + datestr;
    if(!desiredTitle) {//PV220118 makesure to have doctitle
        desiredTitle = docTitle;
    }
    alert("@@@@ Cleaning up data: X(doc, 'X_Sub_Category__c') => " + X(doc, "X_Sub_Category__c") + " - zData.X_Sub_Category__c => " + zData.X_Sub_Category__c);
    var docdata = {
        "Description": revstat + " by: " + doc.sfUserName + " at: " + zData.formatNow,
        "FirstPublishLocationId": sfId,
        //"CORE_Legacy_Document_ID__c": pdfurl,
        //"Core_CountryCode__c": "US",
        //"Core_Category__c": cattype,
        //"Core_Sub_Category__c": X(doc, "X_Sub_Category__c")     //CRN200505 zData is holding old, invalid value pulled from wddata instead of what the user currently chose.
//        "Core_Sub_Category__c": zData.X_Sub_Category__c
        //"ContentUrl": pdfurl,//PV230119 
        //"FileType":"PDF",
        //ERS200929 not allowed if ContentUrl "PathOnClient": docTitle+".pdf",
        //"Title": docTitle
        "Title": desiredTitle//PV230118 updated
    };
    var headers = [
        "Authorization", "Bearer " + doc.kbData.sfSessionID,
        "Content-Type", "application/json"
    ];
    var body = JSON.stringify(docdata);
    alert("@@@ Creating ContentVersion with json => " + body);
    var newId="";
    try {
        var res = wpost(doc, docurl, [], headers, body);
        alert("wpost response: " + res);
        newId=res.id; //ERS200428 TODO get the new Id TODO test with legacy engine vs zippi nashorn //SHR said maybe!!!
        if (!newId) { newId=JSON.parse(res).id; } //ERS200929 HACK eval

        alert("Pulling ContentDocumentId from ContentVersion => " + newId);
        //CRN201026 #76788 Return the ContentDocumentId which is needed to create the DocumentLink later.
        return getSFField(doc, "ContentVersion", "ContentDocumentId", null, newId);
    }
    catch(ex) {
        alert("wpost exception: " + ex);
        try {
            var mess = JSON.parse(ex);
            if (mess && Array.isArray(mess) && mess[0].errorCode) {
                addPostExecutionScript(doc, "alert(`Error creating ContentVersion! " + mess[0].errorCode + " => " + mess[0].message + "`);");
            }
        }
        catch(pex) {
            addPostExecutionScript(doc, "alert(`Error parsing JSON repsponse: " + ex + "`);");
        }
    }
    return newId;
};
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
