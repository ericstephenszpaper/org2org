<!--
// Name: Create zStack
// Committer: Marty Harvey:marty.harvey@zpaper.com
// Update: if ("Fax" == channel) {
    var incomingNumber = deliveredFrom;
    if (deliveredFrom.size() == 11) {
        incomingNumber = deliveredFrom.substring(1);
    }
    facilityID = getSFRecordID(doc, "Account", {"Fax":incomingNumber});
    if ("" != facilityID && facilityID.length > 0) {
        arrOfPairs.push("Facility__c", facilityID);
    }
}

-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-12-16 22:19:09","active":true,"button":"","name":"Create zStack","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_field0\")","value":"","operation":"equals"}]},"consequence":{"doit":""},"ordinal":14}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
/* BEGIN Create zStack */
//JPB191213 updated rule for Sales Demo Org
//var keywords=["NEW:Document Stack"]; //ERS190326 #57456 "ENRL:"]; will always match changed to NEW JPB190604
var keywordMap = {};
var keywords = ["NEW:Document Stack~","FIT:FIT Requisition~","ENRL:Enrollment~","ENRL:ENROLLMENT~","CON:Consent~","CON:consent~","FAC:Setting~","FAC:Distribution~","START:Start Form~","CHK:Checklist~","HIPAA:AUTHORIZATION~","HIPAA:HIPAA~","HIPAA:PORTABILITY~","REF:REFERRAL","REF:Referral","FIN:W2~","IC:Member ID~","FAX:"];
keywordMap["TENR"] = "TENR:Start Form";
keywordMap["NEW"] = "NEW:Document Stack";
keywordMap["ENRL"] = "ENRL:Enrollment Form";
keywordMap["FAC"] = "FAC:Facility Enrollment Form";
keywordMap["FAX"] = "NEW:Document Stack";
keywordMap["START"] = "NEW:Document Stack";
keywordMap["FIT"] = "FIT:FIT Requisition";
//keywordMap["CON"] = "CON:Consent";
//keywordMap["HIPAA"] = "HIPAA:HIPAA AUTHORIZATION";
//keywordMap["REF"] = "REF:REFERRAL";
//keywordMap["FIN"] = "FIN:W-2";
//keywordMap["IC"] = "IC:Member ID";
//keywordMap["CHK"] = "CHK:Checklist";

var zType = X(doc, "X_docType");
if (zData.docTypeOCR === "FAX" || zData.docTypeOCR === "") {
    zData.docTypeOCR = zData.docTyper(doc, keywords);
    alert("docType was " + doc.docType + " now " + zData.docTypeOCR);
    zType = X(doc, "X_docType");
    if (doc.docType != zData.docTypeOCR) {
        var arrOfPairs0 = [];
        arrOfPairs0.push("X_docTypeOCR", zData.docTypeOCR);
        arrOfPairs0.push("X_docType", zData.docTypeOCR);
        zType = zData.docTypeOCR;
        updateDB(doc, arrOfPairs0);
    }
} else { //ERS190119 TODO autoSplit #53000
    zType = zData.docTypeOCR;
    alert("ERS190119 AutoDrive found " + zType + " first or last. Which is it?");
}

zData.setbrandprogram(doc);

alert("#### fax was delivered to number: " + doc.deliveredTo);
var formatNow = getCurDateAndTime(doc);
var arrOfPairs = [];
var zp = "ZPAPER__";
var zStack = zp + "zStack__c";

if ("FAX" == zType || "START" == zType) { //PV190707 Doctype as new
    zType = "NEW";
}

alert("@@@@zType = " + zType);
arrOfPairs.push(zp + "faxType__c", keywordMap[zType]);
arrOfPairs.push(zp + "Status__c", "Received"); // PV190418 Updated stage to be Received

alert("ERS180505 doc.deliveredFrom = " + doc.deliveredFrom);

var channel = "Fax"; //JPB190529 added community to the channel
var deliveredFrom = doc.deliveredFrom + ""; //CRN180909 Make sure we have a Javascript string
var deliveredTo = doc.deliveredTo + "";	//JPB190529 Check deliveredTo for community uploades
var facilityID = "";
if (deliveredFrom.indexOf("@") > -1 || deliveredFrom.indexOf(".") > -1) {  //ERS180505 #48101
    channel = "Email";
}

if (isNaN(deliveredTo)) {
    if (deliveredTo.toLowerCase().indexOf("community") >= 0) {
        channel = "community";
    } else if (deliveredTo.toLowerCase().indexOf("upload") >= 0) {
        channel = "upload"
    } else {
        channel = "Scan";
    }
}
if ("Fax" == channel) {
    var incomingNumber = deliveredFrom;
    if (deliveredFrom.size() == 11) {
        incomingNumber = deliveredFrom.substring(1);
    }
    facilityID = getSFRecordID(doc, "Account", {"Fax":incomingNumber});
    if ("" != facilityID && facilityID.length > 0) {
        arrOfPairs.push("Facility__c", facilityID);
    }
}

alert("#### deliveredTo = " + deliveredTo + ", channel = " + channel);
//JPB190930 If this is an upload, check to see if we have a Salesforce Id to attach to
var uploadLabel = null;
if ("upload" == channel) {
    // Upload filename looks like this: email-lightningUpload-sfId-docType-name of uploaded file
    var fromFile = doc.fromFile + "";
    var parts = fromFile.split('-');
    var sfId, docTypeUpload = "UNKNOWN";
    if (parts.length > 2) {
        sfId = parts[2];
    }
    if (parts.length > 3) {
        docTypeUpload = parts[3];
    }
    alert("@@@@@ Attaching incoming document to Salesforce Id: " + sfId);
    alert("@@@@@ docType of uploaded doc: " + docTypeUpload);
    attach(doc, "Document uploaded - " + docTypeUpload, sfId);
    var arrOfPairsUpload = [];
    var ba = "Received";
    var now0 = getCurDateAndTime(doc, false, true);
    alert("$$$ now0 = " + now0 + ", ba = " + ba);
    arrOfPairsUpload.push("X_reviewedStatus", ba);
    arrOfPairsUpload.push("X_reviews", X(doc, "X_reviews") + ba + " by agent at " + now0 + "<br/>" + signedStatus);
    arrOfPairsUpload.push("X_docType", docTypeUpload);
    uploadLabel = "New " + docTypeUpload + " Document Uploaded";
    arrOfPairsUpload.push("db-label", uploadLabel); //JPB190604 changed to what Ken wanted from Initial Patient Enrollment Packet
    updateDB(doc, arrOfPairsUpload);
    //alert("@@@@ RETURNING FROM RULE; NOT CREATING NEW STACK (THIS IS WHAT JUDSON WANTS)"); JPB191014 now upload will create a zStack
    //return;
}

arrOfPairs.push(zp + "Channel__c", channel);
arrOfPairs.push(zp + "latestFax__c", formatNow);
arrOfPairs.push(zp + "receivedId__c", doc.dbID);
arrOfPairs.push(zp + "newFax__c", "true");
arrOfPairs.push(zp + "Pages__c", X(doc, "X_pages"));
alert("@@@zData.programName = " + zData.programName);
arrOfPairs.push(zp + "Classification__c", zData.classification);
arrOfPairs.push(zp + "Program_Name__c", zData.programName);
if (zData.patEnrollQueueId) {
    arrOfPairs.push("OwnerId",zData.patEnrollQueueId);
}

if (zData.classification === zData.PROGRAM_ZCHARTA) {
    arrOfPairs.push(zp + "Priority__c", "Urgent"); //JPB190426 changed to classification from program
} else if (zData.classification === zData.PROGRAM_ZPAPYRUS) {
    arrOfPairs.push(zp + "Priority__c", "Medium");
} else if (zData.classification === zData.PROGRAM_ZCARTA) {
    arrOfPairs.push(zp + "Priority__c", "Critical");
} else if (zData.classification === zData.PROGRAM_CCOFIT) {
    arrOfPairs.push(zp + "Priority__c", "High");
/*} else if (zData.classification === zData.PROGRAM_PALVEO) {
    arrOfPairs.push(zp + "Priority__c", "Special");
} else if (zData.classification === zData.PROGRAM_VINDICO) {
    arrOfPairs.push(zp + "Priority__c", "Standard");
*/
} else {
    arrOfPairs.push(zp + "Priority__c", "Normal");
}

arrOfPairs.push(zp + "sentFaxTo__c", ("community" === channel || "upload" === channel ? channel : doc.deliveredTo)); //JPB190529 added so Community shows up in Master Intake List
arrOfPairs.push(zp + "From__c", doc.deliveredFrom);
if (zData.reviewedStatus) {
    arrOfPairs.push(zp + "Stage__c", zData.reviewedStatus);
} else {
    arrOfPairs.push(zp + "Stage__c", "Received");
}

alert("Reviewed Status before setting it to Received: " + X(doc, "X_reviewedStatus"));
alert("zData.reviewedStatus = " + zData.reviewedStatus);
var sfId = createAndAttach(doc, zStack, zData.classification + " New Stack", arrOfPairs); //JPB190604 changed to what Ken wanted from Initial Patient Enrollment Packet
alert("#### Stack Received. Attached to: " + sfId);
arrOfPairs = [];
//JPB190529 Fix up the funky destination/label for community uploads
if ("community" === channel) {
    var fromFile = doc.fromFile + "";
    var parts = fromFile.split('-');
    var buffer = "";
    for (var i = 0; i < parts.length; i++) {
        if (i > 0) {
            buffer += '-';
        }
        if (1 === i) {
            buffer += "community";
        } else {
            buffer += parts[i];
        }
    }
    arrOfPairs.push("X_fromFile", buffer);
    arrOfPairs.push("X_destination", "community");
}
if ("upload" != channel) {
    arrOfPairs.push("db-label", zData.classification + " New Stack"); //JPB190604 changed to what Ken wanted from Initial Patient Enrollment Packet
    arrOfPairs.push("X_docType", zType);// PV190707 to update type on docset
}
arrOfPairs.push("db-BATES", sfId + "-STACK");
arrOfPairs.push("X_sfStackId", sfId);
var signedStatus = "";
alert("@@@@ zData.reviewedStatus = " + zData.reviewedStatus);
if ("Signed" === zData.reviewedStatus) {
    var now0 = getCurDateAndTime(doc, false, true);
    signedStatus = "Signed by agent at " + now0 + "<br/>";
}
alert("SignedStatus = " + signedStatus);

if (1===1) {
    var ba = "Received";
    var now0 = getCurDateAndTime(doc, false, true);
    alert("$$$ now0 = " + now0 + ", ba = " + ba);
    arrOfPairs.push("X_reviewedStatus", ba);
    arrOfPairs.push("X_reviews", X(doc, "X_reviews") + ba + " by agent at " + now0 + "<br/>" + signedStatus);
}

alert("@@@ calling updateDB with params: @@@@@@@@@@@@");
alert(arrOfPairs);
alert("@@@ calling updateDB with params: @@@@@@@@@@@@");
updateDB(doc, arrOfPairs);
/* END Create zStack */

//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
