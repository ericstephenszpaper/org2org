<!--
// Name: Create zStack
// Committer: Prathyusha.vasireddy@zpaper.com
// Update: PV210902 adding for attachment
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2021-09-02 15:04:42","active":true,"button":"","name":"Create zStack","conditions":{"logic":"or","arguments":[{"name":"doc.X(\"X_field0\")","value":"","operation":"equals"},{"name":"doc.X(\"X_attachedTo\")","value":"","operation":"equals"},{"name":"doc.X(\"X_barCode0\")","value":"","operation":"equals"}]},"consequence":{"doit":""},"ordinal":8}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//ERS210208 forcing a new static resource I hope #75685
//ERS210127 #80946 start of major refactor to use lost client calls
var arrOfPairs = [];
var attachLabel = "";
var zp=zData.zp; if (!zp) zp="ZPAPER__"; //ERS170626 now in the package //ERS190617 zData.zp
var zStack=zData.zps; //"Stack__c"

    //ERS190617 TODO document hub strategy
    //ERS190814 #61511 move orand and orgswitch up before zData.channel
    zData.setbrandprogram(doc); //who and where
    zData.orgSwitch(doc); //TODO refactor with setBrandProgram()
   
alert("ERS190814.11 zData.fromFile="+zData.fromFile+" .channel="+zData.channel); //ERS190814
//CRN190308 Handle uploaded files via Lightning Component and zSend or mass import
if (zData.fromFile) { //ERS190617 TODO channel guide
    if (zData.channel && zData.channel.toLowerCase().indexOf("upload")>-1) {
        var fromFile = zData.fromFile.substring(zData.fromFile.lastIndexOf('/') + 1); //ERS190624 scoping
        var parts = fromFile.split("-");
        if (parts.length >= 3) {
            var attachToId = parts[2];
            alert("@@@ UPLOAD: ATTACHING TO SALESFORCE RECORD = " + attachToId);
            var label = "File uploaded " + fromFile;
            attach(doc, label, attachToId, true);
            arrOfPairs = [];
            arrOfPairs.push("X_reviewedStatus", "Uploaded"); // PV190526 updated for upload logic
            arrOfPairs.push("X_reviews", "Uploaded by agent at " + now0 + "<br/>"+zData.signedStatus);
            arrOfPairs.push("db-label", label);
            arrOfPairs.push("X_docType", "UPLOAD");
            arrOfPairs=zData.clientUpload(doc,arrOfPairs); //ERS190706 zData.channel for upload and import
            updateDB(doc, arrOfPairs);
            if (!zData.makeStack) return; //ERS190814
        }
    }
    if (zData.channel && zData.channel.toLowerCase().indexOf("import")>-1) {
        var fromFile = zData.fromFile.substring(zData.fromFile.lastIndexOf('/') + 1); //ERS190624 scoping
        //custom setting import -:3:Contact:Fax or call zData.clientImportSOQL(fromFile) to get query
        var sfId=zData.clientImportSOQL(doc,fromFile);
        var importConfig=XCustomSetting(doc,zData.zp+"Importer__c").trim();
        if (!importConfig) importConfig=XDeploymentInfo(doc,"Importer__c").trim(); //ERS190805 type in if ()
        if (!sfId && !importConfig) importConfig="-:3:Contact:Fax";
        if (!sfId && importConfig.indexOf(":")>-1) {
            var importer=importConfig.split(":");
            var d=importer[0];
            var parts = fromFile.split(d);
            var f=("0"+importer[1])/1;
            if (parts.length >= f) {
                var sfq = {}; sfq[importer[3]]=parts[f]; //ERS190805
                sfId = getSFRecordID(doc, importer[2], sfq );
            }
        }
        if (sfId) {
            var attachToId = sfId;
            alert("@@@ IMPORT: ATTACHING TO SALESFORCE RECORD = " + attachToId);
            var label = "File uploaded " + fromFile;
            attach(doc, label, attachToId, true);
            arrOfPairs = [];
            arrOfPairs.push("X_reviewedStatus", "Imported"); // PV190526 updated for upload logic
            arrOfPairs.push("X_reviews", "Imported by agent at " + now0 + "<br/>"+zData.signedStatus);
            arrOfPairs.push("db-label", label);
            arrOfPairs.push("X_docType", "IMPORT");
            arrOfPairs=zData.clientUpload(doc,arrOfPairs); //ERS190706 zData.channel for upload and import
            updateDB(doc, arrOfPairs);
            if (!zData.makeStack) return;
        }
    }
}

    //ERS171012 keywords for demo
    var keywords=["ENRL:Enrollment~","CON:Consent~","CON:consent~","PAPP:Patient Assistance","PAUTH:Prior~ Authorization~","REG:Regulation~","REF:REFERRAL","REF:Referral","FAX:"];
    keywords=["FAX:"]; //ERS190617 TODO array or not? //ERS190624 the FAX: value effectively removes OCR TODO try both ways
    zData.docTypeOCR = zData.docTyper(doc, keywords); //PV190526 Removed types
    alert("docType was " + doc.docType + " now " + zData.docTypeOCR);
    var zType = doc.X("X_docType");
    if (doc.docType != zData.docTypeOCR) {
        var arrOfPairs0 = [];
        arrOfPairs0.push("X_docTypeOCR", zData.docTypeOCR);
        arrOfPairs0.push("X_docType", zData.docTypeOCR);
        zType = zData.docTypeOCR; //ERS170330 saved below into SF faxType__c field
        updateDB(doc, arrOfPairs0);
    }
   
    //ERS190617 TODO document hub strategy
    //ERS190814 zData.setbrandprogram(doc); //who and where
    //ERS190814 zData.orgSwitch(doc); //TODO refactor with setBrandProgram()

    arrOfPairs = [];
    //PV200825 Updated for Barcode doctype
     
     var re = new RegExp("^ENRL"); //PV2011
     var re2 = /^ENRL2/;
     var faxType = zType;
     var barCode = X(doc,"X_barCode0");
     var X_field0 = X(doc,"X_field0");
     alert("@@@X_barCode0"+ barCode);
     alert("@@@ENRLTEST" + re.test(barCode));
     alert("@@@ENRL2TEST" + re2.test(barCode));
     //if(re2.test(barCode)){
         if(barCode.indexOf("ENRL2")>=0){
         faxType= "ENRL2";
         arrOfPairs.push(zp+"faxType__c", faxType);
        alert("@@@Matched ENRL2");
     }
     //else if(re.test(barCode)){
     else if(barCode.indexOf("ENRL")>=0){
         faxType= "ENRL";
         arrOfPairs.push(zp+"faxType__c", faxType);
         alert("@@@@Matched ENRL");
     }
   /* var sx = new RegExp("^(SX-|a0|a1)");//PV201202 added for old barcode
    if(sx.test(X_field0)){
        faxType= "ENRL";
        alert("@@@@Matched ENRL");
    }*/
    else{
    zData.docType= "FAX";
    arrOfPairs.push(zp+"faxType__c", zData.docType); // PV210824 added Fax
     alert("faxTypevalue@@@"  + zData.docType);
    }
    arrOfPairs.push(zp+"Priority__c", "Medium");
    arrOfPairs.push(zp+"Status__c", "New Stack");
    arrOfPairs.push(zp+"Channel__c", zData.channel);
    // MSH171116 using zStack_Received__c instead of latestFax__c because latestFax__c gets updated by save.jsp every time the record is updated
    arrOfPairs.push(zp+"latestFax__c", zData.formatNow);
    arrOfPairs.push(zp+"receivedId__c", doc.dbID);
    arrOfPairs.push(zp+"newFax__c", "true");
    var pageRange ="1-"+X(doc,"X_pages");
    zData.pages=X(doc,"X_pages")/1;
    arrOfPairs.push(zp+"Pages__c", X(doc,"X_pages"));
    alert("ERS200213 ZPAPER__Pages__c="+zData.pages+" is "+X(doc,"X_pages"));

    arrOfPairs.push(zp+"Program_Name__c", zData.programName); //ERS200201 was zData.classification #68825
    arrOfPairs.push(zp+"Program__c", zData.programName); //ERS200202 TODO into managed package #68825
   // arrOfPairs.push(zp+"sentFaxTo__c", doc.deliveredTo); //ERS170628 caller id
    arrOfPairs.push(zp+"sentFaxTo__c", ("community" === zData.channel || "upload" === zData.channel ? zData.channel : doc.deliveredTo)); //JPB190529 added so Community shows up in Master Intake List
    arrOfPairs.push(zp+"From__c", doc.deliveredFrom);
    arrOfPairs.push(zp+"Stage__c", "Received"); //ERS170731 #40593
    arrOfPairs.push(zp+"Classification__c", zData.classification);
    attachLabel = "New "+zData.classification+" Stack received on " + zData.formatNow;
    attachLabel = "New "+zData.programName+" Stack received on " + zData.formatNow; //ERS200202 clientFile probably overrides TODO clean?
   
    //ERS200815 #75685 GUESSING arrOfPairs.push(""+"Program__c",zData.programName);  //ERS200308 TODO switch to picklist
    //ERS200308 if (zData.patEnrollQueueId) arrOfPairs.push("OwnerId",zData.patEnrollQueueId);

   
    //ERS190803 push any custom one to zData.clientStacks() or new zStackFields custom setting
    //ERS190722 make Exception go away arrOfPairs.push("zStack_Received__c", formatNow);
    //ERS190803 arrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //MSH170817 added
   if(doc.deliveredFrom.startsWith("a0") || doc.deliveredFrom.startsWith("a1")) {
       zData.doNotCreateLightningFile = true;
   }
    if (zData.clientStack) arrOfPairs=zData.clientStack(doc,arrOfPairs); //ERS190617 TODO zData.clientStack() with label //Stacks() now Stack()
     var sfId;
     if (zData.newDocument && !(doc.deliveredFrom.startsWith("a1") || doc.deliveredFrom.startsWith("a0"))) {
    sfId = createSFRecord(doc, zData.zps, null, arrOfPairs);//PV210831// PV190530 added ""
     alert("@@@arrOfPairs1" + arrOfPairs);
        var arrOfPairsAttachTo = [];
        arrOfPairsAttachTo.push("X_attachedTo",sfId); 
        updateDB(doc,arrOfPairsAttachTo);  
      }
      else{
           sfId = createAndAttach(doc, zData.zps, attachLabel, arrOfPairs); 
        alert("@1234556sfId" + sfId); 
      }
     //alert("@123zData.zps" + zData.zps);
    //var sfId = createSFRecord(doc, zData.zps, null, arrOfPairs);//PV210831
        //alert("@1234556sfId" + sfId); //PV210902 adding for attachment
         

    alert("@@@PcDocId" + zData.PcDocId);
   
        if(zData.PcDocId){ //PV210727 for stack number on Document record
        var docarrOfPairs = [];
        docarrOfPairs.push("zStack__c", sfId);
        alert("123@@@");
      updateSFRecord(doc, "PatientConnect__PC_Document__c", zData.PcDocId, docarrOfPairs);  // Changed from arrOfParirs to docarrOfPairs
    }
    if (zData.clientReceivedDocument) { //CRN201024 Case #76788 We need to create a Received Document for the parent stack also.
    //  only if it wasn't already uploaded to Salesforce
    if (!doc.deliveredFrom) { //ERS210320 #81327 the new agent.war and zippi2 do not have all the right metadata!!! TODO CMA/SHR/CRN fix zippi2
       alert("ERS210320 fix doc.deliveredFrom with "+doc.URL);
       var i=doc.URL.lastIndexOf("/");
       doc.deliveredFrom=doc.URL.substring(i+1,doc.URL.indexOf("-",i+1));
    }
    if (!doc.deliveredFrom.startsWith("0io")) { zData.recDocId = zData.clientReceivedDocument(doc, sfId, "Received Document zStack"); } //ERS201018 #77252
    }
    //CRN201024 Case #76788 If this is from an upload, set the Document Number in the Received Document
    alert("### doc.deliveredFrom => " + doc.deliveredFrom);
    if (doc.deliveredFrom.startsWith("0io")) {
    alert("### Setting the Document Number in the Received Document with Id: " + doc.deliveredFrom);
    var arrofPairsRD = [];
    arrofPairsRD.push("DocumentNumber", "z:" + doc.dbID);
        zData.stackId=sfId;
        if (zData.stackId) arrofPairsRD.push("zStack__c",zData.stackId); //ERS210320 #81327 connect RecDoc to zStack
    updateSFRecord(doc, "ReceivedDocument", doc.deliveredFrom, arrofPairsRD);
    if (!zData.recDocId)  zData.recDocId = doc.deliveredFrom; //ERS210320 #81327
    }

    //CRN180726 Case #50469 -- Set the "Received" checkbox
    var now0 = getCurDateAndTime(doc, false, true);
    arrOfPairs = []; // PV190531 added for stack label
    arrOfPairs.push("db-label", attachLabel);
    if (X(doc, "X_fromFile")==="") { //ERS190624
        arrOfPairs.push("X_fromFile",doc.URL.substring(doc.URL.lastIndexOf("/")+1));
        alert("ERS190624 repairing X_fromFile using "+doc.URL);
    }
    arrOfPairs.push("db-BATES", sfId + "-STACK");
    arrOfPairs.push("X_reviewedStatus", "Received");
    if (sfId) arrOfPairs.push("X_stack", sfId); //ERS200204 bug or misunderstanding #68825
    arrOfPairs.push("X_reviews", X(doc, "X_reviews") + "Received by agent at " + now0 + "<br/>"+zData.signedStatus); //ERS170909 #40592/CAW Update
   
    if (zData.recDocId) {
    arrOfPairs.push("X_attachedTo", doc.kbData.sfServer+"/"+sfId+","+zData.recDocId); //ERS210320 #81327
    }
   
    if (zData.zchannel) { //ERS200209 groups #68825 TODO-DONE move up and check for other values
        if (zData.zchannel.owner) arrOfPairs.push("OwnerId",zData.zchannel.owner); //ERS200308 #70273
        var flds="db-readers,db-users".split(",");
        for (var i in flds) {
            var f=flds[i];
            alert("ERS200209 zchannel."+f+"="+zData.zchannel[f]);
            if (zData.zchannel[f]) arrOfPairs.push(f, zData.zchannel[f]);
            //if (zData.zchannel["db-readers"]) arrOfPairs.push("db-readers", zData.zchannel["db-readers"]);
            //if (zData.zchannel["db-users"]) arrOfPairs.push("db-users", zData.zchannel["db-users"]);
        }
    } else { alert("ERS200822 no zchannel yet!"); }
   
    updateDB(doc, arrOfPairs);
    alert("ERS200205 created zStack "+sfId); //ERS200205 #68825
   
  /* if (zData.zchannel.action) { //ERS210320 #81327 continue the journey
        var a= zData+zData.zchannel.action.replace("()","(doc)");
       //var a= zData.zchannel.action.replace("()","(doc, [], zData.SFDCtype, zData.programName)"); //PV210901 making call to newdocument
        alert("ERS210320.173 journey on "+a);
        var r=eval(a);
        alert("ERS210320.175 results "+r);
    }*/
    /* END */

//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
