<!--
// Name: Standard Barcode Received
// Committer: andrew@zpaper.com
// Update: code cleanup
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2019-10-30 20:30:36","active":true,"button":"","name":"Standard Barcode Received","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_field0\")","value":"[001|003|00Q|500|006].*","operation":"regex"}]},"consequence":{"doit":""},"ordinal":19}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
//MSH170831 refactor to create zStack
zData.setGlobalVariables(doc); //who and where
var formatNow = getCurDateAndTime(doc);
var arrOfPairs = [];
var attachLabel = "";
var caseId = "";
var caseNumber = "";
var patientId = "";
var firstName = "";
var lastName = "";

var nowTimeStamp = new Date().getTime() + ""; 
var coverID = X(doc, "coverID");
var docTitle = X(doc, "docTitle");

alert("coverID: " + coverID);
alert("docTitle: " + docTitle);

var arrOfPairs = [];
var sfCaseId = "";
var patientFirstName = "";
var patientLastName = "";

//find sfId
var sfId = getBarcodeOne(doc);
if (!sfId || 0 === sfId.length) {
    sfId = getAlternateBarcodeOne(doc) + "";
}
alert("### sfId from barcode: " + sfId);

if (sfId && sfId.length > 0) {
    //find docType, check wddata first
    var docType = doc.X("X_docType");
    alert("docType == " + docType);
    if (!docType || 0 === docType.length) {
        zData.docTypeOCR = zData.docTyper(doc, {"PAPP":"Patient~ Assistance~", "PAUTH":"Prior~ Authorization~", "ENRL":"Enrollment~", "FAX":""});
        alert("docType was " + doc.docType + " now " + zData.docTypeOCR);
        var zType = doc.X("X_docType");
        if (doc.docType != zData.docTypeOCR) {
            var arrOfPairs0 = [];
            arrOfPairs0.push("X_docTypeOCR", zData.docTypeOCR);
            arrOfPairs0.push("X_docType", zData.docTypeOCR);
            zType = zData.docTypeOCR;
            updateDB(doc, arrOfPairs0);
        }
    }
    caseId = sfId;
	var attachedTo = X(doc, "sfServer");
    attachedTo += "/" + sfId;
	
    //find sfType
    var sfType = "";
    if (sfId && sfId.length > 0) {
        sfType = getSFType(doc, sfId);
    }
    alert("*** got sfType :: " + sfType)

    if ("Case" == sfType) {
        
	   var caseFlds = getSFFields(doc, "Case", "RecordTypeId,ContactId,AccountId", null, sfId); //AN20180718 get the fields from the Case that we will need
       var recTypeId = X(doc, "RecordTypeId", caseFlds);
       var recTypeName = getSFField(doc, "RecordType", "Name", null, recTypeId); //AN20180718 get the name of the current Case record type
       alert("@@@ current Case Record Type Name: " + recTypeName);	

       var caseClassification =  X(doc, "Classification__c", caseFlds); //get the Contact ID since PAP uses the Contact object for Patients
	   alert("@@@ caseClassification is = " + caseClassification);
	   
	   if (recTypeName === "New/Renewal/YEC/On-going Prescription"){ //this is a PAP case
	     alert("@@@ getting PAP Case details");
   	     patientId =  X(doc, "ContactId", caseFlds); //get the Contact ID since PAP uses the Contact object for Patients
	     var contactFlds = getSFFields(doc, "Contact", "FirstName,LastName", null, patientId); 
	     alert("@@@ calling SF for contactFlds :: " + contactFlds);
	     patientFirstName = X(doc, "FirstName", contactFlds);
	     patientLastName = X(doc, "LastName", contactFlds);
	   }

	   else if (recTypeName === "Benefit Verification" || recTypeName === "Denial Support" || recTypeName === "Complete Intake"){ //this is an RH-Immunology or a Complete Intake
	     alert("@@@ getting RH Case details");
	     patientId = X(doc, "AccountId", caseFlds); //get the Account ID since RH uses the Account object for Patients
	     var accountFlds = getSFFields(doc, "Account", "PS_PatientFirstName__c,PS_PatientLastName__c", null, patientId); 
	     alert("@@@ calling SF for accountFlds :: " + accountFlds);
	     patientFirstName = X(doc, "PS_PatientFirstName__c", accountFlds);
	     patientLastName = X(doc, "PS_PatientLastName__c", accountFlds);
	   }

       alert("@@@ patientId :: " + patientId);
       alert("@@@ patientFirstName :: " + patientFirstName);
       alert("@@@ patientLastName :: " + patientLastName);
    
   	   attachLabel = patientFirstName + " " + patientLastName + " - " + docType + " - " + zData.formatTodayMMddYYYY();
       alert("@@@@ attachLabel: " + attachLabel);
	   arrOfPairs.push("db-label", attachLabel);	
		
	} else {
        attachLabel = docType + " Received on " + formatNow;
    }

	alert("@@@ master ID is = " + doc.kbData.groupID);
    alert("@@@ PAP group ID is = " + zData.papGroupId);
    alert("@@@ RH-Immunology group ID is = " + zData.valetGroupId);
    alert("@@@ Complete Intake group ID is = " + zData.compIntGroupId);
	
	//set the Group security to PAP, RH-Immunology, or Complete Intake
	if (recTypeName === "New/Renewal/YEC/On-going Prescription" || caseClassification === "PAP") { //AN20180604 set PAP security
		alert("@@@ setting document security for PAP group");
		arrOfPairs.push("db-users", ":" + zData.papGroupId + ":");
		arrOfPairs.push("db-readers", ":" + zData.papGroupId + ":");
	}
	else if (recTypeName === "Benefit Verification" || caseClassification === "RH-Immunology") {//AN20180604 set RH-Immunology group security
		alert("@@@ setting document security for RH-Immunology");
		arrOfPairs.push("db-users", ":" + zData.valetGroupId + ":");
		arrOfPairs.push("db-readers", ":" + zData.valetGroupId + ":");
	}
	
	else if (recTypeName === "Complete Intake" || caseClassification === "Complete Intake") {//AN20190301 set Complete Intake group security
		alert("@@@ setting document security for Complete Intake");
		arrOfPairs.push("db-users", ":" + zData.compIntGroupId + ":");
		arrOfPairs.push("db-readers", ":" + zData.compIntGroupId + ":");
	}
	
	updateDB(doc, arrOfPairs);
		
    /* attach the fax to its corresponding Salesforce Object */
    arrOfPairs = [];
    arrOfPairs.push("X_buttonAction0", X(doc, "X_buttonAction"));
    arrOfPairs.push("X_buttonAction", "");
    
    arrOfPairs.push("db-label", attachLabel);
    arrOfPairs.push("db-BATES", sfId + "-" + docType); /* ERS170625 todo get docType from template used */
    arrOfPairs.push("X_attachedTo", attachedTo); /* ERS170628 docSet needs this */
    if (docType !== "") arrOfPairs.push("X_docType",docType); //ERS180328 #46373

    //TPM180803 For setting checkboxes on the zdocset
    if (1===1) { //ERS170909 #40592 for zDocSet statuses
       var now0 = getCurDateAndTime(doc,false,true);
       arrOfPairs.push("X_reviewedStatus", "Received");
       arrOfPairs.push("X_reviews", X(doc, "X_reviews") + "Received by agent at " + now0 + "<br/>"); //ERS170909 #40592/CAW Update
       arrOfPairs.push("X_buttonAction","");
	   alert("@@@ setting Received checkbox");
	   updateDB(doc, arrOfPairs);
	   arrOfPairs.push("X_reviewedStatus", "Indexed");
       arrOfPairs.push("X_reviews", X(doc, "X_reviews") + "Auto-indexed via barcode by agent at " + now0 + "<br/>"); //ERS170909 #40592/CAW Update
       arrOfPairs.push("X_buttonAction","");
	   alert("@@@ setting Indexed checkbox");
	   updateDB(doc, arrOfPairs);
    }
	
	attach(doc, attachLabel, sfId);

    /* save the workflow fields */
    arrOfPairs = [];
    arrOfPairs.push("ZPAPER__latestFax__c", formatNow);
    arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID);
    arrOfPairs.push("ZPAPER__newFax__c", "true");
    arrOfPairs.push("ZPAPER__faxType__c", docType);
    //MSH170829 update case status when receiving missing info
    if (sfType == "Case" && (docType && docType == "MIF")) {
        arrOfPairs.push("Status", "Information Received");
        arrOfPairs.push("PS_Missing_Info_received__c", formatNow); //MSH170912
    }
    updateSFRecord(doc, sfType, sfId, arrOfPairs);

	var masterID = (doc.kbData.groupID).substring(1,(doc.kbData.groupID).length()); //get the zPaper Master ID
	alert("@@@ masterID: " + masterID);
	
    alert("@@@@@@ Moving barcoded document into folder: " + masterID + "Triage-S3");
    moveDocument(doc, masterID + "Triage-S1A", masterID + "Triage-S3");
}

//MSH170831 create stack
var formatNow = getCurDateAndTime(doc);
var zp = "ZPAPER__"; //ERS170626 now in the package
var zStack = zp + "zStack__c";
arrOfPairs = [];
arrOfPairs.push(zp + "faxType__c", docType);
arrOfPairs.push(zp + "Priority__c", "Medium");
arrOfPairs.push(zp + "Status__c", "Complete");
arrOfPairs.push(zp + "Channel__c", "Fax");
arrOfPairs.push(zp + "latestFax__c", formatNow);
arrOfPairs.push(zp + "receivedId__c", doc.dbID);
arrOfPairs.push(zp + "newFax__c", "true");
arrOfPairs.push(zp + "Pages__c", X(doc, "X_pages"));

if (zData.classification == "PAP") { //AN20180604 set PAP queue and record type
	alert("@@@ setting queue and record type for PAP group");
	arrOfPairs.push("OwnerId", zData.papQueueId);
	arrOfPairs.push("RecordTypeId", zData.papStackRecordTypeId);
	arrOfPairs.push("Drug_Type__c", "Humira");

}
else if (zData.classification == "RH-Immunology") {//AN20180604 set RH-Immunology queue and record type
    alert("@@@ setting queue and record type for RH-Immunology group");
	arrOfPairs.push("OwnerId", zData.immunQueueId);
	arrOfPairs.push("RecordTypeId", zData.valetStackRecordTypeId);
	arrOfPairs.push("Drug_Type__c", "Humira");

}
else if (zData.classification == "Complete Intake") {//AN20190301 set Complete Intake queue and record type
    alert("@@@ setting queue and record type for Complete Intake group");
	arrOfPairs.push("OwnerId", zData.compImmQueueId );
	arrOfPairs.push("RecordTypeId", zData.compImmStackRecordTypeId);
	arrOfPairs.push("Drug_Type__c", "Skyrizi")
	
}

arrOfPairs.push(zp + "Program_Name__c", zData.classification);
arrOfPairs.push(zp + "sentFaxTo__c", doc.deliveredTo); //ERS170628 caller id
arrOfPairs.push(zp + "From__c", doc.deliveredFrom);
arrOfPairs.push("zCaller_ID__c", doc.deliveredFrom); //MSH170817 added
arrOfPairs.push(zp + "Stage__c", "Received"); //ERS170731 #40593
arrOfPairs.push(zp + "Classification__c", zData.classification);

if (caseId && caseId.length > 0) {
    arrOfPairs.push("ZPAPER__Case__c", caseId);
}
var sfStackId = createAndAttach(doc, zStack, attachLabel, arrOfPairs);
alert("#### Stack Received. Attached to: " + sfStackId);

arrOfPairs = [];
arrOfPairs.push("db-label", attachLabel);
arrOfPairs.push("db-BATES", sfStackId + "-STACK");
arrOfPairs.push("X_sfStackId", sfStackId); //ERS170727 #40447

arrOfPairs.push("X_ZPAPER__Case__c", caseId); //MSH170828
arrOfPairs.push("X_ZPAPER__Case__r.CaseNumber", caseNumber); //MSH170828
arrOfPairs.push("X_ZPAPER__Patient__c", patientId); //MSH170828
arrOfPairs.push("X_ZPAPER__Patient__r.Name", patientFirstName + " " + patientLastName); 
updateDB(doc, arrOfPairs);
//MSH170831 end create stack
//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
//--- RULE VALIDATION CODE - END ---

</script>
